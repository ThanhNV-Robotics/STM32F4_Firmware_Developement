
FreeFallVer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800dca0  0800dca0  0001dca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e340  0800e340  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e340  0800e340  0001e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e348  0800e348  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e348  0800e348  0001e348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e34c  0800e34c  0001e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000394  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000588  20000588  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107f0  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271f  00000000  00000000  00030a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  000340e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb2  00000000  00000000  00034f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001367a  00000000  00000000  00057b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf03e  00000000  00000000  0006b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a1fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005734  00000000  00000000  0013a24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc84 	.word	0x0800dc84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800dc84 	.word	0x0800dc84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f005 fa5f 	bl	80065c0 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f005 fbaa 	bl	800689c <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f005 fa69 	bl	8006624 <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f005 f9d3 	bl	8006518 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f005 fa4d 	bl	8006624 <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f005 fa35 	bl	8006604 <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	20000210 	.word	0x20000210

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f005 fe2b 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f005 fe26 	bl	8006e48 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f005 fe1b 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f005 fe16 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f004 ff98 	bl	8006154 <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f005 fe0d 	bl	8006e48 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f005 fe08 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f005 fe03 	bl	8006e48 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f005 fdf5 	bl	8006e48 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f005 fde9 	bl	8006e48 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4819      	ldr	r0, [pc, #100]	; (80012f0 <DriverInit+0x70>)
 800128c:	f005 fddc 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 8001290:	2200      	movs	r2, #0
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	4816      	ldr	r0, [pc, #88]	; (80012f0 <DriverInit+0x70>)
 8001296:	f005 fdd7 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <DriverInit+0x70>)
 80012a2:	f005 fdd1 	bl	8006e48 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <DriverInit+0x70>)
 80012ae:	f005 fdcb 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <DriverInit+0x70>)
 80012ba:	f005 fdc5 	bl	8006e48 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 80012be:	2200      	movs	r2, #0
 80012c0:	2101      	movs	r1, #1
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <DriverInit+0x74>)
 80012c4:	f005 fdc0 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 80012c8:	2200      	movs	r2, #0
 80012ca:	2110      	movs	r1, #16
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <DriverInit+0x78>)
 80012ce:	f005 fdbb 	bl	8006e48 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <DriverInit+0x7c>)
 80012da:	f005 fdb5 	bl	8006e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <DriverInit+0x70>)
 80012e6:	f005 fdaf 	bl	8006e48 <HAL_GPIO_WritePin>
	
		return true;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020000 	.word	0x40020000

08001300 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800130a:	2300      	movs	r3, #0
 800130c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	485e      	ldr	r0, [pc, #376]	; (800148c <ReadLogicF7000Out+0x18c>)
 8001312:	f005 fd81 	bl	8006e18 <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d009      	beq.n	8001330 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	2201      	movs	r2, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	b21a      	sxth	r2, r3
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	3301      	adds	r3, #1
 8001334:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4855      	ldr	r0, [pc, #340]	; (8001490 <ReadLogicF7000Out+0x190>)
 800133a:	f005 fd6d 	bl	8006e18 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d009      	beq.n	8001358 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001344:	797b      	ldrb	r3, [r7, #5]
 8001346:	2201      	movs	r2, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	b21a      	sxth	r2, r3
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	3301      	adds	r3, #1
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 800135e:	2104      	movs	r1, #4
 8001360:	484b      	ldr	r0, [pc, #300]	; (8001490 <ReadLogicF7000Out+0x190>)
 8001362:	f005 fd59 	bl	8006e18 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 8001386:	2102      	movs	r1, #2
 8001388:	4842      	ldr	r0, [pc, #264]	; (8001494 <ReadLogicF7000Out+0x194>)
 800138a:	f005 fd45 	bl	8006e18 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <ReadLogicF7000Out+0x198>)
 800139c:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <ReadLogicF7000Out+0x198>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013a6:	797b      	ldrb	r3, [r7, #5]
 80013a8:	2201      	movs	r2, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	3301      	adds	r3, #1
 80013be:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 80013c0:	2108      	movs	r1, #8
 80013c2:	4833      	ldr	r0, [pc, #204]	; (8001490 <ReadLogicF7000Out+0x190>)
 80013c4:	f005 fd28 	bl	8006e18 <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013ce:	797b      	ldrb	r3, [r7, #5]
 80013d0:	2201      	movs	r2, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21b      	sxth	r3, r3
 80013e0:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	3301      	adds	r3, #1
 80013e6:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 80013e8:	2101      	movs	r1, #1
 80013ea:	482a      	ldr	r0, [pc, #168]	; (8001494 <ReadLogicF7000Out+0x194>)
 80013ec:	f005 fd14 	bl	8006e18 <HAL_GPIO_ReadPin>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001410:	2110      	movs	r1, #16
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <ReadLogicF7000Out+0x18c>)
 8001414:	f005 fd00 	bl	8006e18 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001438:	2104      	movs	r1, #4
 800143a:	4816      	ldr	r0, [pc, #88]	; (8001494 <ReadLogicF7000Out+0x194>)
 800143c:	f005 fcec 	bl	8006e18 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 8001460:	2108      	movs	r1, #8
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <ReadLogicF7000Out+0x19c>)
 8001464:	f005 fcd8 	bl	8006e18 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 8001482:	88fb      	ldrh	r3, [r7, #6]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020000 	.word	0x40020000
 8001490:	40021000 	.word	0x40021000
 8001494:	40020800 	.word	0x40020800
 8001498:	20000441 	.word	0x20000441
 800149c:	40020400 	.word	0x40020400

080014a0 <PIDCalculate>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

float PIDCalculate (float _AccRef, float _AccFeedback, int MinSatuaration, int MaxSaturation, bool _direction)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80014aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	4613      	mov	r3, r2
 80014b4:	71fb      	strb	r3, [r7, #7]
	float Error = _AccRef - _AccFeedback;
 80014b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80014be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c2:	edc7 7a08 	vstr	s15, [r7, #32]
	
	float Pcalculation = Kp*Error;
 80014c6:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <PIDCalculate+0x158>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80014d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d4:	edc7 7a07 	vstr	s15, [r7, #28]
	IntergraError += Ki*(Error+PreError)*SampleTime*0.005; // Sampletime in second
 80014d8:	4b48      	ldr	r3, [pc, #288]	; (80015fc <PIDCalculate+0x15c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	4604      	mov	r4, r0
 80014e4:	460d      	mov	r5, r1
 80014e6:	4b46      	ldr	r3, [pc, #280]	; (8001600 <PIDCalculate+0x160>)
 80014e8:	ed93 7a00 	vldr	s14, [r3]
 80014ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80014f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <PIDCalculate+0x164>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <PIDCalculate+0x168>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150e:	ee17 0a90 	vmov	r0, s15
 8001512:	f7ff f819 	bl	8000548 <__aeabi_f2d>
 8001516:	a336      	add	r3, pc, #216	; (adr r3, 80015f0 <PIDCalculate+0x150>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f86c 	bl	80005f8 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f7fe feb0 	bl	800028c <__adddf3>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fb58 	bl	8000be8 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <PIDCalculate+0x15c>)
 800153c:	6013      	str	r3, [r2, #0]
	float Dcalculation = Kd*(Error - PreError)/SampleTime; // sampletime in ms
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <PIDCalculate+0x160>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ed97 7a08 	vldr	s14, [r7, #32]
 8001548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <PIDCalculate+0x16c>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <PIDCalculate+0x168>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001566:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float ReturnValue = Pcalculation + IntergraError + Dcalculation;
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <PIDCalculate+0x15c>)
 800156c:	ed93 7a00 	vldr	s14, [r3]
 8001570:	edd7 7a07 	vldr	s15, [r7, #28]
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	ed97 7a06 	vldr	s14, [r7, #24]
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	
	if (ReturnValue <= MinSatuaration)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d806      	bhi.n	80015aa <PIDCalculate+0x10a>
		ReturnValue = MinSatuaration;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if (ReturnValue >= MaxSaturation)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	db06      	blt.n	80015d0 <PIDCalculate+0x130>
		ReturnValue = MaxSaturation;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if (_direction)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <PIDCalculate+0x13c>
	{
		return ReturnValue;
 80015d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015da:	e003      	b.n	80015e4 <PIDCalculate+0x144>
	}
	else
	{
		return -ReturnValue;
 80015dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015e0:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	47ae147b 	.word	0x47ae147b
 80015f4:	3f747ae1 	.word	0x3f747ae1
 80015f8:	20000524 	.word	0x20000524
 80015fc:	20000538 	.word	0x20000538
 8001600:	20000544 	.word	0x20000544
 8001604:	20000528 	.word	0x20000528
 8001608:	2000045c 	.word	0x2000045c
 800160c:	2000052c 	.word	0x2000052c

08001610 <ResetPIDController>:

void ResetPIDController ()
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	IntergraError = 0;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <ResetPIDController+0x24>)
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
	PreError = 0;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <ResetPIDController+0x28>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
	AccRef = -9.6;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <ResetPIDController+0x2c>)
 8001626:	4a06      	ldr	r2, [pc, #24]	; (8001640 <ResetPIDController+0x30>)
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	20000538 	.word	0x20000538
 8001638:	20000544 	.word	0x20000544
 800163c:	20000010 	.word	0x20000010
 8001640:	c119999a 	.word	0xc119999a

08001644 <ExtractMotionCode>:

void ExtractMotionCode () // Extract command from the UI
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 800164a:	2220      	movs	r2, #32
 800164c:	2100      	movs	r1, #0
 800164e:	4827      	ldr	r0, [pc, #156]	; (80016ec <ExtractMotionCode+0xa8>)
 8001650:	f007 fff8 	bl	8009644 <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 8001654:	2228      	movs	r2, #40	; 0x28
 8001656:	2100      	movs	r1, #0
 8001658:	4825      	ldr	r0, [pc, #148]	; (80016f0 <ExtractMotionCode+0xac>)
 800165a:	f007 fff3 	bl	8009644 <memset>
	uint8_t j = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001662:	2300      	movs	r3, #0
 8001664:	71bb      	strb	r3, [r7, #6]
 8001666:	e012      	b.n	800168e <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <ExtractMotionCode+0xb0>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 8001674:	79ba      	ldrb	r2, [r7, #6]
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	491e      	ldr	r1, [pc, #120]	; (80016f4 <ExtractMotionCode+0xb0>)
 800167a:	5c8a      	ldrb	r2, [r1, r2]
 800167c:	b2d1      	uxtb	r1, r2
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <ExtractMotionCode+0xac>)
 8001680:	54d1      	strb	r1, [r2, r3]
			j++;
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3301      	adds	r3, #1
 8001686:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	3301      	adds	r3, #1
 800168c:	71bb      	strb	r3, [r7, #6]
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	2b27      	cmp	r3, #39	; 0x27
 8001692:	d9e9      	bls.n	8001668 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	71fb      	strb	r3, [r7, #7]
	char *token;	
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 8001698:	4917      	ldr	r1, [pc, #92]	; (80016f8 <ExtractMotionCode+0xb4>)
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <ExtractMotionCode+0xac>)
 800169c:	f009 fa92 	bl	800abc4 <strtok>
 80016a0:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 80016a2:	e016      	b.n	80016d2 <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type 
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f007 ff9f 	bl	80095e8 <atof>
 80016aa:	ec53 2b10 	vmov	r2, r3, d0
 80016ae:	79fc      	ldrb	r4, [r7, #7]
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa98 	bl	8000be8 <__aeabi_d2f>
 80016b8:	4602      	mov	r2, r0
 80016ba:	490c      	ldr	r1, [pc, #48]	; (80016ec <ExtractMotionCode+0xa8>)
 80016bc:	00a3      	lsls	r3, r4, #2
 80016be:	440b      	add	r3, r1
 80016c0:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type 
        token = strtok(NULL, "/");
 80016c2:	490d      	ldr	r1, [pc, #52]	; (80016f8 <ExtractMotionCode+0xb4>)
 80016c4:	2000      	movs	r0, #0
 80016c6:	f009 fa7d 	bl	800abc4 <strtok>
 80016ca:	6038      	str	r0, [r7, #0]
				j++;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	3301      	adds	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e5      	bne.n	80016a4 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 80016d8:	2228      	movs	r2, #40	; 0x28
 80016da:	2100      	movs	r1, #0
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <ExtractMotionCode+0xb0>)
 80016de:	f007 ffb1 	bl	8009644 <memset>
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000504 	.word	0x20000504
 80016f0:	200003e0 	.word	0x200003e0
 80016f4:	20000380 	.word	0x20000380
 80016f8:	0800dca0 	.word	0x0800dca0

080016fc <ReadMultiRegister>:
//	}
//}


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	80fb      	strh	r3, [r7, #6]
 8001708:	4613      	mov	r3, r2
 800170a:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	uint8_t TxDataToDriver[8]; // 8 bytes of data frame
	
	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 800170c:	2301      	movs	r3, #1
 800170e:	733b      	strb	r3, [r7, #12]
	TxDataToDriver[1] = 3;//Read Regis, function code	
 8001710:	2303      	movs	r3, #3
 8001712:	737b      	strb	r3, [r7, #13]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	b29b      	uxth	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	73bb      	strb	r3, [r7, #14]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 8001724:	2300      	movs	r3, #0
 8001726:	743b      	strb	r3, [r7, #16]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 8001728:	797b      	ldrb	r3, [r7, #5]
 800172a:	747b      	strb	r3, [r7, #17]
	
	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 800172c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001730:	83fb      	strh	r3, [r7, #30]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++) 
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	e027      	b.n	8001788 <ReadMultiRegister+0x8c>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 8001738:	f107 020c 	add.w	r2, r7, #12
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b29a      	uxth	r2, r3
 8001744:	8bfb      	ldrh	r3, [r7, #30]
 8001746:	4053      	eors	r3, r2
 8001748:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--) 
 800174a:	2308      	movs	r3, #8
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e015      	b.n	800177c <ReadMultiRegister+0x80>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0) 
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <ReadMultiRegister+0x74>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 800175a:	8bfb      	ldrh	r3, [r7, #30]
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	83fb      	strh	r3, [r7, #30]
							crc ^= 0xA001;
 8001760:	8bfb      	ldrh	r3, [r7, #30]
 8001762:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001766:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 800176a:	43db      	mvns	r3, r3
 800176c:	83fb      	strh	r3, [r7, #30]
 800176e:	e002      	b.n	8001776 <ReadMultiRegister+0x7a>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 8001770:	8bfb      	ldrh	r3, [r7, #30]
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--) 
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3b01      	subs	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e6      	bne.n	8001750 <ReadMultiRegister+0x54>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++) 
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	3301      	adds	r3, #1
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b05      	cmp	r3, #5
 800178c:	ddd4      	ble.n	8001738 <ReadMultiRegister+0x3c>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 800178e:	8bfb      	ldrh	r3, [r7, #30]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	74bb      	strb	r3, [r7, #18]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);				
 8001794:	8bfb      	ldrh	r3, [r7, #30]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	74fb      	strb	r3, [r7, #19]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 800179e:	2200      	movs	r2, #0
 80017a0:	2101      	movs	r1, #1
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <ReadMultiRegister+0xd8>)
 80017a4:	f005 fb50 	bl	8006e48 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_UART_Transmit(&huart5,TxDataToDriver,sizeof(TxDataToDriver),200); // use UART5 to send
 80017a8:	f107 010c 	add.w	r1, r7, #12
 80017ac:	23c8      	movs	r3, #200	; 0xc8
 80017ae:	2208      	movs	r2, #8
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <ReadMultiRegister+0xdc>)
 80017b2:	f006 fef2 	bl	800859a <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 80017b6:	2201      	movs	r2, #1
 80017b8:	2101      	movs	r1, #1
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <ReadMultiRegister+0xd8>)
 80017bc:	f005 fb44 	bl	8006e48 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 80017c0:	2201      	movs	r2, #1
 80017c2:	4906      	ldr	r1, [pc, #24]	; (80017dc <ReadMultiRegister+0xe0>)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <ReadMultiRegister+0xdc>)
 80017c6:	f006 ff7a 	bl	80086be <HAL_UART_Receive_IT>
	
	/// For debug only, should be comment out latter
	//uint8_t u8_TxPCBuff[20]="< Read Data";
	//HAL_UART_Transmit(&huart6,u8_TxPCBuff,sizeof(u8_TxPCBuff),1000);	
	/// Dubug END
}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	200002b4 	.word	0x200002b4
 80017dc:	20000409 	.word	0x20000409

080017e0 <LoadSavedParam>:



void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b09f      	sub	sp, #124	; 0x7c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];
	
	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <LoadSavedParam+0x74>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fcd6 	bl	80011a8 <Flash_Read_Data>
	
	uint8_t	j = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4914      	ldr	r1, [pc, #80]	; (8001858 <LoadSavedParam+0x78>)
 8001808:	4618      	mov	r0, r3
 800180a:	f009 f9db 	bl	800abc4 <strtok>
 800180e:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 8001810:	e017      	b.n	8001842 <LoadSavedParam+0x62>
    {
				_Param[j] = (atof(token)); // covert to float type 
 8001812:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001814:	f007 fee8 	bl	80095e8 <atof>
 8001818:	ec51 0b10 	vmov	r0, r1, d0
 800181c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	18d4      	adds	r4, r2, r3
 8001826:	f7ff f9df 	bl	8000be8 <__aeabi_d2f>
 800182a:	4603      	mov	r3, r0
 800182c:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 800182e:	490a      	ldr	r1, [pc, #40]	; (8001858 <LoadSavedParam+0x78>)
 8001830:	2000      	movs	r0, #0
 8001832:	f009 f9c7 	bl	800abc4 <strtok>
 8001836:	6738      	str	r0, [r7, #112]	; 0x70
				j++;
 8001838:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800183c:	3301      	adds	r3, #1
 800183e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 8001842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e4      	bne.n	8001812 <LoadSavedParam+0x32>
    }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	377c      	adds	r7, #124	; 0x7c
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	2000000c 	.word	0x2000000c
 8001858:	0800dca0 	.word	0x0800dca0

0800185c <SaveSystemParams>:

void SaveSystemParams ()
{
 800185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001860:	b0b9      	sub	sp, #228	; 0xe4
 8001862:	af16      	add	r7, sp, #88	; 0x58
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4f"
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <SaveSystemParams+0x14c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe6d 	bl	8000548 <__aeabi_f2d>
 800186e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8001872:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <SaveSystemParams+0x150>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461e      	mov	r6, r3
 8001878:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <SaveSystemParams+0x154>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187e:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <SaveSystemParams+0x158>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <SaveSystemParams+0x15c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <SaveSystemParams+0x160>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <SaveSystemParams+0x164>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe4f 	bl	8000548 <__aeabi_f2d>
 80018aa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018ae:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <SaveSystemParams+0x168>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe48 	bl	8000548 <__aeabi_f2d>
 80018b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <SaveSystemParams+0x16c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe41 	bl	8000548 <__aeabi_f2d>
 80018c6:	e9c7 0100 	strd	r0, r1, [r7]
 80018ca:	4b40      	ldr	r3, [pc, #256]	; (80019cc <SaveSystemParams+0x170>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	4682      	mov	sl, r0
 80018d6:	468b      	mov	fp, r1
 80018d8:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <SaveSystemParams+0x174>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe33 	bl	8000548 <__aeabi_f2d>
 80018e2:	4680      	mov	r8, r0
 80018e4:	4689      	mov	r9, r1
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <SaveSystemParams+0x178>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	4604      	mov	r4, r0
 80018f2:	460d      	mov	r5, r1
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <SaveSystemParams+0x17c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe25 	bl	8000548 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001906:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800190a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800190e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8001912:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001916:	ed97 7b00 	vldr	d7, [r7]
 800191a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800191e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001922:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001926:	ed97 7b04 	vldr	d7, [r7, #16]
 800192a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800192e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001932:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001936:	ed97 7b08 	vldr	d7, [r7, #32]
 800193a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800193e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001940:	9102      	str	r1, [sp, #8]
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	9600      	str	r6, [sp, #0]
 8001948:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800194c:	4923      	ldr	r1, [pc, #140]	; (80019dc <SaveSystemParams+0x180>)
 800194e:	f008 faeb 	bl	8009f28 <siprintf>
 8001952:	4603      	mov	r3, r0
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <SaveSystemParams+0x184>)
 8001958:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
					 FlyAccSlope, Ki, BrakeAccSlope); // Combine to a string
	numofwords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 800195a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc36 	bl	80001d0 <strlen>
 8001964:	4603      	mov	r3, r0
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	b2dc      	uxtb	r4, r3
 800196a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fc2e 	bl	80001d0 <strlen>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf14      	ite	ne
 800197e:	2301      	movne	r3, #1
 8001980:	2300      	moveq	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4423      	add	r3, r4
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <SaveSystemParams+0x188>)
 800198a:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, numofwords);
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <SaveSystemParams+0x188>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b29a      	uxth	r2, r3
 8001992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001996:	4619      	mov	r1, r3
 8001998:	4813      	ldr	r0, [pc, #76]	; (80019e8 <SaveSystemParams+0x18c>)
 800199a:	f7ff fba7 	bl	80010ec <Flash_Write_Data>
}
 800199e:	bf00      	nop
 80019a0:	378c      	adds	r7, #140	; 0x8c
 80019a2:	46bd      	mov	sp, r7
 80019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a8:	20000458 	.word	0x20000458
 80019ac:	2000045d 	.word	0x2000045d
 80019b0:	2000045e 	.word	0x2000045e
 80019b4:	2000045c 	.word	0x2000045c
 80019b8:	20000478 	.word	0x20000478
 80019bc:	20000464 	.word	0x20000464
 80019c0:	20000468 	.word	0x20000468
 80019c4:	20000498 	.word	0x20000498
 80019c8:	2000047c 	.word	0x2000047c
 80019cc:	20000480 	.word	0x20000480
 80019d0:	20000534 	.word	0x20000534
 80019d4:	20000528 	.word	0x20000528
 80019d8:	20000530 	.word	0x20000530
 80019dc:	0800dca4 	.word	0x0800dca4
 80019e0:	2000042a 	.word	0x2000042a
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	08040000 	.word	0x08040000
 80019ec:	00000000 	.word	0x00000000

080019f0 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019fc:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 8001a00:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	db0d      	blt.n	8001a2a <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	d811      	bhi.n	8001a46 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]
				return;
 8001a28:	e036      	b.n	8001a98 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	db03      	blt.n	8001a46 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
				return;
 8001a44:	e028      	b.n	8001a98 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	4604      	mov	r4, r0
 8001a52:	460d      	mov	r5, r1
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <LinearGeneration+0xb8>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	ee17 0a90 	vmov	r0, s15
 8001a6c:	f7fe fd6c 	bl	8000548 <__aeabi_f2d>
 8001a70:	a30b      	add	r3, pc, #44	; (adr r3, 8001aa0 <LinearGeneration+0xb0>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fdbf 	bl	80005f8 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fc03 	bl	800028c <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8ab 	bl	8000be8 <__aeabi_d2f>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001aa4:	3f50624d 	.word	0x3f50624d
 8001aa8:	2000045c 	.word	0x2000045c

08001aac <StopPulseGenerating>:


void StopPulseGenerating()
{	
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; // 
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <StopPulseGenerating+0x2c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <StopPulseGenerating+0x30>)
 8001ab8:	f005 ff12 	bl	80078e0 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <StopPulseGenerating+0x34>)
 8001ac4:	f005 f9c0 	bl	8006e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status	
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <StopPulseGenerating+0x38>)
 8001ad0:	f005 f9ba 	bl	8006e48 <HAL_GPIO_WritePin>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000043f 	.word	0x2000043f
 8001adc:	2000026c 	.word	0x2000026c
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40020800 	.word	0x40020800

08001ae8 <StartPulseGenerating>:
void StartPulseGenerating(bool _direction)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	// Reset 2 channel to 0 logic
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET);
 8001af2:	2201      	movs	r2, #1
 8001af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af8:	480e      	ldr	r0, [pc, #56]	; (8001b34 <StartPulseGenerating+0x4c>)
 8001afa:	f005 f9a5 	bl	8006e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <StartPulseGenerating+0x50>)
 8001b06:	f005 f99f 	bl	8006e48 <HAL_GPIO_WritePin>
	if (_direction == true) // true == move down
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <StartPulseGenerating+0x30>
	{
		PRIsToggled = false; // to move down
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <StartPulseGenerating+0x54>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e002      	b.n	8001b1e <StartPulseGenerating+0x36>
	}
	else // false = move up
	{
		PRIsToggled = true; // move up
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <StartPulseGenerating+0x54>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
	}
	PulseGenerationFlag = true;// turn on flag
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <StartPulseGenerating+0x58>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3		
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <StartPulseGenerating+0x5c>)
 8001b26:	f005 fe6b 	bl	8007800 <HAL_TIM_Base_Start_IT>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	2000044b 	.word	0x2000044b
 8001b40:	2000043f 	.word	0x2000043f
 8001b44:	2000026c 	.word	0x2000026c

08001b48 <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <WaitingMiliSecond+0x44>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <WaitingMiliSecond+0x44>)
 8001b5c:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <WaitingMiliSecond+0x48>)
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <WaitingMiliSecond+0x44>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d804      	bhi.n	8001b7c <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <WaitingMiliSecond+0x44>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	801a      	strh	r2, [r3, #0]
		return true;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <WaitingMiliSecond+0x36>
	}
	return false;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000456 	.word	0x20000456
 8001b90:	2000045c 	.word	0x2000045c
 8001b94:	00000000 	.word	0x00000000

08001b98 <CalculateDeltaPulse>:
//		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
//	}
//}

int CalculateDeltaPulse (float speed) // speed in m/s
{
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	ed87 0a01 	vstr	s0, [r7, #4]
	// x = vt // position function
	// dx = vdt
	return (int)(SampleTime*0.001*speed*EncoderResolution/(2*3.14*DrumRadius)); // SampleTime in ms
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <CalculateDeltaPulse+0xa8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcbc 	bl	8000524 <__aeabi_i2d>
 8001bac:	a320      	add	r3, pc, #128	; (adr r3, 8001c30 <CalculateDeltaPulse+0x98>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe fd21 	bl	80005f8 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4614      	mov	r4, r2
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fcc2 	bl	8000548 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fd14 	bl	80005f8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <CalculateDeltaPulse+0xac>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fca1 	bl	8000524 <__aeabi_i2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4620      	mov	r0, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	f7fe fd05 	bl	80005f8 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4614      	mov	r4, r2
 8001bf4:	461d      	mov	r5, r3
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <CalculateDeltaPulse+0xb0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fca4 	bl	8000548 <__aeabi_f2d>
 8001c00:	a30d      	add	r3, pc, #52	; (adr r3, 8001c38 <CalculateDeltaPulse+0xa0>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4629      	mov	r1, r5
 8001c12:	f7fe fe1b 	bl	800084c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff9b 	bl	8000b58 <__aeabi_d2iz>
 8001c22:	4603      	mov	r3, r0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2c:	f3af 8000 	nop.w
 8001c30:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c34:	3f50624d 	.word	0x3f50624d
 8001c38:	51eb851f 	.word	0x51eb851f
 8001c3c:	40191eb8 	.word	0x40191eb8
 8001c40:	2000045c 	.word	0x2000045c
 8001c44:	2000000a 	.word	0x2000000a
 8001c48:	20000458 	.word	0x20000458

08001c4c <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001c58:	4b95      	ldr	r3, [pc, #596]	; (8001eb0 <CheckGoingToRefPosition+0x264>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 809d 	beq.w	8001d9c <CheckGoingToRefPosition+0x150>
	{
		//if (abs(RefPulsePosition - EgearRatio*PositionPulseCmd) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/120)) // Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001c62:	4b94      	ldr	r3, [pc, #592]	; (8001eb4 <CheckGoingToRefPosition+0x268>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	1ad2      	subs	r2, r2, r3
 8001c6a:	4b93      	ldr	r3, [pc, #588]	; (8001eb8 <CheckGoingToRefPosition+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001c74:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c78:	4b90      	ldr	r3, [pc, #576]	; (8001ebc <CheckGoingToRefPosition+0x270>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4b90      	ldr	r3, [pc, #576]	; (8001ec0 <CheckGoingToRefPosition+0x274>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	498f      	ldr	r1, [pc, #572]	; (8001ec4 <CheckGoingToRefPosition+0x278>)
 8001c88:	fb81 0103 	smull	r0, r1, r1, r3
 8001c8c:	10c9      	asrs	r1, r1, #3
 8001c8e:	17db      	asrs	r3, r3, #31
 8001c90:	1acb      	subs	r3, r1, r3
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dc3a      	bgt.n	8001d0c <CheckGoingToRefPosition+0xc0>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <CheckGoingToRefPosition+0x72>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20); //-EpsilonPulling means the spd is negative
 8001c9c:	4b8a      	ldr	r3, [pc, #552]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eef1 7a67 	vneg.f32	s15, s15
 8001ca6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cae:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb6:	4885      	ldr	r0, [pc, #532]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001cb8:	f7ff fe9a 	bl	80019f0 <LinearGeneration>
 8001cbc:	e00d      	b.n	8001cda <CheckGoingToRefPosition+0x8e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10,PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20); //-EpsilonPulling means the spd is negative
 8001cbe:	4b82      	ldr	r3, [pc, #520]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ccc:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd4:	487d      	ldr	r0, [pc, #500]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001cd6:	f7ff fe8b 	bl	80019f0 <LinearGeneration>
			}
			// Calculate DeltaPulse
			DeltaPulse = CalculateDeltaPulse (SpeedCmd);
 8001cda:	4b7c      	ldr	r3, [pc, #496]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	f7ff ff58 	bl	8001b98 <CalculateDeltaPulse>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a79      	ldr	r2, [pc, #484]	; (8001ed0 <CheckGoingToRefPosition+0x284>)
 8001cec:	6013      	str	r3, [r2, #0]
			if (DeltaPulse > 0) // Go down
 8001cee:	4b78      	ldr	r3, [pc, #480]	; (8001ed0 <CheckGoingToRefPosition+0x284>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dd02      	ble.n	8001cfc <CheckGoingToRefPosition+0xb0>
			{
				StartPulseGenerating (true);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff fef6 	bl	8001ae8 <StartPulseGenerating>
			}
			if (DeltaPulse < 0) // Go up
 8001cfc:	4b74      	ldr	r3, [pc, #464]	; (8001ed0 <CheckGoingToRefPosition+0x284>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da32      	bge.n	8001d6a <CheckGoingToRefPosition+0x11e>
			{
				StartPulseGenerating (false);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7ff feef 	bl	8001ae8 <StartPulseGenerating>
 8001d0a:	e02e      	b.n	8001d6a <CheckGoingToRefPosition+0x11e>
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d014      	beq.n	8001d3c <CheckGoingToRefPosition+0xf0>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001d12:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <CheckGoingToRefPosition+0x274>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	ee07 3a10 	vmov	s14, r3
 8001d28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001d2c:	eef0 0a47 	vmov.f32	s1, s14
 8001d30:	eeb0 0a67 	vmov.f32	s0, s15
 8001d34:	4865      	ldr	r0, [pc, #404]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001d36:	f7ff fe5b 	bl	80019f0 <LinearGeneration>
 8001d3a:	e016      	b.n	8001d6a <CheckGoingToRefPosition+0x11e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001d3c:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eef1 7a67 	vneg.f32	s15, s15
 8001d46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <CheckGoingToRefPosition+0x274>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	425b      	negs	r3, r3
 8001d54:	ee07 3a10 	vmov	s14, r3
 8001d58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d5c:	eef0 0a47 	vmov.f32	s1, s14
 8001d60:	eeb0 0a67 	vmov.f32	s0, s15
 8001d64:	4859      	ldr	r0, [pc, #356]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001d66:	f7ff fe43 	bl	80019f0 <LinearGeneration>
			{

			}
			//PrePullingSpeed = SpeedCmd;
		}
		if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 1000) // Reach the ref position
 8001d6a:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <CheckGoingToRefPosition+0x268>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	1ad2      	subs	r2, r2, r3
 8001d72:	4b51      	ldr	r3, [pc, #324]	; (8001eb8 <CheckGoingToRefPosition+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bfb8      	it	lt
 8001d7c:	425b      	neglt	r3, r3
 8001d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d82:	f300 808f 	bgt.w	8001ea4 <CheckGoingToRefPosition+0x258>
		{	
//			RunningTime = 0;
//			RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <CheckGoingToRefPosition+0x288>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();			
 8001d94:	f7ff fe8a 	bl	8001aac <StopPulseGenerating>
			return true;			
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e084      	b.n	8001ea6 <CheckGoingToRefPosition+0x25a>
		}			
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001d9c:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <CheckGoingToRefPosition+0x268>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	1ad2      	subs	r2, r2, r3
 8001da4:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <CheckGoingToRefPosition+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001dae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <CheckGoingToRefPosition+0x270>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <CheckGoingToRefPosition+0x274>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4945      	ldr	r1, [pc, #276]	; (8001ed8 <CheckGoingToRefPosition+0x28c>)
 8001dc2:	fb81 0103 	smull	r0, r1, r1, r3
 8001dc6:	4419      	add	r1, r3
 8001dc8:	1109      	asrs	r1, r1, #4
 8001dca:	17db      	asrs	r3, r3, #31
 8001dcc:	1acb      	subs	r3, r1, r3
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dc22      	bgt.n	8001e18 <CheckGoingToRefPosition+0x1cc>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <CheckGoingToRefPosition+0x1ae>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20);
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	eef1 7a67 	vneg.f32	s15, s15
 8001de2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dea:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	4836      	ldr	r0, [pc, #216]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001df4:	f7ff fdfc 	bl	80019f0 <LinearGeneration>
 8001df8:	e03d      	b.n	8001e76 <CheckGoingToRefPosition+0x22a>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*10,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20);
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e08:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	482e      	ldr	r0, [pc, #184]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001e12:	f7ff fded 	bl	80019f0 <LinearGeneration>
 8001e16:	e02e      	b.n	8001e76 <CheckGoingToRefPosition+0x22a>
		
		else
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d014      	beq.n	8001e48 <CheckGoingToRefPosition+0x1fc>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <CheckGoingToRefPosition+0x274>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	ee07 3a10 	vmov	s14, r3
 8001e34:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e38:	eef0 0a47 	vmov.f32	s1, s14
 8001e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e40:	4822      	ldr	r0, [pc, #136]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001e42:	f7ff fdd5 	bl	80019f0 <LinearGeneration>
 8001e46:	e016      	b.n	8001e76 <CheckGoingToRefPosition+0x22a>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration*10,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed);
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <CheckGoingToRefPosition+0x27c>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	eef1 7a67 	vneg.f32	s15, s15
 8001e52:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <CheckGoingToRefPosition+0x274>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	425b      	negs	r3, r3
 8001e60:	ee07 3a10 	vmov	s14, r3
 8001e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e68:	eef0 0a47 	vmov.f32	s1, s14
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	4816      	ldr	r0, [pc, #88]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001e72:	f7ff fdbd 	bl	80019f0 <LinearGeneration>

			}
			//PrePullingSpeed = SpeedCmd;
		}
		
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 100) // Reach the bottom position
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <CheckGoingToRefPosition+0x268>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	1ad2      	subs	r2, r2, r3
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <CheckGoingToRefPosition+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bfb8      	it	lt
 8001e88:	425b      	neglt	r3, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	dc0a      	bgt.n	8001ea4 <CheckGoingToRefPosition+0x258>
		{
			//RunningTime = 0;
			//RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <CheckGoingToRefPosition+0x288>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;		
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <CheckGoingToRefPosition+0x280>)
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();				
 8001e9c:	f7ff fe06 	bl	8001aac <StopPulseGenerating>
			return true;			
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <CheckGoingToRefPosition+0x25a>
		}
	}
	return false;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000003 	.word	0x20000003
 8001eb4:	200004fc 	.word	0x200004fc
 8001eb8:	200004b0 	.word	0x200004b0
 8001ebc:	2000000a 	.word	0x2000000a
 8001ec0:	2000045d 	.word	0x2000045d
 8001ec4:	66666667 	.word	0x66666667
 8001ec8:	20000460 	.word	0x20000460
 8001ecc:	20000500 	.word	0x20000500
 8001ed0:	200004bc 	.word	0x200004bc
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	88888889 	.word	0x88888889

08001edc <InitGoingToStartingPosition>:

void InitGoingToStartingPosition ()
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	if (MotorDriver) // HIGEN FDA7000
 8001ee0:	4b51      	ldr	r3, [pc, #324]	; (8002028 <InitGoingToStartingPosition+0x14c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d04e      	beq.n	8001f86 <InitGoingToStartingPosition+0xaa>
	{
		//if (PositionPulseCmd*EgearRatio < PullingBotomPulseCmdPosition) // Then going down to the bottom
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition)
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <InitGoingToStartingPosition+0x150>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <InitGoingToStartingPosition+0x154>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <InitGoingToStartingPosition+0x158>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	da0f      	bge.n	8001f1a <InitGoingToStartingPosition+0x3e>
		{
			StartAccleratePulling = false;
 8001efa:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <InitGoingToStartingPosition+0x15c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001f00:	4b4e      	ldr	r3, [pc, #312]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = false; // false = Dropping Down
 8001f06:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <InitGoingToStartingPosition+0x164>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f0c:	f7ff f9ac 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			StartPulseGenerating(Direction);
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fde7 	bl	8001ae8 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <InitGoingToStartingPosition+0x150>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <InitGoingToStartingPosition+0x154>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <InitGoingToStartingPosition+0x158>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dd0f      	ble.n	8001f4c <InitGoingToStartingPosition+0x70>
		{
			StartAccleratePulling = false;
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <InitGoingToStartingPosition+0x15c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001f32:	4b42      	ldr	r3, [pc, #264]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001f38:	4b41      	ldr	r3, [pc, #260]	; (8002040 <InitGoingToStartingPosition+0x164>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f3e:	f7ff f993 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse

			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating(Direction);
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fdce 	bl	8001ae8 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <InitGoingToStartingPosition+0x150>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <InitGoingToStartingPosition+0x154>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	1ad2      	subs	r2, r2, r3
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <InitGoingToStartingPosition+0x158>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d161      	bne.n	8002022 <InitGoingToStartingPosition+0x146>
		{
			StartAccleratePulling = true;
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <InitGoingToStartingPosition+0x15c>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage				
 8001f64:	4b37      	ldr	r3, [pc, #220]	; (8002044 <InitGoingToStartingPosition+0x168>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
			Direction = false;				
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
			
			PRIsToggled = true; // true = pulling up.
 8001f70:	4b33      	ldr	r3, [pc, #204]	; (8002040 <InitGoingToStartingPosition+0x164>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f76:	f7ff f977 	bl	8001268 <DisableSTOP>
			StartPulseGenerating(Direction);
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fdb2 	bl	8001ae8 <StartPulseGenerating>
			PRIsToggled = true; // true = pulling up.
			DisableSTOP(); // Disable the stop
			StartPulseGenerating(Direction);
		}	
	}
}
 8001f84:	e04d      	b.n	8002022 <InitGoingToStartingPosition+0x146>
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition) // Then going down to the bottom
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <InitGoingToStartingPosition+0x150>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b29      	ldr	r3, [pc, #164]	; (8002030 <InitGoingToStartingPosition+0x154>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	1ad2      	subs	r2, r2, r3
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <InitGoingToStartingPosition+0x158>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	da0f      	bge.n	8001fb8 <InitGoingToStartingPosition+0xdc>
			StartAccleratePulling = false;
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <InitGoingToStartingPosition+0x15c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down
 8001fa4:	4b26      	ldr	r3, [pc, #152]	; (8002040 <InitGoingToStartingPosition+0x164>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001faa:	f7ff f95d 	bl	8001268 <DisableSTOP>
			StartPulseGenerating(Direction);
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fd98 	bl	8001ae8 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <InitGoingToStartingPosition+0x150>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <InitGoingToStartingPosition+0x154>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1ad2      	subs	r2, r2, r3
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <InitGoingToStartingPosition+0x158>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dd0f      	ble.n	8001fea <InitGoingToStartingPosition+0x10e>
			StartAccleratePulling = false;
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <InitGoingToStartingPosition+0x15c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <InitGoingToStartingPosition+0x164>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001fdc:	f7ff f944 	bl	8001268 <DisableSTOP>
			StartPulseGenerating(Direction);
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <InitGoingToStartingPosition+0x160>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fd7f 	bl	8001ae8 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <InitGoingToStartingPosition+0x150>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <InitGoingToStartingPosition+0x154>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1ad2      	subs	r2, r2, r3
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <InitGoingToStartingPosition+0x158>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d112      	bne.n	8002022 <InitGoingToStartingPosition+0x146>
			StartAccleratePulling = true;
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <InitGoingToStartingPosition+0x15c>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage				
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <InitGoingToStartingPosition+0x168>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
			Direction = false;				
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <InitGoingToStartingPosition+0x160>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <InitGoingToStartingPosition+0x164>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002014:	f7ff f928 	bl	8001268 <DisableSTOP>
			StartPulseGenerating(Direction);
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <InitGoingToStartingPosition+0x160>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fd63 	bl	8001ae8 <StartPulseGenerating>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000003 	.word	0x20000003
 800202c:	200004fc 	.word	0x200004fc
 8002030:	200004b0 	.word	0x200004b0
 8002034:	200004a0 	.word	0x200004a0
 8002038:	20000443 	.word	0x20000443
 800203c:	20000439 	.word	0x20000439
 8002040:	2000044b 	.word	0x2000044b
 8002044:	2000043e 	.word	0x2000043e

08002048 <InitializeRunning>:
// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d027      	beq.n	80020a8 <InitializeRunning+0x60>
 8002058:	2b03      	cmp	r3, #3
 800205a:	dc34      	bgt.n	80020c6 <InitializeRunning+0x7e>
 800205c:	2b01      	cmp	r3, #1
 800205e:	d002      	beq.n	8002066 <InitializeRunning+0x1e>
 8002060:	2b02      	cmp	r3, #2
 8002062:	d018      	beq.n	8002096 <InitializeRunning+0x4e>
			StartPulling = true; // Pulling Stage Firse
			StartDropping = false;
			InitGoingToStartingPosition ();					
			break;
		default:
			break;
 8002064:	e02f      	b.n	80020c6 <InitializeRunning+0x7e>
			StartRunning = true;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <InitializeRunning+0x88>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
			StartDropping = true;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <InitializeRunning+0x8c>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
			StartBraking = false;
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <InitializeRunning+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <InitializeRunning+0x94>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
			StartPulling = false;		
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <InitializeRunning+0x98>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <InitializeRunning+0x9c>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <InitializeRunning+0xa0>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002090:	f7ff f8ea 	bl	8001268 <DisableSTOP>
			break;
 8002094:	e018      	b.n	80020c8 <InitializeRunning+0x80>
			StartRunning = true;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <InitializeRunning+0x88>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <InitializeRunning+0x9c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 80020a2:	f7ff ff1b 	bl	8001edc <InitGoingToStartingPosition>
			break;
 80020a6:	e00f      	b.n	80020c8 <InitializeRunning+0x80>
			StartRunning = true;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <InitializeRunning+0x88>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <InitializeRunning+0x9c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
			StartPulling = true; // Pulling Stage Firse
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <InitializeRunning+0x98>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <InitializeRunning+0x8c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();					
 80020c0:	f7ff ff0c 	bl	8001edc <InitGoingToStartingPosition>
			break;
 80020c4:	e000      	b.n	80020c8 <InitializeRunning+0x80>
			break;
 80020c6:	bf00      	nop
	}
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000438 	.word	0x20000438
 80020d4:	20000437 	.word	0x20000437
 80020d8:	2000043e 	.word	0x2000043e
 80020dc:	20000439 	.word	0x20000439
 80020e0:	2000043d 	.word	0x2000043d
 80020e4:	20000444 	.word	0x20000444
 80020e8:	2000044b 	.word	0x2000044b
 80020ec:	00000000 	.word	0x00000000

080020f0 <PullingExperiment>:

bool PullingExperiment ()
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 80020f6:	4b8c      	ldr	r3, [pc, #560]	; (8002328 <PullingExperiment+0x238>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <PullingExperiment+0x12>
	{
		return true;
 80020fe:	2301      	movs	r3, #1
 8002100:	e27c      	b.n	80025fc <PullingExperiment+0x50c>
	}
	else
	{
		if (!StartAccleratePulling) 
 8002102:	4b8a      	ldr	r3, [pc, #552]	; (800232c <PullingExperiment+0x23c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d02c      	beq.n	800216a <PullingExperiment+0x7a>
		{
			if (CheckGoingToRefPosition(true, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 8002110:	4b87      	ldr	r3, [pc, #540]	; (8002330 <PullingExperiment+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff fd98 	bl	8001c4c <CheckGoingToRefPosition>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d021      	beq.n	8002166 <PullingExperiment+0x76>
			{
				if (WaitingMiliSecond(StoppingTime)) // Wait for some seconds
 8002122:	4b84      	ldr	r3, [pc, #528]	; (8002334 <PullingExperiment+0x244>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fd0e 	bl	8001b48 <WaitingMiliSecond>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d017      	beq.n	8002162 <PullingExperiment+0x72>
				{					
					StartAccleratePulling = true; // turn on flag to start acclerating pulling
 8002132:	4b7e      	ldr	r3, [pc, #504]	; (800232c <PullingExperiment+0x23c>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
					Direction = false;
 8002138:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <PullingExperiment+0x248>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 800213e:	4b7f      	ldr	r3, [pc, #508]	; (800233c <PullingExperiment+0x24c>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
					
					PRIsToggled = true; // true = pulling up.
 8002144:	4b7e      	ldr	r3, [pc, #504]	; (8002340 <PullingExperiment+0x250>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
					DisableSTOP(); // Disable the stop
 800214a:	f7ff f88d 	bl	8001268 <DisableSTOP>
					StartPulseGenerating(Direction);
 800214e:	4b7a      	ldr	r3, [pc, #488]	; (8002338 <PullingExperiment+0x248>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fcc8 	bl	8001ae8 <StartPulseGenerating>
					PreAccRef = AccRef;
 8002158:	4b7a      	ldr	r3, [pc, #488]	; (8002344 <PullingExperiment+0x254>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a7a      	ldr	r2, [pc, #488]	; (8002348 <PullingExperiment+0x258>)
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e24b      	b.n	80025fa <PullingExperiment+0x50a>
					//RunningTime = 0;
				}
				else return false;
 8002162:	2300      	movs	r3, #0
 8002164:	e24a      	b.n	80025fc <PullingExperiment+0x50c>
			}
			else return false;
 8002166:	2300      	movs	r3, #0
 8002168:	e248      	b.n	80025fc <PullingExperiment+0x50c>
		}
		else // Start accelerate pulling
		{
			if (!StartBraking) // Accelerating Stage
 800216a:	4b74      	ldr	r3, [pc, #464]	; (800233c <PullingExperiment+0x24c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80ff 	beq.w	8002378 <PullingExperiment+0x288>
			{
				//RunningTime += SampleTime;
				
				//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal
				//LinearGeneration(&AccRef,-8,-9.6-PullingAccel); // ramping the reference signal
				AccRef = -9.6-PullingAccel;
 800217a:	4b74      	ldr	r3, [pc, #464]	; (800234c <PullingExperiment+0x25c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9e2 	bl	8000548 <__aeabi_f2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	a163      	add	r1, pc, #396	; (adr r1, 8002318 <PullingExperiment+0x228>)
 800218a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800218e:	f7fe f87b 	bl	8000288 <__aeabi_dsub>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fd25 	bl	8000be8 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a68      	ldr	r2, [pc, #416]	; (8002344 <PullingExperiment+0x254>)
 80021a2:	6013      	str	r3, [r2, #0]
				// Calculate speed cmd
				
				
				if (IsOpenLoopControl) // Use open-loop control
 80021a4:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <PullingExperiment+0x260>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d037      	beq.n	800221c <PullingExperiment+0x12c>
				{
					//SpeedCmd = LinearGeneration(RunningTime,-PullingEpsilonAcc*10,0,-PullingMaxSpeed,0);// Feedforward term
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
					LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);
 80021ac:	4b65      	ldr	r3, [pc, #404]	; (8002344 <PullingExperiment+0x254>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c9 	bl	8000548 <__aeabi_f2d>
 80021b6:	a35a      	add	r3, pc, #360	; (adr r3, 8002320 <PullingExperiment+0x230>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe f866 	bl	800028c <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <PullingExperiment+0x264>)
 80021ce:	f7fe fa13 	bl	80005f8 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	461d      	mov	r5, r3
 80021da:	4b5f      	ldr	r3, [pc, #380]	; (8002358 <PullingExperiment+0x268>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f9b2 	bl	8000548 <__aeabi_f2d>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4620      	mov	r0, r4
 80021ea:	4629      	mov	r1, r5
 80021ec:	f7fe fb2e 	bl	800084c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fcf6 	bl	8000be8 <__aeabi_d2f>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b57      	ldr	r3, [pc, #348]	; (800235c <PullingExperiment+0x26c>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	425b      	negs	r3, r3
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220c:	eef0 0a67 	vmov.f32	s1, s15
 8002210:	ee00 2a10 	vmov	s0, r2
 8002214:	4852      	ldr	r0, [pc, #328]	; (8002360 <PullingExperiment+0x270>)
 8002216:	f7ff fbeb 	bl	80019f0 <LinearGeneration>
 800221a:	e048      	b.n	80022ae <PullingExperiment+0x1be>
				}
				else // Use closed loop Control
				{					
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 800221c:	4b49      	ldr	r3, [pc, #292]	; (8002344 <PullingExperiment+0x254>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	4b50      	ldr	r3, [pc, #320]	; (8002364 <PullingExperiment+0x274>)
 8002224:	ed93 7a00 	vldr	s14, [r3]
 8002228:	2201      	movs	r2, #1
 800222a:	2105      	movs	r1, #5
 800222c:	f06f 0004 	mvn.w	r0, #4
 8002230:	eef0 0a47 	vmov.f32	s1, s14
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	f7ff f932 	bl	80014a0 <PIDCalculate>
 800223c:	eef0 7a40 	vmov.f32	s15, s0
 8002240:	4b49      	ldr	r3, [pc, #292]	; (8002368 <PullingExperiment+0x278>)
 8002242:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 8002246:	4b48      	ldr	r3, [pc, #288]	; (8002368 <PullingExperiment+0x278>)
 8002248:	ed93 7a00 	vldr	s14, [r3]
 800224c:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <PullingExperiment+0x254>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	ee17 0a90 	vmov	r0, s15
 800225a:	f7fe f975 	bl	8000548 <__aeabi_f2d>
 800225e:	a330      	add	r3, pc, #192	; (adr r3, 8002320 <PullingExperiment+0x230>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f812 	bl	800028c <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fcba 	bl	8000be8 <__aeabi_d2f>
 8002274:	4603      	mov	r3, r0
 8002276:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <PullingExperiment+0x278>)
 8002278:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <PullingExperiment+0x278>)
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002284:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002288:	4b33      	ldr	r3, [pc, #204]	; (8002358 <PullingExperiment+0x268>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002292:	4b32      	ldr	r3, [pc, #200]	; (800235c <PullingExperiment+0x26c>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	425b      	negs	r3, r3
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a0:	eef0 0a67 	vmov.f32	s1, s15
 80022a4:	eeb0 0a66 	vmov.f32	s0, s13
 80022a8:	482d      	ldr	r0, [pc, #180]	; (8002360 <PullingExperiment+0x270>)
 80022aa:	f7ff fba1 	bl	80019f0 <LinearGeneration>
				}
				
				if (SpeedCmd != 0)
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <PullingExperiment+0x270>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022bc:	d101      	bne.n	80022c2 <PullingExperiment+0x1d2>
				{

				}
				else 
				{
					StopPulseGenerating();
 80022be:	f7ff fbf5 	bl	8001aac <StopPulseGenerating>
				}
				//if (fabs(SpeedCmd) >= PullingMaxSpeed)
				if ((fabs(ObjectPosition - PullingTotalDistance) >= PullingAccelDistance) || (SpeedCmd <= -PullingMaxSpeed)) // Switch to braking mode
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <PullingExperiment+0x27c>)
 80022c4:	ed93 7a00 	vldr	s14, [r3]
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <PullingExperiment+0x280>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d2:	eeb0 7ae7 	vabs.f32	s14, s15
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <PullingExperiment+0x284>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	da0f      	bge.n	8002306 <PullingExperiment+0x216>
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <PullingExperiment+0x26c>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	425b      	negs	r3, r3
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <PullingExperiment+0x270>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	f2c0 817a 	blt.w	80025fa <PullingExperiment+0x50a>
				{
					//RunningTime = 0;
					StartBraking = true;
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <PullingExperiment+0x24c>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
					//TransitionSpeed = SpeedCmd;
					PreAccRef = AccRef;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <PullingExperiment+0x254>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <PullingExperiment+0x258>)
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e171      	b.n	80025fa <PullingExperiment+0x50a>
 8002316:	bf00      	nop
 8002318:	33333333 	.word	0x33333333
 800231c:	c0233333 	.word	0xc0233333
 8002320:	33333333 	.word	0x33333333
 8002324:	40233333 	.word	0x40233333
 8002328:	20000444 	.word	0x20000444
 800232c:	20000443 	.word	0x20000443
 8002330:	200004a0 	.word	0x200004a0
 8002334:	2000045e 	.word	0x2000045e
 8002338:	20000439 	.word	0x20000439
 800233c:	2000043e 	.word	0x2000043e
 8002340:	2000044b 	.word	0x2000044b
 8002344:	20000010 	.word	0x20000010
 8002348:	20000540 	.word	0x20000540
 800234c:	2000047c 	.word	0x2000047c
 8002350:	20000449 	.word	0x20000449
 8002354:	40240000 	.word	0x40240000
 8002358:	20000458 	.word	0x20000458
 800235c:	20000490 	.word	0x20000490
 8002360:	20000500 	.word	0x20000500
 8002364:	2000053c 	.word	0x2000053c
 8002368:	2000054c 	.word	0x2000054c
 800236c:	20000548 	.word	0x20000548
 8002370:	2000049c 	.word	0x2000049c
 8002374:	20000498 	.word	0x20000498
			else // Braking Stage
			{				
				//RunningTime += SampleTime;
				//AccRef = LinearGeneration(RunningTime,8,PreAccRef, PreAccRef, -9.6+PullingDecel); // ramping the reference signal
				//LinearGeneration(&AccRef,60,-9.6+PullingDecel); // ramping the reference signal
				AccRef = -9.6+PullingDecel;
 8002378:	4ba7      	ldr	r3, [pc, #668]	; (8002618 <PullingExperiment+0x528>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8e3 	bl	8000548 <__aeabi_f2d>
 8002382:	a3a1      	add	r3, pc, #644	; (adr r3, 8002608 <PullingExperiment+0x518>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fd ff7e 	bl	8000288 <__aeabi_dsub>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fc28 	bl	8000be8 <__aeabi_d2f>
 8002398:	4603      	mov	r3, r0
 800239a:	4aa0      	ldr	r2, [pc, #640]	; (800261c <PullingExperiment+0x52c>)
 800239c:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl)
 800239e:	4ba0      	ldr	r3, [pc, #640]	; (8002620 <PullingExperiment+0x530>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d072      	beq.n	800248c <PullingExperiment+0x39c>
				{
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 80023a6:	4b9f      	ldr	r3, [pc, #636]	; (8002624 <PullingExperiment+0x534>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8cc 	bl	8000548 <__aeabi_f2d>
 80023b0:	4604      	mov	r4, r0
 80023b2:	460d      	mov	r5, r1
 80023b4:	4b9c      	ldr	r3, [pc, #624]	; (8002628 <PullingExperiment+0x538>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f8b3 	bl	8000524 <__aeabi_i2d>
 80023be:	a394      	add	r3, pc, #592	; (adr r3, 8002610 <PullingExperiment+0x520>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe f918 	bl	80005f8 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4690      	mov	r8, r2
 80023ce:	4699      	mov	r9, r3
 80023d0:	4b92      	ldr	r3, [pc, #584]	; (800261c <PullingExperiment+0x52c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f8b7 	bl	8000548 <__aeabi_f2d>
 80023da:	a38b      	add	r3, pc, #556	; (adr r3, 8002608 <PullingExperiment+0x518>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f7fd ff54 	bl	800028c <__adddf3>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4640      	mov	r0, r8
 80023ea:	4649      	mov	r1, r9
 80023ec:	f7fe f904 	bl	80005f8 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b8b      	ldr	r3, [pc, #556]	; (800262c <PullingExperiment+0x53c>)
 80023fe:	f7fe f8fb 	bl	80005f8 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4690      	mov	r8, r2
 8002408:	4699      	mov	r9, r3
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <PullingExperiment+0x540>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f89a 	bl	8000548 <__aeabi_f2d>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4640      	mov	r0, r8
 800241a:	4649      	mov	r1, r9
 800241c:	f7fe fa16 	bl	800084c <__aeabi_ddiv>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4620      	mov	r0, r4
 8002426:	4629      	mov	r1, r5
 8002428:	f7fd ff30 	bl	800028c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fbd8 	bl	8000be8 <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <PullingExperiment+0x534>)
 800243c:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 800243e:	4b7d      	ldr	r3, [pc, #500]	; (8002634 <PullingExperiment+0x544>)
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	425b      	negs	r3, r3
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800244c:	4b75      	ldr	r3, [pc, #468]	; (8002624 <PullingExperiment+0x534>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	db09      	blt.n	8002470 <PullingExperiment+0x380>
						SpeedCmd = -PullingMaxSpeed;
 800245c:	4b75      	ldr	r3, [pc, #468]	; (8002634 <PullingExperiment+0x544>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	425b      	negs	r3, r3
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246a:	4b6e      	ldr	r3, [pc, #440]	; (8002624 <PullingExperiment+0x534>)
 800246c:	edc3 7a00 	vstr	s15, [r3]
					if (SpeedCmd >= 0)
 8002470:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <PullingExperiment+0x534>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	f2c0 8094 	blt.w	80025aa <PullingExperiment+0x4ba>
						SpeedCmd = 0;
 8002482:	4b68      	ldr	r3, [pc, #416]	; (8002624 <PullingExperiment+0x534>)
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e08e      	b.n	80025aa <PullingExperiment+0x4ba>
				}
				else
				{
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 800248c:	4b63      	ldr	r3, [pc, #396]	; (800261c <PullingExperiment+0x52c>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	4b69      	ldr	r3, [pc, #420]	; (8002638 <PullingExperiment+0x548>)
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	2201      	movs	r2, #1
 800249a:	2105      	movs	r1, #5
 800249c:	f06f 0004 	mvn.w	r0, #4
 80024a0:	eef0 0a47 	vmov.f32	s1, s14
 80024a4:	eeb0 0a67 	vmov.f32	s0, s15
 80024a8:	f7fe fffa 	bl	80014a0 <PIDCalculate>
 80024ac:	eef0 7a40 	vmov.f32	s15, s0
 80024b0:	4b62      	ldr	r3, [pc, #392]	; (800263c <PullingExperiment+0x54c>)
 80024b2:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 80024b6:	4b61      	ldr	r3, [pc, #388]	; (800263c <PullingExperiment+0x54c>)
 80024b8:	ed93 7a00 	vldr	s14, [r3]
 80024bc:	4b57      	ldr	r3, [pc, #348]	; (800261c <PullingExperiment+0x52c>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c6:	ee17 0a90 	vmov	r0, s15
 80024ca:	f7fe f83d 	bl	8000548 <__aeabi_f2d>
 80024ce:	a34e      	add	r3, pc, #312	; (adr r3, 8002608 <PullingExperiment+0x518>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fd feda 	bl	800028c <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fb82 	bl	8000be8 <__aeabi_d2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a55      	ldr	r2, [pc, #340]	; (800263c <PullingExperiment+0x54c>)
 80024e8:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);// Feedforward term
					SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 80024ea:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <PullingExperiment+0x534>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f82a 	bl	8000548 <__aeabi_f2d>
 80024f4:	4604      	mov	r4, r0
 80024f6:	460d      	mov	r5, r1
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <PullingExperiment+0x538>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f811 	bl	8000524 <__aeabi_i2d>
 8002502:	a343      	add	r3, pc, #268	; (adr r3, 8002610 <PullingExperiment+0x520>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f876 	bl	80005f8 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4690      	mov	r8, r2
 8002512:	4699      	mov	r9, r3
 8002514:	4b49      	ldr	r3, [pc, #292]	; (800263c <PullingExperiment+0x54c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f815 	bl	8000548 <__aeabi_f2d>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4640      	mov	r0, r8
 8002524:	4649      	mov	r1, r9
 8002526:	f7fe f867 	bl	80005f8 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <PullingExperiment+0x53c>)
 8002538:	f7fe f85e 	bl	80005f8 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4690      	mov	r8, r2
 8002542:	4699      	mov	r9, r3
 8002544:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <PullingExperiment+0x540>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fffd 	bl	8000548 <__aeabi_f2d>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4640      	mov	r0, r8
 8002554:	4649      	mov	r1, r9
 8002556:	f7fe f979 	bl	800084c <__aeabi_ddiv>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4620      	mov	r0, r4
 8002560:	4629      	mov	r1, r5
 8002562:	f7fd fe93 	bl	800028c <__adddf3>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe fb3b 	bl	8000be8 <__aeabi_d2f>
 8002572:	4603      	mov	r3, r0
 8002574:	4a2b      	ldr	r2, [pc, #172]	; (8002624 <PullingExperiment+0x534>)
 8002576:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -810)
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <PullingExperiment+0x534>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002640 <PullingExperiment+0x550>
 8002582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	d802      	bhi.n	8002592 <PullingExperiment+0x4a2>
						SpeedCmd = -810;
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <PullingExperiment+0x534>)
 800258e:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <PullingExperiment+0x554>)
 8002590:	601a      	str	r2, [r3, #0]
					if (SpeedCmd >= 0)
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <PullingExperiment+0x534>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	db03      	blt.n	80025aa <PullingExperiment+0x4ba>
						SpeedCmd = 0;
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <PullingExperiment+0x534>)
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
				}
				
				if (SpeedCmd != 0)
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <PullingExperiment+0x534>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d101      	bne.n	80025be <PullingExperiment+0x4ce>
				{

				}
				else 
				{
					StopPulseGenerating();
 80025ba:	f7ff fa77 	bl	8001aac <StopPulseGenerating>
				}	
				if (SpeedCmd >= 0) // Stop braking
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <PullingExperiment+0x534>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025cc:	db15      	blt.n	80025fa <PullingExperiment+0x50a>
				{
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <PullingExperiment+0x534>)
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
					
					ResetPIDController();
 80025d6:	f7ff f81b 	bl	8001610 <ResetPIDController>
					AccRef = - 9.8;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <PullingExperiment+0x52c>)
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <PullingExperiment+0x558>)
 80025de:	601a      	str	r2, [r3, #0]
					
					StartBraking = false;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <PullingExperiment+0x55c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
					StartAccleratePulling = false;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <PullingExperiment+0x560>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
					StopPulseGenerating();
 80025ec:	f7ff fa5e 	bl	8001aac <StopPulseGenerating>
					CompleteRunning = true; // Set this flag to return true in the next time
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <PullingExperiment+0x564>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
					return true;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <PullingExperiment+0x50c>
				}
			}	
		}
		return false;		
 80025fa:	2300      	movs	r3, #0
	}	
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002602:	bf00      	nop
 8002604:	f3af 8000 	nop.w
 8002608:	33333333 	.word	0x33333333
 800260c:	40233333 	.word	0x40233333
 8002610:	d2f1a9fc 	.word	0xd2f1a9fc
 8002614:	3f50624d 	.word	0x3f50624d
 8002618:	20000480 	.word	0x20000480
 800261c:	20000010 	.word	0x20000010
 8002620:	20000449 	.word	0x20000449
 8002624:	20000500 	.word	0x20000500
 8002628:	2000045c 	.word	0x2000045c
 800262c:	40240000 	.word	0x40240000
 8002630:	20000458 	.word	0x20000458
 8002634:	20000490 	.word	0x20000490
 8002638:	2000053c 	.word	0x2000053c
 800263c:	2000054c 	.word	0x2000054c
 8002640:	c44a8000 	.word	0xc44a8000
 8002644:	c44a8000 	.word	0xc44a8000
 8002648:	c11ccccd 	.word	0xc11ccccd
 800264c:	2000043e 	.word	0x2000043e
 8002650:	20000443 	.word	0x20000443
 8002654:	20000444 	.word	0x20000444

08002658 <PullAndDrop>:

bool PullAndDrop ()
{
 8002658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265c:	ed2d 8b02 	vpush	{d8}
 8002660:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 8002662:	4ba7      	ldr	r3, [pc, #668]	; (8002900 <PullAndDrop+0x2a8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <PullAndDrop+0x18>
	{
		return true;
 800266a:	2301      	movs	r3, #1
 800266c:	f000 bc95 	b.w	8002f9a <PullAndDrop+0x942>
	}
	else
	{
		// BEGIN PULLING UP
		if (StartPulling && !StartDropping) // Pulling Task
 8002670:	4ba4      	ldr	r3, [pc, #656]	; (8002904 <PullAndDrop+0x2ac>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8279 	beq.w	8002b6c <PullAndDrop+0x514>
 800267a:	4ba3      	ldr	r3, [pc, #652]	; (8002908 <PullAndDrop+0x2b0>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f083 0301 	eor.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8271 	beq.w	8002b6c <PullAndDrop+0x514>
		{
			// First Pulling up including going to the initial position
			if (!StartAccleratePulling) 
 800268a:	4ba0      	ldr	r3, [pc, #640]	; (800290c <PullAndDrop+0x2b4>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	f083 0301 	eor.w	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d030      	beq.n	80026fa <PullAndDrop+0xa2>
			{
				// Going to the initial position first
				// Direction = true => going down
				// Direction = false => Going up
				if (CheckGoingToRefPosition(Direction, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 8002698:	4b9d      	ldr	r3, [pc, #628]	; (8002910 <PullAndDrop+0x2b8>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4a9d      	ldr	r2, [pc, #628]	; (8002914 <PullAndDrop+0x2bc>)
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fad2 	bl	8001c4c <CheckGoingToRefPosition>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d022      	beq.n	80026f4 <PullAndDrop+0x9c>
				{
					//BottomPosition = ObjectPosition;
					if (WaitingMiliSecond(StoppingTime)) // Wait for some seconds
 80026ae:	4b9a      	ldr	r3, [pc, #616]	; (8002918 <PullAndDrop+0x2c0>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fa48 	bl	8001b48 <WaitingMiliSecond>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d017      	beq.n	80026ee <PullAndDrop+0x96>
					{
						StartAccleratePulling = true; // turn on flag to start acclerating pulling
 80026be:	4b93      	ldr	r3, [pc, #588]	; (800290c <PullAndDrop+0x2b4>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up to count the position pulse cmd
 80026c4:	4b92      	ldr	r3, [pc, #584]	; (8002910 <PullAndDrop+0x2b8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 80026ca:	4b94      	ldr	r3, [pc, #592]	; (800291c <PullAndDrop+0x2c4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]

						PreAccRef = AccRef;
 80026d0:	4b93      	ldr	r3, [pc, #588]	; (8002920 <PullAndDrop+0x2c8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a93      	ldr	r2, [pc, #588]	; (8002924 <PullAndDrop+0x2cc>)
 80026d6:	6013      	str	r3, [r2, #0]

						PRIsToggled = true; // true = pulling up.
 80026d8:	4b93      	ldr	r3, [pc, #588]	; (8002928 <PullAndDrop+0x2d0>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Disable the stop
 80026de:	f7fe fdc3 	bl	8001268 <DisableSTOP>
						StartPulseGenerating(Direction);
 80026e2:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <PullAndDrop+0x2b8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f9fe 	bl	8001ae8 <StartPulseGenerating>
 80026ec:	e23e      	b.n	8002b6c <PullAndDrop+0x514>
					}
					else return false;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f000 bc53 	b.w	8002f9a <PullAndDrop+0x942>
				}
				else return false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f000 bc50 	b.w	8002f9a <PullAndDrop+0x942>
			}
			else // Start accelerated pulling
			{
				if (!StartBraking) // Accelerating Stage
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <PullAndDrop+0x2c4>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d067      	beq.n	80027d8 <PullAndDrop+0x180>
				{
					
					// Calculate speed cmd
					//RunningTime += SampleTime;
					if ( ((PullingBotomPulseCmdPosition - MotorEncPulse + OriginPulse)) >= FlyingPosPulseCmd) // unit: pulses)
 8002708:	4b82      	ldr	r3, [pc, #520]	; (8002914 <PullAndDrop+0x2bc>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b87      	ldr	r3, [pc, #540]	; (800292c <PullAndDrop+0x2d4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	4b87      	ldr	r3, [pc, #540]	; (8002930 <PullAndDrop+0x2d8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	441a      	add	r2, r3
 8002718:	4b86      	ldr	r3, [pc, #536]	; (8002934 <PullAndDrop+0x2dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	db02      	blt.n	8002726 <PullAndDrop+0xce>
					{
						StartBraking = true;
 8002720:	4b7e      	ldr	r3, [pc, #504]	; (800291c <PullAndDrop+0x2c4>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6-PullingAccel;
 8002726:	4b84      	ldr	r3, [pc, #528]	; (8002938 <PullAndDrop+0x2e0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff0c 	bl	8000548 <__aeabi_f2d>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	a16c      	add	r1, pc, #432	; (adr r1, 80028e8 <PullAndDrop+0x290>)
 8002736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800273a:	f7fd fda5 	bl	8000288 <__aeabi_dsub>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fa4f 	bl	8000be8 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	4a74      	ldr	r2, [pc, #464]	; (8002920 <PullAndDrop+0x2c8>)
 800274e:	6013      	str	r3, [r2, #0]
						
					//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal

					//LinearGeneration(&AccRef,-16,-9.6-PullingAccel); // ramping the reference signal
					
					LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);
 8002750:	4b73      	ldr	r3, [pc, #460]	; (8002920 <PullAndDrop+0x2c8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fef7 	bl	8000548 <__aeabi_f2d>
 800275a:	a365      	add	r3, pc, #404	; (adr r3, 80028f0 <PullAndDrop+0x298>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd fd94 	bl	800028c <__adddf3>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4b72      	ldr	r3, [pc, #456]	; (800293c <PullAndDrop+0x2e4>)
 8002772:	f7fd ff41 	bl	80005f8 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4690      	mov	r8, r2
 800277c:	4699      	mov	r9, r3
 800277e:	4b70      	ldr	r3, [pc, #448]	; (8002940 <PullAndDrop+0x2e8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fee0 	bl	8000548 <__aeabi_f2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4640      	mov	r0, r8
 800278e:	4649      	mov	r1, r9
 8002790:	f7fe f85c 	bl	800084c <__aeabi_ddiv>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe fa24 	bl	8000be8 <__aeabi_d2f>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b68      	ldr	r3, [pc, #416]	; (8002944 <PullAndDrop+0x2ec>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	425b      	negs	r3, r3
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b0:	eef0 0a67 	vmov.f32	s1, s15
 80027b4:	ee00 2a10 	vmov	s0, r2
 80027b8:	4863      	ldr	r0, [pc, #396]	; (8002948 <PullAndDrop+0x2f0>)
 80027ba:	f7ff f919 	bl	80019f0 <LinearGeneration>
//						AccSet = AccSet + AccRef + 9.6;
//						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
//						LinearGeneration(&SpeedCmd, AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
//					}

					if (SpeedCmd != 0)
 80027be:	4b62      	ldr	r3, [pc, #392]	; (8002948 <PullAndDrop+0x2f0>)
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	f040 81ce 	bne.w	8002b6c <PullAndDrop+0x514>

					}
					else 
					{
						//StopPulseGenerating();
						PulseGenerationFlag = false; // Stop pulse generation
 80027d0:	4b5e      	ldr	r3, [pc, #376]	; (800294c <PullAndDrop+0x2f4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e1c9      	b.n	8002b6c <PullAndDrop+0x514>
				{				

					//AccRef =  = -9.8+PullingDecel;
					//AccRef = -9.6+PullingDecel;

					LinearGeneration(&AccRef,FlyAccSlope,-9.6+PullingDecel);
 80027d8:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <PullAndDrop+0x2f8>)
 80027da:	ed93 8a00 	vldr	s16, [r3]
 80027de:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <PullAndDrop+0x2fc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd feb0 	bl	8000548 <__aeabi_f2d>
 80027e8:	a341      	add	r3, pc, #260	; (adr r3, 80028f0 <PullAndDrop+0x298>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fd fd4b 	bl	8000288 <__aeabi_dsub>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7fe f9f5 	bl	8000be8 <__aeabi_d2f>
 80027fe:	4603      	mov	r3, r0
 8002800:	ee00 3a90 	vmov	s1, r3
 8002804:	eeb0 0a48 	vmov.f32	s0, s16
 8002808:	4845      	ldr	r0, [pc, #276]	; (8002920 <PullAndDrop+0x2c8>)
 800280a:	f7ff f8f1 	bl	80019f0 <LinearGeneration>

					if (IsOpenLoopControl) // Use open-loop control
 800280e:	4b52      	ldr	r3, [pc, #328]	; (8002958 <PullAndDrop+0x300>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80a8 	beq.w	8002968 <PullAndDrop+0x310>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,PullingEpsilonDec,TransitionSpeed,-PullingMaxSpeed,0); // Feedforward term
						//LinearGeneration(&SpeedCmd,(AccRef + 9.6)*10/DrumRadius,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <PullAndDrop+0x2f0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fe93 	bl	8000548 <__aeabi_f2d>
 8002822:	4680      	mov	r8, r0
 8002824:	4689      	mov	r9, r1
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <PullAndDrop+0x304>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fe7a 	bl	8000524 <__aeabi_i2d>
 8002830:	a331      	add	r3, pc, #196	; (adr r3, 80028f8 <PullAndDrop+0x2a0>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd fedf 	bl	80005f8 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4692      	mov	sl, r2
 8002840:	469b      	mov	fp, r3
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <PullAndDrop+0x2c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe7e 	bl	8000548 <__aeabi_f2d>
 800284c:	a328      	add	r3, pc, #160	; (adr r3, 80028f0 <PullAndDrop+0x298>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f7fd fd1b 	bl	800028c <__adddf3>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4650      	mov	r0, sl
 800285c:	4659      	mov	r1, fp
 800285e:	f7fd fecb 	bl	80005f8 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <PullAndDrop+0x2e4>)
 8002870:	f7fd fec2 	bl	80005f8 <__aeabi_dmul>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4692      	mov	sl, r2
 800287a:	469b      	mov	fp, r3
 800287c:	4b30      	ldr	r3, [pc, #192]	; (8002940 <PullAndDrop+0x2e8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe61 	bl	8000548 <__aeabi_f2d>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4650      	mov	r0, sl
 800288c:	4659      	mov	r1, fp
 800288e:	f7fd ffdd 	bl	800084c <__aeabi_ddiv>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4640      	mov	r0, r8
 8002898:	4649      	mov	r1, r9
 800289a:	f7fd fcf7 	bl	800028c <__adddf3>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f7fe f99f 	bl	8000be8 <__aeabi_d2f>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a26      	ldr	r2, [pc, #152]	; (8002948 <PullAndDrop+0x2f0>)
 80028ae:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <PullAndDrop+0x2f0>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002960 <PullAndDrop+0x308>
 80028ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	d802      	bhi.n	80028ca <PullAndDrop+0x272>
							SpeedCmd = -810;
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <PullAndDrop+0x2f0>)
 80028c6:	4a27      	ldr	r2, [pc, #156]	; (8002964 <PullAndDrop+0x30c>)
 80028c8:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <PullAndDrop+0x2f0>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	f2c0 80c8 	blt.w	8002a6c <PullAndDrop+0x414>
							SpeedCmd = 0;
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <PullAndDrop+0x2f0>)
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e0c2      	b.n	8002a6c <PullAndDrop+0x414>
 80028e6:	bf00      	nop
 80028e8:	33333333 	.word	0x33333333
 80028ec:	c0233333 	.word	0xc0233333
 80028f0:	33333333 	.word	0x33333333
 80028f4:	40233333 	.word	0x40233333
 80028f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028fc:	3f50624d 	.word	0x3f50624d
 8002900:	20000444 	.word	0x20000444
 8002904:	2000043d 	.word	0x2000043d
 8002908:	20000437 	.word	0x20000437
 800290c:	20000443 	.word	0x20000443
 8002910:	20000439 	.word	0x20000439
 8002914:	200004a0 	.word	0x200004a0
 8002918:	2000045e 	.word	0x2000045e
 800291c:	2000043e 	.word	0x2000043e
 8002920:	20000010 	.word	0x20000010
 8002924:	20000540 	.word	0x20000540
 8002928:	2000044b 	.word	0x2000044b
 800292c:	200004fc 	.word	0x200004fc
 8002930:	200004b0 	.word	0x200004b0
 8002934:	200004a8 	.word	0x200004a8
 8002938:	2000047c 	.word	0x2000047c
 800293c:	40240000 	.word	0x40240000
 8002940:	20000458 	.word	0x20000458
 8002944:	20000490 	.word	0x20000490
 8002948:	20000500 	.word	0x20000500
 800294c:	2000043f 	.word	0x2000043f
 8002950:	20000534 	.word	0x20000534
 8002954:	20000480 	.word	0x20000480
 8002958:	20000449 	.word	0x20000449
 800295c:	2000045c 	.word	0x2000045c
 8002960:	c44a8000 	.word	0xc44a8000
 8002964:	c44a8000 	.word	0xc44a8000
					}
					else // Use closed loop Control
					{
						AccSet = PIDCalculate(AccRef,AccZ,-10,10, true); // PID term
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <PullAndDrop+0x498>)
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	4b61      	ldr	r3, [pc, #388]	; (8002af4 <PullAndDrop+0x49c>)
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	2201      	movs	r2, #1
 8002976:	210a      	movs	r1, #10
 8002978:	f06f 0009 	mvn.w	r0, #9
 800297c:	eef0 0a47 	vmov.f32	s1, s14
 8002980:	eeb0 0a67 	vmov.f32	s0, s15
 8002984:	f7fe fd8c 	bl	80014a0 <PIDCalculate>
 8002988:	eef0 7a40 	vmov.f32	s15, s0
 800298c:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <PullAndDrop+0x4a0>)
 800298e:	edc3 7a00 	vstr	s15, [r3]
						AccSet = AccSet + AccRef + 9.6;
 8002992:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <PullAndDrop+0x4a0>)
 8002994:	ed93 7a00 	vldr	s14, [r3]
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <PullAndDrop+0x498>)
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	ee17 0a90 	vmov	r0, s15
 80029a6:	f7fd fdcf 	bl	8000548 <__aeabi_f2d>
 80029aa:	a34b      	add	r3, pc, #300	; (adr r3, 8002ad8 <PullAndDrop+0x480>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	f7fd fc6c 	bl	800028c <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f914 	bl	8000be8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <PullAndDrop+0x4a0>)
 80029c4:	6013      	str	r3, [r2, #0]
						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,TransitionSpeed,TransitionSpeed,DroppingMaxSpeed); // Feedforward term
						//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,TransitionSpeed,-PullingMaxSpeed,0);// Feedforward term
						//LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,TransitionSpeed,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 80029c6:	4b4d      	ldr	r3, [pc, #308]	; (8002afc <PullAndDrop+0x4a4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fdbc 	bl	8000548 <__aeabi_f2d>
 80029d0:	4680      	mov	r8, r0
 80029d2:	4689      	mov	r9, r1
 80029d4:	4b4a      	ldr	r3, [pc, #296]	; (8002b00 <PullAndDrop+0x4a8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fda3 	bl	8000524 <__aeabi_i2d>
 80029de:	a340      	add	r3, pc, #256	; (adr r3, 8002ae0 <PullAndDrop+0x488>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe08 	bl	80005f8 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4692      	mov	sl, r2
 80029ee:	469b      	mov	fp, r3
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <PullAndDrop+0x4a0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fda7 	bl	8000548 <__aeabi_f2d>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4650      	mov	r0, sl
 8002a00:	4659      	mov	r1, fp
 8002a02:	f7fd fdf9 	bl	80005f8 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <PullAndDrop+0x4ac>)
 8002a14:	f7fd fdf0 	bl	80005f8 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4692      	mov	sl, r2
 8002a1e:	469b      	mov	fp, r3
 8002a20:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <PullAndDrop+0x4b0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fd8f 	bl	8000548 <__aeabi_f2d>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4650      	mov	r0, sl
 8002a30:	4659      	mov	r1, fp
 8002a32:	f7fd ff0b 	bl	800084c <__aeabi_ddiv>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4640      	mov	r0, r8
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	f7fd fc25 	bl	800028c <__adddf3>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe f8cd 	bl	8000be8 <__aeabi_d2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <PullAndDrop+0x4a4>)
 8002a52:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= 0)
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <PullAndDrop+0x4a4>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	db03      	blt.n	8002a6c <PullAndDrop+0x414>
							SpeedCmd = 0;
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <PullAndDrop+0x4a4>)
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
					}

					if (SpeedCmd != 0)
 8002a6c:	4b23      	ldr	r3, [pc, #140]	; (8002afc <PullAndDrop+0x4a4>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	d102      	bne.n	8002a82 <PullAndDrop+0x42a>
					{

					}
					else
					{
						PulseGenerationFlag = false;
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <PullAndDrop+0x4b4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
					}
					if ((ObjectPosition <= 0.2) || (SpeedCmd >= 0)) // condition to switch to dropping stage
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <PullAndDrop+0x4b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd5e 	bl	8000548 <__aeabi_f2d>
 8002a8c:	a316      	add	r3, pc, #88	; (adr r3, 8002ae8 <PullAndDrop+0x490>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	f7fe f82d 	bl	8000af0 <__aeabi_dcmple>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <PullAndDrop+0x454>
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <PullAndDrop+0x4a4>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aaa:	db5f      	blt.n	8002b6c <PullAndDrop+0x514>
					{
						SpeedCmd = 0; //
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <PullAndDrop+0x4a4>)
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
						TopPulseCmd = MotorEncPulse - OriginPulse;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <PullAndDrop+0x4bc>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <PullAndDrop+0x4c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <PullAndDrop+0x4c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

						if (IsOpenLoopControl)
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <PullAndDrop+0x4c8>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02e      	beq.n	8002b28 <PullAndDrop+0x4d0>
						{
							StartWaiting = true; // Switch to waiting stage
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <PullAndDrop+0x4cc>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
 8002ad0:	e04c      	b.n	8002b6c <PullAndDrop+0x514>
 8002ad2:	bf00      	nop
 8002ad4:	f3af 8000 	nop.w
 8002ad8:	33333333 	.word	0x33333333
 8002adc:	40233333 	.word	0x40233333
 8002ae0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ae4:	3f50624d 	.word	0x3f50624d
 8002ae8:	9999999a 	.word	0x9999999a
 8002aec:	3fc99999 	.word	0x3fc99999
 8002af0:	20000010 	.word	0x20000010
 8002af4:	2000053c 	.word	0x2000053c
 8002af8:	2000054c 	.word	0x2000054c
 8002afc:	20000500 	.word	0x20000500
 8002b00:	2000045c 	.word	0x2000045c
 8002b04:	40240000 	.word	0x40240000
 8002b08:	20000458 	.word	0x20000458
 8002b0c:	2000043f 	.word	0x2000043f
 8002b10:	20000548 	.word	0x20000548
 8002b14:	200004fc 	.word	0x200004fc
 8002b18:	200004b0 	.word	0x200004b0
 8002b1c:	200004a4 	.word	0x200004a4
 8002b20:	20000449 	.word	0x20000449
 8002b24:	20000442 	.word	0x20000442
						}
						else // closed-loop control
						{
							PreAccRef = AccRef;
 8002b28:	4bad      	ldr	r3, [pc, #692]	; (8002de0 <PullAndDrop+0x788>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4aad      	ldr	r2, [pc, #692]	; (8002de4 <PullAndDrop+0x78c>)
 8002b2e:	6013      	str	r3, [r2, #0]
							StartDropping = true;
 8002b30:	4bad      	ldr	r3, [pc, #692]	; (8002de8 <PullAndDrop+0x790>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
							StartBraking = false;
 8002b36:	4bad      	ldr	r3, [pc, #692]	; (8002dec <PullAndDrop+0x794>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
							Direction = true; // false = move up, true = move down
 8002b3c:	4bac      	ldr	r3, [pc, #688]	; (8002df0 <PullAndDrop+0x798>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
							StartPulling = false;
 8002b42:	4bac      	ldr	r3, [pc, #688]	; (8002df4 <PullAndDrop+0x79c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]

							// Reverse pulse generation direction to switch to dropping
							HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); // Set CW direction
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4e:	48aa      	ldr	r0, [pc, #680]	; (8002df8 <PullAndDrop+0x7a0>)
 8002b50:	f004 f97a 	bl	8006e48 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b5a:	48a8      	ldr	r0, [pc, #672]	; (8002dfc <PullAndDrop+0x7a4>)
 8002b5c:	f004 f974 	bl	8006e48 <HAL_GPIO_WritePin>
							PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002b60:	4ba7      	ldr	r3, [pc, #668]	; (8002e00 <PullAndDrop+0x7a8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
							PulseGenerationFlag = true;
 8002b66:	4ba7      	ldr	r3, [pc, #668]	; (8002e04 <PullAndDrop+0x7ac>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
		}
		// END Pulling Task

//		// BEGIN WAITING TASK
//		// Wait for some time before dropping
		if (StartWaiting)
 8002b6c:	4ba6      	ldr	r3, [pc, #664]	; (8002e08 <PullAndDrop+0x7b0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d011      	beq.n	8002b98 <PullAndDrop+0x540>
		{
			if (WaitingMiliSecond(WaitingTime))
 8002b74:	4ba5      	ldr	r3, [pc, #660]	; (8002e0c <PullAndDrop+0x7b4>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe ffe5 	bl	8001b48 <WaitingMiliSecond>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <PullAndDrop+0x540>
			{
				StartWaiting = false;
 8002b84:	4ba0      	ldr	r3, [pc, #640]	; (8002e08 <PullAndDrop+0x7b0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
				PreAccRef = AccRef;
 8002b8a:	4b95      	ldr	r3, [pc, #596]	; (8002de0 <PullAndDrop+0x788>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a95      	ldr	r2, [pc, #596]	; (8002de4 <PullAndDrop+0x78c>)
 8002b90:	6013      	str	r3, [r2, #0]
				InitializeRunning(DroppingMode);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7ff fa58 	bl	8002048 <InitializeRunning>
		}

		// END WAITING
		
		// BEGIN DROPPING TASK
		if (StartDropping && !StartPulling)
 8002b98:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <PullAndDrop+0x790>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 81fb 	beq.w	8002f98 <PullAndDrop+0x940>
 8002ba2:	4b94      	ldr	r3, [pc, #592]	; (8002df4 <PullAndDrop+0x79c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	f083 0301 	eor.w	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 81f3 	beq.w	8002f98 <PullAndDrop+0x940>
		{
				// ACCLERATING DROPPING STAGE
				if (!StartBraking) // Accelerating Stage
 8002bb2:	4b8e      	ldr	r3, [pc, #568]	; (8002dec <PullAndDrop+0x794>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f083 0301 	eor.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8149 	beq.w	8002e54 <PullAndDrop+0x7fc>
				{
					if ((SpeedCmd >= DroppingMaxSpeed) || ( (fabs(MotorEncPulse - OriginPulse - TopPulseCmd)) >= BottomFreeDropPulseCmd))
 8002bc2:	4b93      	ldr	r3, [pc, #588]	; (8002e10 <PullAndDrop+0x7b8>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bce:	4b91      	ldr	r3, [pc, #580]	; (8002e14 <PullAndDrop+0x7bc>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d91d      	bls.n	8002c1a <PullAndDrop+0x5c2>
 8002bde:	4b8e      	ldr	r3, [pc, #568]	; (8002e18 <PullAndDrop+0x7c0>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <PullAndDrop+0x7c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1ad2      	subs	r2, r2, r3
 8002be8:	4b8d      	ldr	r3, [pc, #564]	; (8002e20 <PullAndDrop+0x7c8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fc98 	bl	8000524 <__aeabi_i2d>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <PullAndDrop+0x7cc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fc8e 	bl	8000524 <__aeabi_i2d>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7fd ff78 	bl	8000b04 <__aeabi_dcmpge>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <PullAndDrop+0x5d8>
					//if(ObjectPosition >= DroppingAccelDistance)
					{
						//RunningTime = 0;
						StartBraking = true;
 8002c1a:	4b74      	ldr	r3, [pc, #464]	; (8002dec <PullAndDrop+0x794>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
						//TransitionSpeed = SpeedCmd;
						// Reset PID Controller
						IntergraError = 0;
 8002c20:	4b81      	ldr	r3, [pc, #516]	; (8002e28 <PullAndDrop+0x7d0>)
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
						PreError = 0;
 8002c28:	4b80      	ldr	r3, [pc, #512]	; (8002e2c <PullAndDrop+0x7d4>)
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

						//PreAccRef = AccRef;
						//ResetPIDController();
					}
					// Calculate speed cmd
					AccRef = -9.6+DroppingAccel;
 8002c30:	4b7f      	ldr	r3, [pc, #508]	; (8002e30 <PullAndDrop+0x7d8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc87 	bl	8000548 <__aeabi_f2d>
 8002c3a:	a365      	add	r3, pc, #404	; (adr r3, 8002dd0 <PullAndDrop+0x778>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f7fd fb22 	bl	8000288 <__aeabi_dsub>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd ffcc 	bl	8000be8 <__aeabi_d2f>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4a63      	ldr	r2, [pc, #396]	; (8002de0 <PullAndDrop+0x788>)
 8002c54:	6013      	str	r3, [r2, #0]
//					else
//					{
//						AccRef = LinearGeneration(RunningTime,16,PreAccRef, PreAccRef,-9.6+DroppingAccel);
//					}

					if (IsOpenLoopControl) // Use open-loop control
 8002c56:	4b77      	ldr	r3, [pc, #476]	; (8002e34 <PullAndDrop+0x7dc>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d036      	beq.n	8002ccc <PullAndDrop+0x674>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
						LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,DroppingMaxSpeed);// Feedforward term
 8002c5e:	4b60      	ldr	r3, [pc, #384]	; (8002de0 <PullAndDrop+0x788>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc70 	bl	8000548 <__aeabi_f2d>
 8002c68:	a359      	add	r3, pc, #356	; (adr r3, 8002dd0 <PullAndDrop+0x778>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fb0d 	bl	800028c <__adddf3>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	4b6e      	ldr	r3, [pc, #440]	; (8002e38 <PullAndDrop+0x7e0>)
 8002c80:	f7fd fcba 	bl	80005f8 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4614      	mov	r4, r2
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	4b6b      	ldr	r3, [pc, #428]	; (8002e3c <PullAndDrop+0x7e4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fc59 	bl	8000548 <__aeabi_f2d>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd fdd5 	bl	800084c <__aeabi_ddiv>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff9d 	bl	8000be8 <__aeabi_d2f>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b57      	ldr	r3, [pc, #348]	; (8002e10 <PullAndDrop+0x7b8>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbc:	eef0 0a67 	vmov.f32	s1, s15
 8002cc0:	ee00 2a10 	vmov	s0, r2
 8002cc4:	4853      	ldr	r0, [pc, #332]	; (8002e14 <PullAndDrop+0x7bc>)
 8002cc6:	f7fe fe93 	bl	80019f0 <LinearGeneration>
 8002cca:	e073      	b.n	8002db4 <PullAndDrop+0x75c>
					
						//SpeedCmd = PIDSpeedCmd; // PID controller only
						//SpeedCmd = FeedFWSpeedCmd;
						//SpeedCmd = FeedFWSpeedCmd + PIDSpeedCmd; // Feedforward controller
						
						AccSet = PIDCalculate(AccRef,AccZ,-8,8, true); // PID term
 8002ccc:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <PullAndDrop+0x788>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <PullAndDrop+0x7e8>)
 8002cd4:	ed93 7a00 	vldr	s14, [r3]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2108      	movs	r1, #8
 8002cdc:	f06f 0007 	mvn.w	r0, #7
 8002ce0:	eef0 0a47 	vmov.f32	s1, s14
 8002ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce8:	f7fe fbda 	bl	80014a0 <PIDCalculate>
 8002cec:	eef0 7a40 	vmov.f32	s15, s0
 8002cf0:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <PullAndDrop+0x7ec>)
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
						AccSet = AccSet + DroppingAccel;
 8002cf6:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <PullAndDrop+0x7ec>)
 8002cf8:	ed93 7a00 	vldr	s14, [r3]
 8002cfc:	4b4c      	ldr	r3, [pc, #304]	; (8002e30 <PullAndDrop+0x7d8>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d06:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <PullAndDrop+0x7ec>)
 8002d08:	edc3 7a00 	vstr	s15, [r3]
						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
						//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
						//LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term

						SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 8002d0c:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <PullAndDrop+0x7bc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc19 	bl	8000548 <__aeabi_f2d>
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <PullAndDrop+0x7f0>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc00 	bl	8000524 <__aeabi_i2d>
 8002d24:	a32c      	add	r3, pc, #176	; (adr r3, 8002dd8 <PullAndDrop+0x780>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fc65 	bl	80005f8 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4690      	mov	r8, r2
 8002d34:	4699      	mov	r9, r3
 8002d36:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <PullAndDrop+0x7ec>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fc04 	bl	8000548 <__aeabi_f2d>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4640      	mov	r0, r8
 8002d46:	4649      	mov	r1, r9
 8002d48:	f7fd fc56 	bl	80005f8 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <PullAndDrop+0x7e0>)
 8002d5a:	f7fd fc4d 	bl	80005f8 <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4690      	mov	r8, r2
 8002d64:	4699      	mov	r9, r3
 8002d66:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <PullAndDrop+0x7e4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbec 	bl	8000548 <__aeabi_f2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4640      	mov	r0, r8
 8002d76:	4649      	mov	r1, r9
 8002d78:	f7fd fd68 	bl	800084c <__aeabi_ddiv>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd fa82 	bl	800028c <__adddf3>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd ff2a 	bl	8000be8 <__aeabi_d2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <PullAndDrop+0x7bc>)
 8002d98:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= 810) // Saturation
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <PullAndDrop+0x7bc>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002e4c <PullAndDrop+0x7f4>
 8002da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	db02      	blt.n	8002db4 <PullAndDrop+0x75c>
							SpeedCmd = 810;
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <PullAndDrop+0x7bc>)
 8002db0:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <PullAndDrop+0x7f8>)
 8002db2:	601a      	str	r2, [r3, #0]
					}							
					
					if (SpeedCmd != 0)
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <PullAndDrop+0x7bc>)
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	f040 80e9 	bne.w	8002f98 <PullAndDrop+0x940>
					{

					}
					else 
					{
						StopPulseGenerating();
 8002dc6:	f7fe fe71 	bl	8001aac <StopPulseGenerating>
 8002dca:	e0e5      	b.n	8002f98 <PullAndDrop+0x940>
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	33333333 	.word	0x33333333
 8002dd4:	40233333 	.word	0x40233333
 8002dd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ddc:	3f50624d 	.word	0x3f50624d
 8002de0:	20000010 	.word	0x20000010
 8002de4:	20000540 	.word	0x20000540
 8002de8:	20000437 	.word	0x20000437
 8002dec:	2000043e 	.word	0x2000043e
 8002df0:	20000439 	.word	0x20000439
 8002df4:	2000043d 	.word	0x2000043d
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	2000044b 	.word	0x2000044b
 8002e04:	2000043f 	.word	0x2000043f
 8002e08:	20000442 	.word	0x20000442
 8002e0c:	2000044e 	.word	0x2000044e
 8002e10:	20000474 	.word	0x20000474
 8002e14:	20000500 	.word	0x20000500
 8002e18:	200004fc 	.word	0x200004fc
 8002e1c:	200004b0 	.word	0x200004b0
 8002e20:	200004a4 	.word	0x200004a4
 8002e24:	200004ac 	.word	0x200004ac
 8002e28:	20000538 	.word	0x20000538
 8002e2c:	20000544 	.word	0x20000544
 8002e30:	20000464 	.word	0x20000464
 8002e34:	20000449 	.word	0x20000449
 8002e38:	40240000 	.word	0x40240000
 8002e3c:	20000458 	.word	0x20000458
 8002e40:	2000053c 	.word	0x2000053c
 8002e44:	2000054c 	.word	0x2000054c
 8002e48:	2000045c 	.word	0x2000045c
 8002e4c:	444a8000 	.word	0x444a8000
 8002e50:	444a8000 	.word	0x444a8000
				else
				{
					//RunningTime += SampleTime;

					//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-DroppingDecel, PreAccRef);
					LinearGeneration(&AccRef,-BrakeAccSlope,-9.6-DroppingDecel);
 8002e54:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <PullAndDrop+0x968>)
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	eeb1 8a67 	vneg.f32	s16, s15
 8002e5e:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <PullAndDrop+0x96c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb70 	bl	8000548 <__aeabi_f2d>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	a14e      	add	r1, pc, #312	; (adr r1, 8002fa8 <PullAndDrop+0x950>)
 8002e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e72:	f7fd fa09 	bl	8000288 <__aeabi_dsub>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd feb3 	bl	8000be8 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	ee00 3a90 	vmov	s1, r3
 8002e88:	eeb0 0a48 	vmov.f32	s0, s16
 8002e8c:	484e      	ldr	r0, [pc, #312]	; (8002fc8 <PullAndDrop+0x970>)
 8002e8e:	f7fe fdaf 	bl	80019f0 <LinearGeneration>
					//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
					//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
					//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,0,2*TransitionSpeed);
					//LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8002e92:	4b4e      	ldr	r3, [pc, #312]	; (8002fcc <PullAndDrop+0x974>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb56 	bl	8000548 <__aeabi_f2d>
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	460d      	mov	r5, r1
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <PullAndDrop+0x978>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fb3d 	bl	8000524 <__aeabi_i2d>
 8002eaa:	a341      	add	r3, pc, #260	; (adr r3, 8002fb0 <PullAndDrop+0x958>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd fba2 	bl	80005f8 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4690      	mov	r8, r2
 8002eba:	4699      	mov	r9, r3
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <PullAndDrop+0x970>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb41 	bl	8000548 <__aeabi_f2d>
 8002ec6:	a33c      	add	r3, pc, #240	; (adr r3, 8002fb8 <PullAndDrop+0x960>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f7fd f9de 	bl	800028c <__adddf3>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4640      	mov	r0, r8
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	f7fd fb8e 	bl	80005f8 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <PullAndDrop+0x97c>)
 8002eea:	f7fd fb85 	bl	80005f8 <__aeabi_dmul>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4690      	mov	r8, r2
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <PullAndDrop+0x980>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fb24 	bl	8000548 <__aeabi_f2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4640      	mov	r0, r8
 8002f06:	4649      	mov	r1, r9
 8002f08:	f7fd fca0 	bl	800084c <__aeabi_ddiv>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd f9ba 	bl	800028c <__adddf3>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fd fe62 	bl	8000be8 <__aeabi_d2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <PullAndDrop+0x974>)
 8002f28:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= 0)
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <PullAndDrop+0x974>)
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f38:	d803      	bhi.n	8002f42 <PullAndDrop+0x8ea>
						SpeedCmd = 0;
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <PullAndDrop+0x974>)
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
					if (SpeedCmd >= 810)
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <PullAndDrop+0x974>)
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002fdc <PullAndDrop+0x984>
 8002f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	db02      	blt.n	8002f5c <PullAndDrop+0x904>
						SpeedCmd = 810;
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <PullAndDrop+0x974>)
 8002f58:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <PullAndDrop+0x988>)
 8002f5a:	601a      	str	r2, [r3, #0]
					if (SpeedCmd != 0)
					{

					}

					if (SpeedCmd <= 0) // Stop braking
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <PullAndDrop+0x974>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	d815      	bhi.n	8002f98 <PullAndDrop+0x940>
					{
						//RunningTime = 0;
						SpeedCmd = 0; // reset/ stop
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <PullAndDrop+0x974>)
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
						
						ResetPIDController();
 8002f74:	f7fe fb4c 	bl	8001610 <ResetPIDController>
						AccRef = - 9.6;
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <PullAndDrop+0x970>)
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <PullAndDrop+0x98c>)
 8002f7c:	601a      	str	r2, [r3, #0]
						
						StartDropping = false; //	
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <PullAndDrop+0x990>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <PullAndDrop+0x994>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
						StopPulseGenerating();
 8002f8a:	f7fe fd8f 	bl	8001aac <StopPulseGenerating>
						CompleteRunning = true;
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <PullAndDrop+0x998>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
						return true;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <PullAndDrop+0x942>
					}
				}
				// END BRAKING STAGE				
		}
		// END DROPPING TASK.
		return false;
 8002f98:	2300      	movs	r3, #0
	}	
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	ecbd 8b02 	vpop	{d8}
 8002fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa6:	bf00      	nop
 8002fa8:	33333333 	.word	0x33333333
 8002fac:	c0233333 	.word	0xc0233333
 8002fb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fb4:	3f50624d 	.word	0x3f50624d
 8002fb8:	33333333 	.word	0x33333333
 8002fbc:	40233333 	.word	0x40233333
 8002fc0:	20000530 	.word	0x20000530
 8002fc4:	20000468 	.word	0x20000468
 8002fc8:	20000010 	.word	0x20000010
 8002fcc:	20000500 	.word	0x20000500
 8002fd0:	2000045c 	.word	0x2000045c
 8002fd4:	40240000 	.word	0x40240000
 8002fd8:	20000458 	.word	0x20000458
 8002fdc:	444a8000 	.word	0x444a8000
 8002fe0:	444a8000 	.word	0x444a8000
 8002fe4:	c119999a 	.word	0xc119999a
 8002fe8:	20000437 	.word	0x20000437
 8002fec:	2000043e 	.word	0x2000043e
 8002ff0:	20000444 	.word	0x20000444
 8002ff4:	00000000 	.word	0x00000000

08002ff8 <Dropping>:
bool Dropping() // Dropping Program
// Mode = false -> Manual Running
// Mode = true -> Automatic Running
// return true if finishing, else return false while running
// StoppingDelayTime (ms): the time duration of stopping before pulling
{
 8002ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ffc:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 8002ffe:	4b5a      	ldr	r3, [pc, #360]	; (8003168 <Dropping+0x170>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <Dropping+0x12>
	{
		return true;
 8003006:	2301      	movs	r3, #1
 8003008:	e1c0      	b.n	800338c <Dropping+0x394>
	}
	else
	{
		if (StartDropping && !StartPulling) // Dropping Stage
 800300a:	4b58      	ldr	r3, [pc, #352]	; (800316c <Dropping+0x174>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8166 	beq.w	80032e0 <Dropping+0x2e8>
 8003014:	4b56      	ldr	r3, [pc, #344]	; (8003170 <Dropping+0x178>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	f083 0301 	eor.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 815e 	beq.w	80032e0 <Dropping+0x2e8>
		{
			if (!StartBraking) // Accelerating Stage
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <Dropping+0x17c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	f083 0301 	eor.w	r3, r3, #1
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80bc 	beq.w	80031ac <Dropping+0x1b4>
				// Calculate speed cmd
				//RunningTime += SampleTime;
				
				// Ramping the reference signal
				// LinearGeneration(&AccRef,8,-9.6+DroppingAccel);
				AccRef = -9.6+DroppingAccel;
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <Dropping+0x180>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fa85 	bl	8000548 <__aeabi_f2d>
 800303e:	a348      	add	r3, pc, #288	; (adr r3, 8003160 <Dropping+0x168>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f7fd f920 	bl	8000288 <__aeabi_dsub>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7fd fdca 	bl	8000be8 <__aeabi_d2f>
 8003054:	4603      	mov	r3, r0
 8003056:	4a49      	ldr	r2, [pc, #292]	; (800317c <Dropping+0x184>)
 8003058:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl) // Use open-loop control
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <Dropping+0x188>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d014      	beq.n	800308c <Dropping+0x94>
				{
					//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,DroppingEpsilonAcc*10,DroppingMaxSpeed); // Feedforward term
 8003062:	4b48      	ldr	r3, [pc, #288]	; (8003184 <Dropping+0x18c>)
 8003064:	edd3 7a00 	vldr	s15, [r3]
 8003068:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800306c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003070:	4b45      	ldr	r3, [pc, #276]	; (8003188 <Dropping+0x190>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	ee07 3a10 	vmov	s14, r3
 8003078:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800307c:	eef0 0a47 	vmov.f32	s1, s14
 8003080:	eeb0 0a67 	vmov.f32	s0, s15
 8003084:	4841      	ldr	r0, [pc, #260]	; (800318c <Dropping+0x194>)
 8003086:	f7fe fcb3 	bl	80019f0 <LinearGeneration>
 800308a:	e047      	b.n	800311c <Dropping+0x124>
				
					//SpeedCmd = PIDSpeedCmd; // PID controller only
					//SpeedCmd = FeedFWSpeedCmd;
					//SpeedCmd = FeedFWSpeedCmd + PIDSpeedCmd; // Feedforward controller
					
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 800308c:	4b3b      	ldr	r3, [pc, #236]	; (800317c <Dropping+0x184>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <Dropping+0x198>)
 8003094:	ed93 7a00 	vldr	s14, [r3]
 8003098:	2201      	movs	r2, #1
 800309a:	2105      	movs	r1, #5
 800309c:	f06f 0004 	mvn.w	r0, #4
 80030a0:	eef0 0a47 	vmov.f32	s1, s14
 80030a4:	eeb0 0a67 	vmov.f32	s0, s15
 80030a8:	f7fe f9fa 	bl	80014a0 <PIDCalculate>
 80030ac:	eef0 7a40 	vmov.f32	s15, s0
 80030b0:	4b38      	ldr	r3, [pc, #224]	; (8003194 <Dropping+0x19c>)
 80030b2:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 80030b6:	4b37      	ldr	r3, [pc, #220]	; (8003194 <Dropping+0x19c>)
 80030b8:	ed93 7a00 	vldr	s14, [r3]
 80030bc:	4b2f      	ldr	r3, [pc, #188]	; (800317c <Dropping+0x184>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c6:	ee17 0a90 	vmov	r0, s15
 80030ca:	f7fd fa3d 	bl	8000548 <__aeabi_f2d>
 80030ce:	a324      	add	r3, pc, #144	; (adr r3, 8003160 <Dropping+0x168>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd f8da 	bl	800028c <__adddf3>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fd82 	bl	8000be8 <__aeabi_d2f>
 80030e4:	4603      	mov	r3, r0
 80030e6:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <Dropping+0x19c>)
 80030e8:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <Dropping+0x19c>)
 80030ec:	edd3 7a00 	vldr	s15, [r3]
 80030f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <Dropping+0x1a0>)
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <Dropping+0x190>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eef0 0a67 	vmov.f32	s1, s15
 8003112:	eeb0 0a66 	vmov.f32	s0, s13
 8003116:	481d      	ldr	r0, [pc, #116]	; (800318c <Dropping+0x194>)
 8003118:	f7fe fc6a 	bl	80019f0 <LinearGeneration>
				}			
				
				if (SpeedCmd != 0)
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <Dropping+0x194>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d101      	bne.n	8003130 <Dropping+0x138>
				{

				}
				else 
				{
					StopPulseGenerating();
 800312c:	f7fe fcbe 	bl	8001aac <StopPulseGenerating>
				}
				//if (SpeedCmd >= DroppingMaxSpeed || fabs(ObjectPosition) >= DroppingAccelDistance )
				if (ObjectPosition >= DroppingAccelDistance)
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <Dropping+0x1a4>)
 8003132:	ed93 7a00 	vldr	s14, [r3]
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <Dropping+0x1a8>)
 8003138:	edd3 7a00 	vldr	s15, [r3]
 800313c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003144:	f2c0 80cc 	blt.w	80032e0 <Dropping+0x2e8>
				{
					//RunningTime = 0;
					StartBraking = true;
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <Dropping+0x17c>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
					//ResetPIDController();
					IntergraError = 0;
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <Dropping+0x1ac>)
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
					PreError = 0;
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <Dropping+0x1b0>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e0bf      	b.n	80032e0 <Dropping+0x2e8>
 8003160:	33333333 	.word	0x33333333
 8003164:	40233333 	.word	0x40233333
 8003168:	20000444 	.word	0x20000444
 800316c:	20000437 	.word	0x20000437
 8003170:	2000043d 	.word	0x2000043d
 8003174:	2000043e 	.word	0x2000043e
 8003178:	20000464 	.word	0x20000464
 800317c:	20000010 	.word	0x20000010
 8003180:	20000449 	.word	0x20000449
 8003184:	2000046c 	.word	0x2000046c
 8003188:	20000474 	.word	0x20000474
 800318c:	20000500 	.word	0x20000500
 8003190:	2000053c 	.word	0x2000053c
 8003194:	2000054c 	.word	0x2000054c
 8003198:	20000458 	.word	0x20000458
 800319c:	20000548 	.word	0x20000548
 80031a0:	20000478 	.word	0x20000478
 80031a4:	20000538 	.word	0x20000538
 80031a8:	20000544 	.word	0x20000544
			}
			else // Braking Stage
			{
				//RunningTime += SampleTime;

				AccRef = -9.8-DroppingDecel;
 80031ac:	4b80      	ldr	r3, [pc, #512]	; (80033b0 <Dropping+0x3b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f9c9 	bl	8000548 <__aeabi_f2d>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	a177      	add	r1, pc, #476	; (adr r1, 8003398 <Dropping+0x3a0>)
 80031bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031c0:	f7fd f862 	bl	8000288 <__aeabi_dsub>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f7fd fd0c 	bl	8000be8 <__aeabi_d2f>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a78      	ldr	r2, [pc, #480]	; (80033b4 <Dropping+0x3bc>)
 80031d4:	6013      	str	r3, [r2, #0]
//				FeedFWSpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
//				PIDSpeedCmd = PIDCalculate(AccRef,AccZ,-850,850, true); // PID term
				
				//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
				//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
				SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 80031d6:	4b78      	ldr	r3, [pc, #480]	; (80033b8 <Dropping+0x3c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f9b4 	bl	8000548 <__aeabi_f2d>
 80031e0:	4604      	mov	r4, r0
 80031e2:	460d      	mov	r5, r1
 80031e4:	4b75      	ldr	r3, [pc, #468]	; (80033bc <Dropping+0x3c4>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd f99b 	bl	8000524 <__aeabi_i2d>
 80031ee:	a36c      	add	r3, pc, #432	; (adr r3, 80033a0 <Dropping+0x3a8>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd fa00 	bl	80005f8 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4690      	mov	r8, r2
 80031fe:	4699      	mov	r9, r3
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <Dropping+0x3bc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f99f 	bl	8000548 <__aeabi_f2d>
 800320a:	a367      	add	r3, pc, #412	; (adr r3, 80033a8 <Dropping+0x3b0>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fd f83c 	bl	800028c <__adddf3>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4640      	mov	r0, r8
 800321a:	4649      	mov	r1, r9
 800321c:	f7fd f9ec 	bl	80005f8 <__aeabi_dmul>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <Dropping+0x3c8>)
 800322e:	f7fd f9e3 	bl	80005f8 <__aeabi_dmul>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4b62      	ldr	r3, [pc, #392]	; (80033c4 <Dropping+0x3cc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd f982 	bl	8000548 <__aeabi_f2d>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4640      	mov	r0, r8
 800324a:	4649      	mov	r1, r9
 800324c:	f7fd fafe 	bl	800084c <__aeabi_ddiv>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fd f818 	bl	800028c <__adddf3>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f7fd fcc0 	bl	8000be8 <__aeabi_d2f>
 8003268:	4603      	mov	r3, r0
 800326a:	4a53      	ldr	r2, [pc, #332]	; (80033b8 <Dropping+0x3c0>)
 800326c:	6013      	str	r3, [r2, #0]
				if (SpeedCmd <= 0)
 800326e:	4b52      	ldr	r3, [pc, #328]	; (80033b8 <Dropping+0x3c0>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d803      	bhi.n	8003286 <Dropping+0x28e>
					SpeedCmd = 0;
 800327e:	4b4e      	ldr	r3, [pc, #312]	; (80033b8 <Dropping+0x3c0>)
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
				if (SpeedCmd >= 810)
 8003286:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <Dropping+0x3c0>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80033c8 <Dropping+0x3d0>
 8003290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	db02      	blt.n	80032a0 <Dropping+0x2a8>
					SpeedCmd = 810;
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <Dropping+0x3c0>)
 800329c:	4a4b      	ldr	r2, [pc, #300]	; (80033cc <Dropping+0x3d4>)
 800329e:	601a      	str	r2, [r3, #0]

				if (SpeedCmd != 0)
 80032a0:	4b45      	ldr	r3, [pc, #276]	; (80033b8 <Dropping+0x3c0>)
 80032a2:	edd3 7a00 	vldr	s15, [r3]
 80032a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d101      	bne.n	80032b4 <Dropping+0x2bc>
				{

				}
				else 
				{
					StopPulseGenerating();
 80032b0:	f7fe fbfc 	bl	8001aac <StopPulseGenerating>
				}			
				if (SpeedCmd <= 0) // Stop braking
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <Dropping+0x3c0>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	d80d      	bhi.n	80032e0 <Dropping+0x2e8>
				{
					StopPulseGenerating();
 80032c4:	f7fe fbf2 	bl	8001aac <StopPulseGenerating>
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 80032c8:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <Dropping+0x3c0>)
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
					ResetPIDController();
 80032d0:	f7fe f99e 	bl	8001610 <ResetPIDController>
					//AccRef = - 9.8;

					StartDropping = false; //	
 80032d4:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <Dropping+0x3d8>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 80032da:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <Dropping+0x3dc>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
					
				}
			}
		}
		if (!StartDropping && !StartPulling) // Waiting for some seconds before pulling up
 80032e0:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <Dropping+0x3d8>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f083 0301 	eor.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01c      	beq.n	8003328 <Dropping+0x330>
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <Dropping+0x3e0>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	f083 0301 	eor.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d015      	beq.n	8003328 <Dropping+0x330>
		{
	//		POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);					
	//		if (POSReach) // Check if position is reached or not
	//		{
				
				if (WaitingMiliSecond(StoppingTime)) // Wait some second
 80032fc:	4b37      	ldr	r3, [pc, #220]	; (80033dc <Dropping+0x3e4>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe fc21 	bl	8001b48 <WaitingMiliSecond>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <Dropping+0x330>
				{			
					// Change to pulling stage
					StartPulling = true;
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <Dropping+0x3e0>)
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]

					// Timer3CountPeriod = (int)((float)(120000000.0/((float)PullingSpeed*(float)EncoderResolution)) + 0.5);
					// Start pulling to the home position
	//				StepPulseCmd = (int)MotorEncPulse/8; // calculate # of pulse cmd to return to the top postion
	//				IsStepPulseCmd = true;
					PRIsToggled = true;	// true = Pulling	
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <Dropping+0x3e8>)
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
					
					//Start Running
					Direction = false; // pulling up direction
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <Dropping+0x3ec>)
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
					StartPulseGenerating(Direction);
 800331e:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <Dropping+0x3ec>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fbe0 	bl	8001ae8 <StartPulseGenerating>
	//				DisableSTOP();
				}											
	//		}
		}						

		if (!StartDropping && StartPulling) // Pulling Stage
 8003328:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <Dropping+0x3d8>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	f083 0301 	eor.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d029      	beq.n	800338a <Dropping+0x392>
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <Dropping+0x3e0>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d025      	beq.n	800338a <Dropping+0x392>
		{	
			if (MotorDriver) // FDA7000, big model
 800333e:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <Dropping+0x3f0>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <Dropping+0x370>
			{
				if (CheckGoingToRefPosition(false, 0))
 8003346:	2100      	movs	r1, #0
 8003348:	2000      	movs	r0, #0
 800334a:	f7fe fc7f 	bl	8001c4c <CheckGoingToRefPosition>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01a      	beq.n	800338a <Dropping+0x392>
				{
		//			POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);
		//			if (POSReach) // Reaching to the top/home postion
		//			{
						StartPulling = false;
 8003354:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <Dropping+0x3e0>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <Dropping+0x3f4>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
					
						StopPulseGenerating();
 8003360:	f7fe fba4 	bl	8001aac <StopPulseGenerating>
						return true;
 8003364:	2301      	movs	r3, #1
 8003366:	e011      	b.n	800338c <Dropping+0x394>
		//			}			
				}				
			}
			else // ASDA A3
			{
				if (CheckGoingToRefPosition(false, 0))
 8003368:	2100      	movs	r1, #0
 800336a:	2000      	movs	r0, #0
 800336c:	f7fe fc6e 	bl	8001c4c <CheckGoingToRefPosition>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <Dropping+0x392>
				{
						StartPulling = false;
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <Dropping+0x3e0>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <Dropping+0x3f4>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
					
						StopPulseGenerating();
 8003382:	f7fe fb93 	bl	8001aac <StopPulseGenerating>
						return true;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <Dropping+0x394>
				}
			}
		}
		return false;
 800338a:	2300      	movs	r3, #0
	}	
}
 800338c:	4618      	mov	r0, r3
 800338e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003392:	bf00      	nop
 8003394:	f3af 8000 	nop.w
 8003398:	9999999a 	.word	0x9999999a
 800339c:	c0239999 	.word	0xc0239999
 80033a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033a4:	3f50624d 	.word	0x3f50624d
 80033a8:	33333333 	.word	0x33333333
 80033ac:	40233333 	.word	0x40233333
 80033b0:	20000468 	.word	0x20000468
 80033b4:	20000010 	.word	0x20000010
 80033b8:	20000500 	.word	0x20000500
 80033bc:	2000045c 	.word	0x2000045c
 80033c0:	40240000 	.word	0x40240000
 80033c4:	20000458 	.word	0x20000458
 80033c8:	444a8000 	.word	0x444a8000
 80033cc:	444a8000 	.word	0x444a8000
 80033d0:	20000437 	.word	0x20000437
 80033d4:	2000043e 	.word	0x2000043e
 80033d8:	2000043d 	.word	0x2000043d
 80033dc:	2000045e 	.word	0x2000045e
 80033e0:	2000044b 	.word	0x2000044b
 80033e4:	20000439 	.word	0x20000439
 80033e8:	20000003 	.word	0x20000003
 80033ec:	20000444 	.word	0x20000444

080033f0 <StopExperiment>:

void StopExperiment ()
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	// Reset all the flag and state
	StartRunning = false;
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <StopExperiment+0x30>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
	StartDropping = false;
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <StopExperiment+0x34>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
	StartPulling = false;
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <StopExperiment+0x38>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
	StopPulseGenerating(); // Stop pulse generation
 8003406:	f7fe fb51 	bl	8001aac <StopPulseGenerating>
	ResetPIDController();
 800340a:	f7fe f901 	bl	8001610 <ResetPIDController>
	//RunningTime = 0;
	Timer3CountPeriod = 0;
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <StopExperiment+0x3c>)
 8003410:	2200      	movs	r2, #0
 8003412:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;	
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <StopExperiment+0x40>)
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000438 	.word	0x20000438
 8003424:	20000437 	.word	0x20000437
 8003428:	2000043d 	.word	0x2000043d
 800342c:	20000008 	.word	0x20000008
 8003430:	20000500 	.word	0x20000500
 8003434:	00000000 	.word	0x00000000

08003438 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	ed2d 8b02 	vpush	{d8}
 800343e:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8003440:	4bcd      	ldr	r3, [pc, #820]	; (8003778 <CalculateRunningSpec+0x340>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f86d 	bl	8000524 <__aeabi_i2d>
 800344a:	a3c5      	add	r3, pc, #788	; (adr r3, 8003760 <CalculateRunningSpec+0x328>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f7fd f8d2 	bl	80005f8 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	4bc6      	ldr	r3, [pc, #792]	; (800377c <CalculateRunningSpec+0x344>)
 8003462:	f7fd f9f3 	bl	800084c <__aeabi_ddiv>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fd fbbb 	bl	8000be8 <__aeabi_d2f>
 8003472:	4603      	mov	r3, r0
 8003474:	4ac2      	ldr	r2, [pc, #776]	; (8003780 <CalculateRunningSpec+0x348>)
 8003476:	6013      	str	r3, [r2, #0]
	
	// Dropping Stage Calculations
	DroppingMaxSpeed = (uint16_t)(10*sqrt(2*DroppingAccel*DroppingAccelDistance)/(DrumRadius)); // in rpm; 10~60/2pi
 8003478:	4bc2      	ldr	r3, [pc, #776]	; (8003784 <CalculateRunningSpec+0x34c>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003482:	4bc1      	ldr	r3, [pc, #772]	; (8003788 <CalculateRunningSpec+0x350>)
 8003484:	edd3 7a00 	vldr	s15, [r3]
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	ee17 0a90 	vmov	r0, s15
 8003490:	f7fd f85a 	bl	8000548 <__aeabi_f2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	ec43 2b10 	vmov	d0, r2, r3
 800349c:	f00a fb14 	bl	800dac8 <sqrt>
 80034a0:	ec51 0b10 	vmov	r0, r1, d0
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	4bb8      	ldr	r3, [pc, #736]	; (800378c <CalculateRunningSpec+0x354>)
 80034aa:	f7fd f8a5 	bl	80005f8 <__aeabi_dmul>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4614      	mov	r4, r2
 80034b4:	461d      	mov	r5, r3
 80034b6:	4bb6      	ldr	r3, [pc, #728]	; (8003790 <CalculateRunningSpec+0x358>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f844 	bl	8000548 <__aeabi_f2d>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4620      	mov	r0, r4
 80034c6:	4629      	mov	r1, r5
 80034c8:	f7fd f9c0 	bl	800084c <__aeabi_ddiv>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	f7fd fb68 	bl	8000ba8 <__aeabi_d2uiz>
 80034d8:	4603      	mov	r3, r0
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4bad      	ldr	r3, [pc, #692]	; (8003794 <CalculateRunningSpec+0x35c>)
 80034de:	801a      	strh	r2, [r3, #0]
	DroppingEpsilonAcc = DroppingAccel/DrumRadius;
 80034e0:	4ba8      	ldr	r3, [pc, #672]	; (8003784 <CalculateRunningSpec+0x34c>)
 80034e2:	edd3 6a00 	vldr	s13, [r3]
 80034e6:	4baa      	ldr	r3, [pc, #680]	; (8003790 <CalculateRunningSpec+0x358>)
 80034e8:	ed93 7a00 	vldr	s14, [r3]
 80034ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f0:	4ba9      	ldr	r3, [pc, #676]	; (8003798 <CalculateRunningSpec+0x360>)
 80034f2:	edc3 7a00 	vstr	s15, [r3]
	DroppingEpsilonDec = DroppingDecel/DrumRadius;	
 80034f6:	4ba9      	ldr	r3, [pc, #676]	; (800379c <CalculateRunningSpec+0x364>)
 80034f8:	edd3 6a00 	vldr	s13, [r3]
 80034fc:	4ba4      	ldr	r3, [pc, #656]	; (8003790 <CalculateRunningSpec+0x358>)
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003506:	4ba6      	ldr	r3, [pc, #664]	; (80037a0 <CalculateRunningSpec+0x368>)
 8003508:	edc3 7a00 	vstr	s15, [r3]
	
	// Pulling Stage Calculations
	PullingMaxSpeed = (uint16_t)(10*sqrt(2*PullingAccel*PullingAccelDistance)/(DrumRadius)); // in rpm
 800350c:	4ba5      	ldr	r3, [pc, #660]	; (80037a4 <CalculateRunningSpec+0x36c>)
 800350e:	edd3 7a00 	vldr	s15, [r3]
 8003512:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003516:	4ba4      	ldr	r3, [pc, #656]	; (80037a8 <CalculateRunningSpec+0x370>)
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003520:	ee17 0a90 	vmov	r0, s15
 8003524:	f7fd f810 	bl	8000548 <__aeabi_f2d>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	ec43 2b10 	vmov	d0, r2, r3
 8003530:	f00a faca 	bl	800dac8 <sqrt>
 8003534:	ec51 0b10 	vmov	r0, r1, d0
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	4b93      	ldr	r3, [pc, #588]	; (800378c <CalculateRunningSpec+0x354>)
 800353e:	f7fd f85b 	bl	80005f8 <__aeabi_dmul>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4614      	mov	r4, r2
 8003548:	461d      	mov	r5, r3
 800354a:	4b91      	ldr	r3, [pc, #580]	; (8003790 <CalculateRunningSpec+0x358>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fc fffa 	bl	8000548 <__aeabi_f2d>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4620      	mov	r0, r4
 800355a:	4629      	mov	r1, r5
 800355c:	f7fd f976 	bl	800084c <__aeabi_ddiv>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fb1e 	bl	8000ba8 <__aeabi_d2uiz>
 800356c:	4603      	mov	r3, r0
 800356e:	b29a      	uxth	r2, r3
 8003570:	4b8e      	ldr	r3, [pc, #568]	; (80037ac <CalculateRunningSpec+0x374>)
 8003572:	801a      	strh	r2, [r3, #0]
	PullingEpsilonAcc = PullingAccel/DrumRadius;
 8003574:	4b8b      	ldr	r3, [pc, #556]	; (80037a4 <CalculateRunningSpec+0x36c>)
 8003576:	edd3 6a00 	vldr	s13, [r3]
 800357a:	4b85      	ldr	r3, [pc, #532]	; (8003790 <CalculateRunningSpec+0x358>)
 800357c:	ed93 7a00 	vldr	s14, [r3]
 8003580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003584:	4b8a      	ldr	r3, [pc, #552]	; (80037b0 <CalculateRunningSpec+0x378>)
 8003586:	edc3 7a00 	vstr	s15, [r3]
	PullingEpsilonDec = PullingDecel/DrumRadius;
 800358a:	4b8a      	ldr	r3, [pc, #552]	; (80037b4 <CalculateRunningSpec+0x37c>)
 800358c:	edd3 6a00 	vldr	s13, [r3]
 8003590:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <CalculateRunningSpec+0x358>)
 8003592:	ed93 7a00 	vldr	s14, [r3]
 8003596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800359a:	4b87      	ldr	r3, [pc, #540]	; (80037b8 <CalculateRunningSpec+0x380>)
 800359c:	edc3 7a00 	vstr	s15, [r3]
	
	PullingDecelTime = (PullingMaxSpeed * (2*3.14/60) * DrumRadius) / PullingDecel;
 80035a0:	4b82      	ldr	r3, [pc, #520]	; (80037ac <CalculateRunningSpec+0x374>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffbd 	bl	8000524 <__aeabi_i2d>
 80035aa:	a36f      	add	r3, pc, #444	; (adr r3, 8003768 <CalculateRunningSpec+0x330>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f7fd f822 	bl	80005f8 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4614      	mov	r4, r2
 80035ba:	461d      	mov	r5, r3
 80035bc:	4b74      	ldr	r3, [pc, #464]	; (8003790 <CalculateRunningSpec+0x358>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc ffc1 	bl	8000548 <__aeabi_f2d>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7fd f813 	bl	80005f8 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4614      	mov	r4, r2
 80035d8:	461d      	mov	r5, r3
 80035da:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <CalculateRunningSpec+0x37c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fc ffb2 	bl	8000548 <__aeabi_f2d>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4620      	mov	r0, r4
 80035ea:	4629      	mov	r1, r5
 80035ec:	f7fd f92e 	bl	800084c <__aeabi_ddiv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7fd faf6 	bl	8000be8 <__aeabi_d2f>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4a6f      	ldr	r2, [pc, #444]	; (80037bc <CalculateRunningSpec+0x384>)
 8003600:	6013      	str	r3, [r2, #0]
	PullingDecelDistance = 0.5*PullingMaxSpeed*(2*3.14/60)*DrumRadius*PullingDecelTime;
 8003602:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <CalculateRunningSpec+0x374>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc ff8c 	bl	8000524 <__aeabi_i2d>
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	4b6b      	ldr	r3, [pc, #428]	; (80037c0 <CalculateRunningSpec+0x388>)
 8003612:	f7fc fff1 	bl	80005f8 <__aeabi_dmul>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	a352      	add	r3, pc, #328	; (adr r3, 8003768 <CalculateRunningSpec+0x330>)
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f7fc ffe8 	bl	80005f8 <__aeabi_dmul>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4614      	mov	r4, r2
 800362e:	461d      	mov	r5, r3
 8003630:	4b57      	ldr	r3, [pc, #348]	; (8003790 <CalculateRunningSpec+0x358>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff87 	bl	8000548 <__aeabi_f2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4620      	mov	r0, r4
 8003640:	4629      	mov	r1, r5
 8003642:	f7fc ffd9 	bl	80005f8 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4614      	mov	r4, r2
 800364c:	461d      	mov	r5, r3
 800364e:	4b5b      	ldr	r3, [pc, #364]	; (80037bc <CalculateRunningSpec+0x384>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ff78 	bl	8000548 <__aeabi_f2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4620      	mov	r0, r4
 800365e:	4629      	mov	r1, r5
 8003660:	f7fc ffca 	bl	80005f8 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7fd fabc 	bl	8000be8 <__aeabi_d2f>
 8003670:	4603      	mov	r3, r0
 8003672:	4a54      	ldr	r2, [pc, #336]	; (80037c4 <CalculateRunningSpec+0x38c>)
 8003674:	6013      	str	r3, [r2, #0]
	
	PullingTotalDistance = ((float)PullingAccelDistance + PullingDecelDistance)*1.5;
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <CalculateRunningSpec+0x370>)
 8003678:	ed93 7a00 	vldr	s14, [r3]
 800367c:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <CalculateRunningSpec+0x38c>)
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003686:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800368a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800368e:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <CalculateRunningSpec+0x390>)
 8003690:	edc3 7a00 	vstr	s15, [r3]
	PullingBotomPulseCmdPosition = (int)((float)EncoderResolution*(float)PullingTotalDistance/((float)(2*3.14*DrumRadius))); // unit: pulses
 8003694:	4b4d      	ldr	r3, [pc, #308]	; (80037cc <CalculateRunningSpec+0x394>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036a0:	4b49      	ldr	r3, [pc, #292]	; (80037c8 <CalculateRunningSpec+0x390>)
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80036aa:	4b39      	ldr	r3, [pc, #228]	; (8003790 <CalculateRunningSpec+0x358>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc ff4a 	bl	8000548 <__aeabi_f2d>
 80036b4:	a32e      	add	r3, pc, #184	; (adr r3, 8003770 <CalculateRunningSpec+0x338>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f7fc ff9d 	bl	80005f8 <__aeabi_dmul>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f7fd fa8f 	bl	8000be8 <__aeabi_d2f>
 80036ca:	ee07 0a10 	vmov	s14, r0
 80036ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80036d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d6:	ee17 2a90 	vmov	r2, s15
 80036da:	4b3d      	ldr	r3, [pc, #244]	; (80037d0 <CalculateRunningSpec+0x398>)
 80036dc:	601a      	str	r2, [r3, #0]

	FlyingPosPulseCmd = ((int)(EncoderResolution*PullingAccelDistance/(2*3.14*DrumRadius)));
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <CalculateRunningSpec+0x394>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <CalculateRunningSpec+0x370>)
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f4:	ee17 0a90 	vmov	r0, s15
 80036f8:	f7fc ff26 	bl	8000548 <__aeabi_f2d>
 80036fc:	4604      	mov	r4, r0
 80036fe:	460d      	mov	r5, r1
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <CalculateRunningSpec+0x358>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc ff1f 	bl	8000548 <__aeabi_f2d>
 800370a:	a319      	add	r3, pc, #100	; (adr r3, 8003770 <CalculateRunningSpec+0x338>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc ff72 	bl	80005f8 <__aeabi_dmul>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4620      	mov	r0, r4
 800371a:	4629      	mov	r1, r5
 800371c:	f7fd f896 	bl	800084c <__aeabi_ddiv>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f7fd fa16 	bl	8000b58 <__aeabi_d2iz>
 800372c:	4603      	mov	r3, r0
 800372e:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <CalculateRunningSpec+0x39c>)
 8003730:	6013      	str	r3, [r2, #0]
	BottomFreeDropPulseCmd = ((int)(EncoderResolution*DroppingAccelDistance/(2*3.14*DrumRadius)));
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <CalculateRunningSpec+0x394>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <CalculateRunningSpec+0x350>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003748:	ee17 0a90 	vmov	r0, s15
 800374c:	f7fc fefc 	bl	8000548 <__aeabi_f2d>
 8003750:	4604      	mov	r4, r0
 8003752:	460d      	mov	r5, r1
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <CalculateRunningSpec+0x358>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fef5 	bl	8000548 <__aeabi_f2d>
 800375e:	e03b      	b.n	80037d8 <CalculateRunningSpec+0x3a0>
 8003760:	9999999a 	.word	0x9999999a
 8003764:	3fb99999 	.word	0x3fb99999
 8003768:	46508dff 	.word	0x46508dff
 800376c:	3fbacb6f 	.word	0x3fbacb6f
 8003770:	51eb851f 	.word	0x51eb851f
 8003774:	40191eb8 	.word	0x40191eb8
 8003778:	2000045d 	.word	0x2000045d
 800377c:	40080000 	.word	0x40080000
 8003780:	20000460 	.word	0x20000460
 8003784:	20000464 	.word	0x20000464
 8003788:	20000478 	.word	0x20000478
 800378c:	40240000 	.word	0x40240000
 8003790:	20000458 	.word	0x20000458
 8003794:	20000474 	.word	0x20000474
 8003798:	2000046c 	.word	0x2000046c
 800379c:	20000468 	.word	0x20000468
 80037a0:	20000470 	.word	0x20000470
 80037a4:	2000047c 	.word	0x2000047c
 80037a8:	20000498 	.word	0x20000498
 80037ac:	20000490 	.word	0x20000490
 80037b0:	20000484 	.word	0x20000484
 80037b4:	20000480 	.word	0x20000480
 80037b8:	20000488 	.word	0x20000488
 80037bc:	2000048c 	.word	0x2000048c
 80037c0:	3fe00000 	.word	0x3fe00000
 80037c4:	20000494 	.word	0x20000494
 80037c8:	2000049c 	.word	0x2000049c
 80037cc:	2000000a 	.word	0x2000000a
 80037d0:	200004a0 	.word	0x200004a0
 80037d4:	200004a8 	.word	0x200004a8
 80037d8:	a343      	add	r3, pc, #268	; (adr r3, 80038e8 <CalculateRunningSpec+0x4b0>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fc ff0b 	bl	80005f8 <__aeabi_dmul>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4620      	mov	r0, r4
 80037e8:	4629      	mov	r1, r5
 80037ea:	f7fd f82f 	bl	800084c <__aeabi_ddiv>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	f7fd f9af 	bl	8000b58 <__aeabi_d2iz>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4a34      	ldr	r2, [pc, #208]	; (80038d0 <CalculateRunningSpec+0x498>)
 80037fe:	6013      	str	r3, [r2, #0]

	WaitingTime = (uint16_t)(((PullingMaxSpeed*(2*3.14/60)*DrumRadius)/9.8 - PullingDecelTime)*1000*2*0.7); // *1000 to convert to ms; *2 for both flying up and dropping down
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <CalculateRunningSpec+0x49c>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fe8d 	bl	8000524 <__aeabi_i2d>
 800380a:	a32b      	add	r3, pc, #172	; (adr r3, 80038b8 <CalculateRunningSpec+0x480>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc fef2 	bl	80005f8 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4614      	mov	r4, r2
 800381a:	461d      	mov	r5, r3
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <CalculateRunningSpec+0x4a0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fe91 	bl	8000548 <__aeabi_f2d>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4620      	mov	r0, r4
 800382c:	4629      	mov	r1, r5
 800382e:	f7fc fee3 	bl	80005f8 <__aeabi_dmul>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	a321      	add	r3, pc, #132	; (adr r3, 80038c0 <CalculateRunningSpec+0x488>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f7fd f804 	bl	800084c <__aeabi_ddiv>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4614      	mov	r4, r2
 800384a:	461d      	mov	r5, r3
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <CalculateRunningSpec+0x4a4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fc fe79 	bl	8000548 <__aeabi_f2d>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4620      	mov	r0, r4
 800385c:	4629      	mov	r1, r5
 800385e:	f7fc fd13 	bl	8000288 <__aeabi_dsub>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <CalculateRunningSpec+0x4a8>)
 8003870:	f7fc fec2 	bl	80005f8 <__aeabi_dmul>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	f7fc fd04 	bl	800028c <__adddf3>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	a30e      	add	r3, pc, #56	; (adr r3, 80038c8 <CalculateRunningSpec+0x490>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	f7fc feb1 	bl	80005f8 <__aeabi_dmul>
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f7fd f983 	bl	8000ba8 <__aeabi_d2uiz>
 80038a2:	4603      	mov	r3, r0
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <CalculateRunningSpec+0x4ac>)
 80038a8:	801a      	strh	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	ecbd 8b02 	vpop	{d8}
 80038b2:	bdb0      	pop	{r4, r5, r7, pc}
 80038b4:	f3af 8000 	nop.w
 80038b8:	46508dff 	.word	0x46508dff
 80038bc:	3fbacb6f 	.word	0x3fbacb6f
 80038c0:	9999999a 	.word	0x9999999a
 80038c4:	40239999 	.word	0x40239999
 80038c8:	66666666 	.word	0x66666666
 80038cc:	3fe66666 	.word	0x3fe66666
 80038d0:	200004ac 	.word	0x200004ac
 80038d4:	20000490 	.word	0x20000490
 80038d8:	20000458 	.word	0x20000458
 80038dc:	2000048c 	.word	0x2000048c
 80038e0:	408f4000 	.word	0x408f4000
 80038e4:	2000044e 	.word	0x2000044e
 80038e8:	51eb851f 	.word	0x51eb851f
 80038ec:	40191eb8 	.word	0x40191eb8

080038f0 <InitParams>:
void InitParams ()
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 80038f6:	4929      	ldr	r1, [pc, #164]	; (800399c <InitParams+0xac>)
 80038f8:	4829      	ldr	r0, [pc, #164]	; (80039a0 <InitParams+0xb0>)
 80038fa:	f7fd ff71 	bl	80017e0 <LoadSavedParam>
	
	// General Params
	DrumRadius = Params[0];	
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <InitParams+0xac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <InitParams+0xb4>)
 8003904:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <InitParams+0xac>)
 8003908:	edd3 7a01 	vldr	s15, [r3, #4]
 800390c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003910:	edc7 7a01 	vstr	s15, [r7, #4]
 8003914:	793b      	ldrb	r3, [r7, #4]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <InitParams+0xb8>)
 800391a:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 800391c:	4b1f      	ldr	r3, [pc, #124]	; (800399c <InitParams+0xac>)
 800391e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003926:	ee17 3a90 	vmov	r3, s15
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <InitParams+0xbc>)
 800392e:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <InitParams+0xac>)
 8003932:	edd3 7a03 	vldr	s15, [r3, #12]
 8003936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393a:	edc7 7a01 	vstr	s15, [r7, #4]
 800393e:	793b      	ldrb	r3, [r7, #4]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <InitParams+0xc0>)
 8003944:	701a      	strb	r2, [r3, #0]
	
	// Dropping Stage Params
	DroppingAccelDistance = Params[4];
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <InitParams+0xac>)
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <InitParams+0xc4>)
 800394c:	6013      	str	r3, [r2, #0]
	DroppingAccel  = Params[5];
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <InitParams+0xac>)
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <InitParams+0xc8>)
 8003954:	6013      	str	r3, [r2, #0]
	DroppingDecel = Params[6];
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <InitParams+0xac>)
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <InitParams+0xcc>)
 800395c:	6013      	str	r3, [r2, #0]

	
	// Pulling Stage Params
	PullingAccelDistance = Params[7];
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <InitParams+0xac>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <InitParams+0xd0>)
 8003964:	6013      	str	r3, [r2, #0]
	PullingAccel = Params[8];
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <InitParams+0xac>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <InitParams+0xd4>)
 800396c:	6013      	str	r3, [r2, #0]
	PullingDecel = Params[9];
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <InitParams+0xac>)
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <InitParams+0xd8>)
 8003974:	6013      	str	r3, [r2, #0]
	
	// PID Controller params
	FlyAccSlope = Params[10];
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <InitParams+0xac>)
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	4a14      	ldr	r2, [pc, #80]	; (80039cc <InitParams+0xdc>)
 800397c:	6013      	str	r3, [r2, #0]
	Ki = Params[11];
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <InitParams+0xac>)
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <InitParams+0xe0>)
 8003984:	6013      	str	r3, [r2, #0]
	//Kd = Params[12];
	BrakeAccSlope = Params[12];
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <InitParams+0xac>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <InitParams+0xe4>)
 800398c:	6013      	str	r3, [r2, #0]
	
	CalculateRunningSpec ();
 800398e:	f7ff fd53 	bl	8003438 <CalculateRunningSpec>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200004c0 	.word	0x200004c0
 80039a0:	08040000 	.word	0x08040000
 80039a4:	20000458 	.word	0x20000458
 80039a8:	2000045d 	.word	0x2000045d
 80039ac:	2000045e 	.word	0x2000045e
 80039b0:	2000045c 	.word	0x2000045c
 80039b4:	20000478 	.word	0x20000478
 80039b8:	20000464 	.word	0x20000464
 80039bc:	20000468 	.word	0x20000468
 80039c0:	20000498 	.word	0x20000498
 80039c4:	2000047c 	.word	0x2000047c
 80039c8:	20000480 	.word	0x20000480
 80039cc:	20000534 	.word	0x20000534
 80039d0:	20000528 	.word	0x20000528
 80039d4:	20000530 	.word	0x20000530

080039d8 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 80039d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039dc:	b0ef      	sub	sp, #444	; 0x1bc
 80039de:	af16      	add	r7, sp, #88	; 0x58
	//ExtractMotionCode(); // Extract data to MotionCode
	switch ((int)MotionCode[0])
 80039e0:	4bae      	ldr	r3, [pc, #696]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039ea:	ee17 3a90 	vmov	r3, s15
 80039ee:	3b01      	subs	r3, #1
 80039f0:	2b2f      	cmp	r3, #47	; 0x2f
 80039f2:	f200 86dd 	bhi.w	80047b0 <ProcessReceivedCommand+0xdd8>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <ProcessReceivedCommand+0x24>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003af7 	.word	0x08003af7
 8003a00:	08003b3d 	.word	0x08003b3d
 8003a04:	08003b67 	.word	0x08003b67
 8003a08:	08003b93 	.word	0x08003b93
 8003a0c:	08003bc1 	.word	0x08003bc1
 8003a10:	08003c0f 	.word	0x08003c0f
 8003a14:	08003c3d 	.word	0x08003c3d
 8003a18:	08003c77 	.word	0x08003c77
 8003a1c:	080047b1 	.word	0x080047b1
 8003a20:	080047b1 	.word	0x080047b1
 8003a24:	08003e95 	.word	0x08003e95
 8003a28:	08003eed 	.word	0x08003eed
 8003a2c:	08003f45 	.word	0x08003f45
 8003a30:	08004037 	.word	0x08004037
 8003a34:	08004043 	.word	0x08004043
 8003a38:	08004097 	.word	0x08004097
 8003a3c:	0800410d 	.word	0x0800410d
 8003a40:	08004113 	.word	0x08004113
 8003a44:	080047b1 	.word	0x080047b1
 8003a48:	0800413f 	.word	0x0800413f
 8003a4c:	080047b1 	.word	0x080047b1
 8003a50:	080047b1 	.word	0x080047b1
 8003a54:	080047b1 	.word	0x080047b1
 8003a58:	080047b1 	.word	0x080047b1
 8003a5c:	080047b1 	.word	0x080047b1
 8003a60:	080047b1 	.word	0x080047b1
 8003a64:	080041bd 	.word	0x080041bd
 8003a68:	08004221 	.word	0x08004221
 8003a6c:	080047b1 	.word	0x080047b1
 8003a70:	080047b1 	.word	0x080047b1
 8003a74:	08004247 	.word	0x08004247
 8003a78:	08004307 	.word	0x08004307
 8003a7c:	0800435b 	.word	0x0800435b
 8003a80:	080043af 	.word	0x080043af
 8003a84:	08004403 	.word	0x08004403
 8003a88:	080047c5 	.word	0x080047c5
 8003a8c:	08004457 	.word	0x08004457
 8003a90:	080044d3 	.word	0x080044d3
 8003a94:	0800450f 	.word	0x0800450f
 8003a98:	080047b1 	.word	0x080047b1
 8003a9c:	080045f3 	.word	0x080045f3
 8003aa0:	08004643 	.word	0x08004643
 8003aa4:	08004693 	.word	0x08004693
 8003aa8:	08003abd 	.word	0x08003abd
 8003aac:	08003ced 	.word	0x08003ced
 8003ab0:	080046e3 	.word	0x080046e3
 8003ab4:	080046ed 	.word	0x080046ed
 8003ab8:	0800474d 	.word	0x0800474d
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 8003abc:	4b77      	ldr	r3, [pc, #476]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003abe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac6:	ee17 3a90 	vmov	r3, s15
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <ProcessReceivedCommand+0x116>
			{
				Estop(); // Estop button on the UI
 8003ace:	f7fd fbbf 	bl	8001250 <Estop>
				PulseGenerationFlag = false; // Stop generating pulses
 8003ad2:	4b73      	ldr	r3, [pc, #460]	; (8003ca0 <ProcessReceivedCommand+0x2c8>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
				StartDropping = false;
 8003ad8:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <ProcessReceivedCommand+0x2cc>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 8003ade:	4b72      	ldr	r3, [pc, #456]	; (8003ca8 <ProcessReceivedCommand+0x2d0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
				EMO = true;				
 8003ae4:	4b71      	ldr	r3, [pc, #452]	; (8003cac <ProcessReceivedCommand+0x2d4>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8003aea:	f000 be72 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
			else {AlarmReset();}  // 44/1, alarm button
 8003aee:	f7fd fb89 	bl	8001204 <AlarmReset>
			break;
 8003af2:	f000 be6e 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 8003af6:	4b69      	ldr	r3, [pc, #420]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b00:	ee17 3a90 	vmov	r3, s15
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 865f 	bne.w	80047c8 <ProcessReceivedCommand+0xdf0>
			{
				if (MotorDriver) // FDA 7000
 8003b0a:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <ProcessReceivedCommand+0x2d8>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <ProcessReceivedCommand+0x146>
				{
					Stop();
 8003b12:	f7fd fb67 	bl	80011e4 <Stop>
					StopExperiment();
 8003b16:	f7ff fc6b 	bl	80033f0 <StopExperiment>
					IsHoming = false;
					IsStepPulseCmd = false;
					JoggingMoveUp = false;
				}					
			}
			break;
 8003b1a:	f000 be55 	b.w	80047c8 <ProcessReceivedCommand+0xdf0>
					StopPulseGenerating();
 8003b1e:	f7fd ffc5 	bl	8001aac <StopPulseGenerating>
					StopExperiment();
 8003b22:	f7ff fc65 	bl	80033f0 <StopExperiment>
					IsHoming = false;
 8003b26:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <ProcessReceivedCommand+0x2dc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = false;
 8003b2c:	4b62      	ldr	r3, [pc, #392]	; (8003cb8 <ProcessReceivedCommand+0x2e0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
					JoggingMoveUp = false;
 8003b32:	4b62      	ldr	r3, [pc, #392]	; (8003cbc <ProcessReceivedCommand+0x2e4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
			break;
 8003b38:	f000 be46 	b.w	80047c8 <ProcessReceivedCommand+0xdf0>
		case 2: // Set Control Mode
			if ((int)MotionCode[1] == 1) // 2/1 position mode
 8003b3c:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003b3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b46:	ee17 3a90 	vmov	r3, s15
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d106      	bne.n	8003b5c <ProcessReceivedCommand+0x184>
					{
						PositionControlMode = true;
 8003b4e:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <ProcessReceivedCommand+0x2e8>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
						DriverInit(); // Init Position Mode
 8003b54:	f7fd fb94 	bl	8001280 <DriverInit>
			else // 2/0 speed mode
					{
						PositionControlMode = false;
						//SetSpeedMode(); // Set to Speed Mode
					} 
			break;
 8003b58:	f000 be3b 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
						PositionControlMode = false;
 8003b5c:	4b58      	ldr	r3, [pc, #352]	; (8003cc0 <ProcessReceivedCommand+0x2e8>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
			break;
 8003b62:	f000 be36 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
		case 3: // Jog Control
			IsJogControl = true;
 8003b66:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <ProcessReceivedCommand+0x2ec>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
			if ((int)MotionCode[1] == 1) // 3/1 move up button
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b76:	ee17 3a90 	vmov	r3, s15
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d104      	bne.n	8003b88 <ProcessReceivedCommand+0x1b0>
			{
					Direction = false; // false = move up
 8003b7e:	4b52      	ldr	r3, [pc, #328]	; (8003cc8 <ProcessReceivedCommand+0x2f0>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
//					else // Speed Mode
//					{
//						JogMoveDown(); // Disable the stop
//					}
			}
			break;
 8003b84:	f000 be25 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
					Direction = true; // move down
 8003b88:	4b4f      	ldr	r3, [pc, #316]	; (8003cc8 <ProcessReceivedCommand+0x2f0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
			break;
 8003b8e:	f000 be20 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing 
 8003b92:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b9c:	ee17 3a90 	vmov	r3, s15
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d109      	bne.n	8003bb8 <ProcessReceivedCommand+0x1e0>
				{
					InitializeRunning (ExperimentMode);
 8003ba4:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <ProcessReceivedCommand+0x2f4>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fa4d 	bl	8002048 <InitializeRunning>
					EMO = false;					
 8003bae:	4b3f      	ldr	r3, [pc, #252]	; (8003cac <ProcessReceivedCommand+0x2d4>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
				}
			else // Stop running
				{
					StopExperiment();					
				}
			break;
 8003bb4:	f000 be0d 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
					StopExperiment();					
 8003bb8:	f7ff fc1a 	bl	80033f0 <StopExperiment>
			break;
 8003bbc:	f000 be09 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
				
		case 5: // Set Jog Speed						
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 8003bc0:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <ProcessReceivedCommand+0x2e8>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8601 	beq.w	80047cc <ProcessReceivedCommand+0xdf4>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003bcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd4:	ee17 3a90 	vmov	r3, s15
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <ProcessReceivedCommand+0x2f8>)
 8003bdc:	801a      	strh	r2, [r3, #0]
				// Calculate Delta Pulse

				//Timer3CountPeriod = (int)((float)(120000000.0/((float)JogSpeed*(float)EncoderResolution)) + 0.5);
				char JogSpeedBuff[10];
				TxPCLen = sprintf(JogSpeedBuff,"j%.de",JogSpeed);
 8003bde:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <ProcessReceivedCommand+0x2f8>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003be8:	493a      	ldr	r1, [pc, #232]	; (8003cd4 <ProcessReceivedCommand+0x2fc>)
 8003bea:	4618      	mov	r0, r3
 8003bec:	f006 f99c 	bl	8009f28 <siprintf>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <ProcessReceivedCommand+0x300>)
 8003bf6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)JogSpeedBuff,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003bf8:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <ProcessReceivedCommand+0x300>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003c02:	23c8      	movs	r3, #200	; 0xc8
 8003c04:	4835      	ldr	r0, [pc, #212]	; (8003cdc <ProcessReceivedCommand+0x304>)
 8003c06:	f004 fcc8 	bl	800859a <HAL_UART_Transmit>
//					{
//						DroppingAccelDistance = roundf(MotionCode[3] * 10)/10;
//						WriteFloatData((uint16_t)MotionCode[2], DroppingAccelDistance, true);
//					}
//			}
			break;
 8003c0a:	f000 bddf 	b.w	80047cc <ProcessReceivedCommand+0xdf4>
			
		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003c10:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c18:	ee17 3a90 	vmov	r3, s15
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <ProcessReceivedCommand+0x25a>
			{
				UIDataRequest = true;
 8003c20:	4b2f      	ldr	r3, [pc, #188]	; (8003ce0 <ProcessReceivedCommand+0x308>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 8003c26:	2105      	movs	r1, #5
 8003c28:	200c      	movs	r0, #12
 8003c2a:	f7fd fd67 	bl	80016fc <ReadMultiRegister>
			} // 6/1 If the UI request data
			else 
			{
				UIDataRequest = false;
			}
			break;
 8003c2e:	f000 bdd0 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
				UIDataRequest = false;
 8003c32:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <ProcessReceivedCommand+0x308>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
			break;
 8003c38:	f000 bdcb 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
					
		case 7: // Save System Params			
			// Save to the flash memory
			//SaveParams(DrumRadius, DroppingAccelDistance, PullingSpeed, StoppingTime, DroppingAccel, SampleTime);				
			SaveSystemParams();
 8003c3c:	f7fd fe0e 	bl	800185c <SaveSystemParams>
			HAL_Delay(500);
 8003c40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c44:	f002 fa86 	bl	8006154 <HAL_Delay>
			SaveSystemParams(); // Do twice times
 8003c48:	f7fd fe08 	bl	800185c <SaveSystemParams>
			// Send back to the UI to notify					
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 8003c4c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003c50:	4924      	ldr	r1, [pc, #144]	; (8003ce4 <ProcessReceivedCommand+0x30c>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	f006 f968 	bl	8009f28 <siprintf>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <ProcessReceivedCommand+0x300>)
 8003c5e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <ProcessReceivedCommand+0x300>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8003c6a:	2364      	movs	r3, #100	; 0x64
 8003c6c:	481b      	ldr	r0, [pc, #108]	; (8003cdc <ProcessReceivedCommand+0x304>)
 8003c6e:	f004 fc94 	bl	800859a <HAL_UART_Transmit>
			break;
 8003c72:	f000 bdae 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
		
		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <ProcessReceivedCommand+0x2c4>)
 8003c78:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c80:	ee17 3a90 	vmov	r3, s15
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d104      	bne.n	8003c92 <ProcessReceivedCommand+0x2ba>
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <ProcessReceivedCommand+0x310>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 8003c8e:	f000 bda0 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
			else OutputDataRequest = false; // 8/0 = stop request
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <ProcessReceivedCommand+0x310>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			break;
 8003c98:	f000 bd9b 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
 8003c9c:	20000504 	.word	0x20000504
 8003ca0:	2000043f 	.word	0x2000043f
 8003ca4:	20000437 	.word	0x20000437
 8003ca8:	2000043d 	.word	0x2000043d
 8003cac:	20000446 	.word	0x20000446
 8003cb0:	20000003 	.word	0x20000003
 8003cb4:	20000447 	.word	0x20000447
 8003cb8:	20000440 	.word	0x20000440
 8003cbc:	20000445 	.word	0x20000445
 8003cc0:	20000002 	.word	0x20000002
 8003cc4:	20000448 	.word	0x20000448
 8003cc8:	20000439 	.word	0x20000439
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	20000006 	.word	0x20000006
 8003cd4:	0800dce0 	.word	0x0800dce0
 8003cd8:	2000042a 	.word	0x2000042a
 8003cdc:	2000033c 	.word	0x2000033c
 8003ce0:	2000043c 	.word	0x2000043c
 8003ce4:	0800dce8 	.word	0x0800dce8
 8003ce8:	20000001 	.word	0x20000001
			
		case 45: // Load saved parameters					
			LoadSavedParam(MemoryAddress,Params);
 8003cec:	499b      	ldr	r1, [pc, #620]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003cee:	489c      	ldr	r0, [pc, #624]	; (8003f60 <ProcessReceivedCommand+0x588>)
 8003cf0:	f7fd fd76 	bl	80017e0 <LoadSavedParam>
		
			// General Params
			DrumRadius = Params[0];	
 8003cf4:	4b99      	ldr	r3, [pc, #612]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a9a      	ldr	r2, [pc, #616]	; (8003f64 <ProcessReceivedCommand+0x58c>)
 8003cfa:	6013      	str	r3, [r2, #0]
			PullingSpeed = Params[1];
 8003cfc:	4b97      	ldr	r3, [pc, #604]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003cfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d06:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003d0a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b95      	ldr	r3, [pc, #596]	; (8003f68 <ProcessReceivedCommand+0x590>)
 8003d12:	701a      	strb	r2, [r3, #0]
			StoppingTime = Params[2];
 8003d14:	4b91      	ldr	r3, [pc, #580]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d16:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d1e:	ee17 3a90 	vmov	r3, s15
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <ProcessReceivedCommand+0x594>)
 8003d26:	801a      	strh	r2, [r3, #0]
			SampleTime = Params[3];
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003d36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	4b8c      	ldr	r3, [pc, #560]	; (8003f70 <ProcessReceivedCommand+0x598>)
 8003d3e:	701a      	strb	r2, [r3, #0]
			
			// Dropping Stage Params
			DroppingAccelDistance = Params[4];
 8003d40:	4b86      	ldr	r3, [pc, #536]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	4a8b      	ldr	r2, [pc, #556]	; (8003f74 <ProcessReceivedCommand+0x59c>)
 8003d46:	6013      	str	r3, [r2, #0]
			DroppingAccel  = Params[5];
 8003d48:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4a8a      	ldr	r2, [pc, #552]	; (8003f78 <ProcessReceivedCommand+0x5a0>)
 8003d4e:	6013      	str	r3, [r2, #0]
			DroppingDecel = Params[6];
 8003d50:	4b82      	ldr	r3, [pc, #520]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	4a89      	ldr	r2, [pc, #548]	; (8003f7c <ProcessReceivedCommand+0x5a4>)
 8003d56:	6013      	str	r3, [r2, #0]

			
			// Pulling Stage Params
			PullingAccelDistance = Params[7];
 8003d58:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	4a88      	ldr	r2, [pc, #544]	; (8003f80 <ProcessReceivedCommand+0x5a8>)
 8003d5e:	6013      	str	r3, [r2, #0]
			PullingAccel = Params[8];
 8003d60:	4b7e      	ldr	r3, [pc, #504]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a87      	ldr	r2, [pc, #540]	; (8003f84 <ProcessReceivedCommand+0x5ac>)
 8003d66:	6013      	str	r3, [r2, #0]
			PullingDecel = Params[9];
 8003d68:	4b7c      	ldr	r3, [pc, #496]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	4a86      	ldr	r2, [pc, #536]	; (8003f88 <ProcessReceivedCommand+0x5b0>)
 8003d6e:	6013      	str	r3, [r2, #0]
			
			// PID Controller params
			Kp = Params[10];
 8003d70:	4b7a      	ldr	r3, [pc, #488]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	4a85      	ldr	r2, [pc, #532]	; (8003f8c <ProcessReceivedCommand+0x5b4>)
 8003d76:	6013      	str	r3, [r2, #0]
			Ki = Params[11];
 8003d78:	4b78      	ldr	r3, [pc, #480]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	4a84      	ldr	r2, [pc, #528]	; (8003f90 <ProcessReceivedCommand+0x5b8>)
 8003d7e:	6013      	str	r3, [r2, #0]
			BrakeAccSlope = Params[12];
 8003d80:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <ProcessReceivedCommand+0x584>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4a83      	ldr	r2, [pc, #524]	; (8003f94 <ProcessReceivedCommand+0x5bc>)
 8003d86:	6013      	str	r3, [r2, #0]
			// Send to the GUI
			char ParamBuffer[60];
			TxPCLen = sprintf(ParamBuffer,"p%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4fe"
 8003d88:	4b76      	ldr	r3, [pc, #472]	; (8003f64 <ProcessReceivedCommand+0x58c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fbdb 	bl	8000548 <__aeabi_f2d>
 8003d92:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8003d96:	4b74      	ldr	r3, [pc, #464]	; (8003f68 <ProcessReceivedCommand+0x590>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461e      	mov	r6, r3
 8003d9c:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <ProcessReceivedCommand+0x594>)
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da2:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <ProcessReceivedCommand+0x598>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da8:	4b72      	ldr	r3, [pc, #456]	; (8003f74 <ProcessReceivedCommand+0x59c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fc fbcb 	bl	8000548 <__aeabi_f2d>
 8003db2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003db6:	4b70      	ldr	r3, [pc, #448]	; (8003f78 <ProcessReceivedCommand+0x5a0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fbc4 	bl	8000548 <__aeabi_f2d>
 8003dc0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003dc4:	4b6d      	ldr	r3, [pc, #436]	; (8003f7c <ProcessReceivedCommand+0x5a4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc fbbd 	bl	8000548 <__aeabi_f2d>
 8003dce:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003dd2:	4b6b      	ldr	r3, [pc, #428]	; (8003f80 <ProcessReceivedCommand+0x5a8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc fbb6 	bl	8000548 <__aeabi_f2d>
 8003ddc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003de0:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <ProcessReceivedCommand+0x5ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc fbaf 	bl	8000548 <__aeabi_f2d>
 8003dea:	e9c7 0100 	strd	r0, r1, [r7]
 8003dee:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <ProcessReceivedCommand+0x5b0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fba8 	bl	8000548 <__aeabi_f2d>
 8003df8:	4682      	mov	sl, r0
 8003dfa:	468b      	mov	fp, r1
 8003dfc:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <ProcessReceivedCommand+0x5b4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc fba1 	bl	8000548 <__aeabi_f2d>
 8003e06:	4680      	mov	r8, r0
 8003e08:	4689      	mov	r9, r1
 8003e0a:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <ProcessReceivedCommand+0x5b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fb9a 	bl	8000548 <__aeabi_f2d>
 8003e14:	4604      	mov	r4, r0
 8003e16:	460d      	mov	r5, r1
 8003e18:	4b5e      	ldr	r3, [pc, #376]	; (8003f94 <ProcessReceivedCommand+0x5bc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc fb93 	bl	8000548 <__aeabi_f2d>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003e2a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003e2e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8003e32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8003e36:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8003e3a:	ed97 7b00 	vldr	d7, [r7]
 8003e3e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003e42:	ed97 7b02 	vldr	d7, [r7, #8]
 8003e46:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003e4a:	ed97 7b04 	vldr	d7, [r7, #16]
 8003e4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003e52:	ed97 7b06 	vldr	d7, [r7, #24]
 8003e56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003e5a:	ed97 7b08 	vldr	d7, [r7, #32]
 8003e5e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e64:	9102      	str	r1, [sp, #8]
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	9600      	str	r6, [sp, #0]
 8003e6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e70:	4949      	ldr	r1, [pc, #292]	; (8003f98 <ProcessReceivedCommand+0x5c0>)
 8003e72:	f006 f859 	bl	8009f28 <siprintf>
 8003e76:	4603      	mov	r3, r0
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <ProcessReceivedCommand+0x5c4>)
 8003e7c:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime, 
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
										 Kp, Ki, BrakeAccSlope); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)ParamBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <ProcessReceivedCommand+0x5c4>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003e88:	23c8      	movs	r3, #200	; 0xc8
 8003e8a:	4845      	ldr	r0, [pc, #276]	; (8003fa0 <ProcessReceivedCommand+0x5c8>)
 8003e8c:	f004 fb85 	bl	800859a <HAL_UART_Transmit>
			break;
 8003e90:	f000 bc9f 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
		
		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 8003e94:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <ProcessReceivedCommand+0x5cc>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d006      	beq.n	8003eaa <ProcessReceivedCommand+0x4d2>
			{
				InitializeRunning (ExperimentMode);	
 8003e9c:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <ProcessReceivedCommand+0x5d0>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe f8d1 	bl	8002048 <InitializeRunning>
				break;				
 8003ea6:	f000 bc94 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				DrumRadius = MotionCode[1];
 8003eaa:	4b40      	ldr	r3, [pc, #256]	; (8003fac <ProcessReceivedCommand+0x5d4>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <ProcessReceivedCommand+0x58c>)
 8003eb0:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 8003eb2:	f7ff fac1 	bl	8003438 <CalculateRunningSpec>
				char DrumRadiusBuffer[10];
				TxPCLen = sprintf(DrumRadiusBuffer,"r11/%.2fe",DrumRadius);
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <ProcessReceivedCommand+0x58c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fb44 	bl	8000548 <__aeabi_f2d>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8003ec8:	4939      	ldr	r1, [pc, #228]	; (8003fb0 <ProcessReceivedCommand+0x5d8>)
 8003eca:	f006 f82d 	bl	8009f28 <siprintf>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <ProcessReceivedCommand+0x5c4>)
 8003ed4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DrumRadiusBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <ProcessReceivedCommand+0x5c4>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8003ee0:	23c8      	movs	r3, #200	; 0xc8
 8003ee2:	482f      	ldr	r0, [pc, #188]	; (8003fa0 <ProcessReceivedCommand+0x5c8>)
 8003ee4:	f004 fb59 	bl	800859a <HAL_UART_Transmit>
				break;
 8003ee8:	f000 bc73 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
			}			
		
		case 12: // Set DroppingAccelDistance
			if (StartRunning) // Setting is not available while running
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <ProcessReceivedCommand+0x5cc>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <ProcessReceivedCommand+0x52a>
			{
				InitializeRunning (ExperimentMode);	
 8003ef4:	4b2c      	ldr	r3, [pc, #176]	; (8003fa8 <ProcessReceivedCommand+0x5d0>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe f8a5 	bl	8002048 <InitializeRunning>
				break;
 8003efe:	f000 bc68 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <ProcessReceivedCommand+0x5d4>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <ProcessReceivedCommand+0x59c>)
 8003f08:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 8003f0a:	f7ff fa95 	bl	8003438 <CalculateRunningSpec>
				
				char DroppingAccelDistanceBuffer[10];
				TxPCLen = sprintf(DroppingAccelDistanceBuffer,"r12/%.1fe",DroppingAccelDistance);
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <ProcessReceivedCommand+0x59c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc fb18 	bl	8000548 <__aeabi_f2d>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8003f20:	4924      	ldr	r1, [pc, #144]	; (8003fb4 <ProcessReceivedCommand+0x5dc>)
 8003f22:	f006 f801 	bl	8009f28 <siprintf>
 8003f26:	4603      	mov	r3, r0
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <ProcessReceivedCommand+0x5c4>)
 8003f2c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelDistanceBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <ProcessReceivedCommand+0x5c4>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8003f38:	23c8      	movs	r3, #200	; 0xc8
 8003f3a:	4819      	ldr	r0, [pc, #100]	; (8003fa0 <ProcessReceivedCommand+0x5c8>)
 8003f3c:	f004 fb2d 	bl	800859a <HAL_UART_Transmit>
				break;
 8003f40:	f000 bc47 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
			}			
		
		case 13: // Set PullingSpeed
			// PullingSpeed is the maximum speed when homing or going to the initial Posion
			if (StartRunning) // Setting is not available while running
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <ProcessReceivedCommand+0x5cc>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d035      	beq.n	8003fb8 <ProcessReceivedCommand+0x5e0>
			{
				InitializeRunning (ExperimentMode);	
 8003f4c:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <ProcessReceivedCommand+0x5d0>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe f879 	bl	8002048 <InitializeRunning>
				break;
 8003f56:	f000 bc3c 	b.w	80047d2 <ProcessReceivedCommand+0xdfa>
 8003f5a:	bf00      	nop
 8003f5c:	200004c0 	.word	0x200004c0
 8003f60:	08040000 	.word	0x08040000
 8003f64:	20000458 	.word	0x20000458
 8003f68:	2000045d 	.word	0x2000045d
 8003f6c:	2000045e 	.word	0x2000045e
 8003f70:	2000045c 	.word	0x2000045c
 8003f74:	20000478 	.word	0x20000478
 8003f78:	20000464 	.word	0x20000464
 8003f7c:	20000468 	.word	0x20000468
 8003f80:	20000498 	.word	0x20000498
 8003f84:	2000047c 	.word	0x2000047c
 8003f88:	20000480 	.word	0x20000480
 8003f8c:	20000524 	.word	0x20000524
 8003f90:	20000528 	.word	0x20000528
 8003f94:	20000530 	.word	0x20000530
 8003f98:	0800dcf0 	.word	0x0800dcf0
 8003f9c:	2000042a 	.word	0x2000042a
 8003fa0:	2000033c 	.word	0x2000033c
 8003fa4:	20000438 	.word	0x20000438
 8003fa8:	20000004 	.word	0x20000004
 8003fac:	20000504 	.word	0x20000504
 8003fb0:	0800dd30 	.word	0x0800dd30
 8003fb4:	0800dd3c 	.word	0x0800dd3c
			}
			else
			{
				PullingSpeed = MotionCode[1];
 8003fb8:	4bab      	ldr	r3, [pc, #684]	; (8004268 <ProcessReceivedCommand+0x890>)
 8003fba:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003fc6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	4ba7      	ldr	r3, [pc, #668]	; (800426c <ProcessReceivedCommand+0x894>)
 8003fce:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8003fd0:	4ba6      	ldr	r3, [pc, #664]	; (800426c <ProcessReceivedCommand+0x894>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc faa5 	bl	8000524 <__aeabi_i2d>
 8003fda:	a3a1      	add	r3, pc, #644	; (adr r3, 8004260 <ProcessReceivedCommand+0x888>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc fb0a 	bl	80005f8 <__aeabi_dmul>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	4b9f      	ldr	r3, [pc, #636]	; (8004270 <ProcessReceivedCommand+0x898>)
 8003ff2:	f7fc fc2b 	bl	800084c <__aeabi_ddiv>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f7fc fdf3 	bl	8000be8 <__aeabi_d2f>
 8004002:	4603      	mov	r3, r0
 8004004:	4a9b      	ldr	r2, [pc, #620]	; (8004274 <ProcessReceivedCommand+0x89c>)
 8004006:	6013      	str	r3, [r2, #0]
				char PullingSpeedBuffer[10];
				TxPCLen = sprintf(PullingSpeedBuffer,"r13/%de",PullingSpeed);
 8004008:	4b98      	ldr	r3, [pc, #608]	; (800426c <ProcessReceivedCommand+0x894>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004012:	4999      	ldr	r1, [pc, #612]	; (8004278 <ProcessReceivedCommand+0x8a0>)
 8004014:	4618      	mov	r0, r3
 8004016:	f005 ff87 	bl	8009f28 <siprintf>
 800401a:	4603      	mov	r3, r0
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4b97      	ldr	r3, [pc, #604]	; (800427c <ProcessReceivedCommand+0x8a4>)
 8004020:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingSpeedBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004022:	4b96      	ldr	r3, [pc, #600]	; (800427c <ProcessReceivedCommand+0x8a4>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b29a      	uxth	r2, r3
 8004028:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800402c:	23c8      	movs	r3, #200	; 0xc8
 800402e:	4894      	ldr	r0, [pc, #592]	; (8004280 <ProcessReceivedCommand+0x8a8>)
 8004030:	f004 fab3 	bl	800859a <HAL_UART_Transmit>
				break;
 8004034:	e3cd      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}			
		
		case 14: // also start running -> unused now
			InitializeRunning (ExperimentMode);	
 8004036:	4b93      	ldr	r3, [pc, #588]	; (8004284 <ProcessReceivedCommand+0x8ac>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe f804 	bl	8002048 <InitializeRunning>
			break;
 8004040:	e3c7      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		case 15: // Set DroppingAccel
			if (StartRunning)
 8004042:	4b91      	ldr	r3, [pc, #580]	; (8004288 <ProcessReceivedCommand+0x8b0>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <ProcessReceivedCommand+0x67e>
			{
				InitializeRunning (ExperimentMode);
 800404a:	4b8e      	ldr	r3, [pc, #568]	; (8004284 <ProcessReceivedCommand+0x8ac>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fffa 	bl	8002048 <InitializeRunning>
				break;
 8004054:	e3bd      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				DroppingAccel = MotionCode[1];
 8004056:	4b84      	ldr	r3, [pc, #528]	; (8004268 <ProcessReceivedCommand+0x890>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a8c      	ldr	r2, [pc, #560]	; (800428c <ProcessReceivedCommand+0x8b4>)
 800405c:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 800405e:	f7ff f9eb 	bl	8003438 <CalculateRunningSpec>
				
				char DroppingAccelBuffer[10];
				TxPCLen = sprintf(DroppingAccelBuffer,"r15/%.3fe",DroppingAccel);
 8004062:	4b8a      	ldr	r3, [pc, #552]	; (800428c <ProcessReceivedCommand+0x8b4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fa6e 	bl	8000548 <__aeabi_f2d>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8004074:	4986      	ldr	r1, [pc, #536]	; (8004290 <ProcessReceivedCommand+0x8b8>)
 8004076:	f005 ff57 	bl	8009f28 <siprintf>
 800407a:	4603      	mov	r3, r0
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b7f      	ldr	r3, [pc, #508]	; (800427c <ProcessReceivedCommand+0x8a4>)
 8004080:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004082:	4b7e      	ldr	r3, [pc, #504]	; (800427c <ProcessReceivedCommand+0x8a4>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b29a      	uxth	r2, r3
 8004088:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800408c:	23c8      	movs	r3, #200	; 0xc8
 800408e:	487c      	ldr	r0, [pc, #496]	; (8004280 <ProcessReceivedCommand+0x8a8>)
 8004090:	f004 fa83 	bl	800859a <HAL_UART_Transmit>
				break;
 8004094:	e39d      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}		
		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 8004096:	4b7c      	ldr	r3, [pc, #496]	; (8004288 <ProcessReceivedCommand+0x8b0>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <ProcessReceivedCommand+0x6d2>
			{
				InitializeRunning (ExperimentMode);	
 800409e:	4b79      	ldr	r3, [pc, #484]	; (8004284 <ProcessReceivedCommand+0x8ac>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd ffd0 	bl	8002048 <InitializeRunning>
				break;
 80040a8:	e393      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				SampleTime = MotionCode[1];
 80040aa:	4b6f      	ldr	r3, [pc, #444]	; (8004268 <ProcessReceivedCommand+0x890>)
 80040ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80040b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80040b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b75      	ldr	r3, [pc, #468]	; (8004294 <ProcessReceivedCommand+0x8bc>)
 80040c0:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 20) // ms Set value range, 20:100ms
 80040c2:	4b74      	ldr	r3, [pc, #464]	; (8004294 <ProcessReceivedCommand+0x8bc>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b14      	cmp	r3, #20
 80040c8:	d802      	bhi.n	80040d0 <ProcessReceivedCommand+0x6f8>
				{
					SampleTime = 20;
 80040ca:	4b72      	ldr	r3, [pc, #456]	; (8004294 <ProcessReceivedCommand+0x8bc>)
 80040cc:	2214      	movs	r2, #20
 80040ce:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 80040d0:	4b70      	ldr	r3, [pc, #448]	; (8004294 <ProcessReceivedCommand+0x8bc>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b63      	cmp	r3, #99	; 0x63
 80040d6:	d902      	bls.n	80040de <ProcessReceivedCommand+0x706>
				{
					SampleTime = 100;
 80040d8:	4b6e      	ldr	r3, [pc, #440]	; (8004294 <ProcessReceivedCommand+0x8bc>)
 80040da:	2264      	movs	r2, #100	; 0x64
 80040dc:	701a      	strb	r2, [r3, #0]
				}
				char SammpleTimeBuffer[10];
				TxPCLen = sprintf(SammpleTimeBuffer,"r16/%de",SampleTime);
 80040de:	4b6d      	ldr	r3, [pc, #436]	; (8004294 <ProcessReceivedCommand+0x8bc>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80040e8:	496b      	ldr	r1, [pc, #428]	; (8004298 <ProcessReceivedCommand+0x8c0>)
 80040ea:	4618      	mov	r0, r3
 80040ec:	f005 ff1c 	bl	8009f28 <siprintf>
 80040f0:	4603      	mov	r3, r0
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	4b61      	ldr	r3, [pc, #388]	; (800427c <ProcessReceivedCommand+0x8a4>)
 80040f6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SammpleTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80040f8:	4b60      	ldr	r3, [pc, #384]	; (800427c <ProcessReceivedCommand+0x8a4>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8004102:	23c8      	movs	r3, #200	; 0xc8
 8004104:	485e      	ldr	r0, [pc, #376]	; (8004280 <ProcessReceivedCommand+0x8a8>)
 8004106:	f004 fa48 	bl	800859a <HAL_UART_Transmit>
				break;
 800410a:	e362      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}			
		
		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 800410c:	f002 f961 	bl	80063d2 <HAL_NVIC_SystemReset>
			break;
 8004110:	e35f      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 8004112:	4b55      	ldr	r3, [pc, #340]	; (8004268 <ProcessReceivedCommand+0x890>)
 8004114:	edd3 7a01 	vldr	s15, [r3, #4]
 8004118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800411c:	eef4 7a47 	vcmp.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	d105      	bne.n	8004132 <ProcessReceivedCommand+0x75a>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8004126:	2201      	movs	r2, #1
 8004128:	2110      	movs	r1, #16
 800412a:	485c      	ldr	r0, [pc, #368]	; (800429c <ProcessReceivedCommand+0x8c4>)
 800412c:	f002 fe8c 	bl	8006e48 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 8004130:	e34f      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8004132:	2200      	movs	r2, #0
 8004134:	2110      	movs	r1, #16
 8004136:	4859      	ldr	r0, [pc, #356]	; (800429c <ProcessReceivedCommand+0x8c4>)
 8004138:	f002 fe86 	bl	8006e48 <HAL_GPIO_WritePin>
			break;
 800413c:	e349      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		case 20: // Set Step Pulse Cmd
			if (StartRunning)
 800413e:	4b52      	ldr	r3, [pc, #328]	; (8004288 <ProcessReceivedCommand+0x8b0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <ProcessReceivedCommand+0x77a>
			{
				InitializeRunning (ExperimentMode);	
 8004146:	4b4f      	ldr	r3, [pc, #316]	; (8004284 <ProcessReceivedCommand+0x8ac>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd ff7c 	bl	8002048 <InitializeRunning>
				break;
 8004150:	e33f      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				StepPulseCmd = MotionCode[2];
 8004152:	4b45      	ldr	r3, [pc, #276]	; (8004268 <ProcessReceivedCommand+0x890>)
 8004154:	edd3 7a02 	vldr	s15, [r3, #8]
 8004158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800415c:	ee17 2a90 	vmov	r2, s15
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <ProcessReceivedCommand+0x8c8>)
 8004162:	601a      	str	r2, [r3, #0]
				if (MotionCode[1] == 1) // CW, +
 8004164:	4b40      	ldr	r3, [pc, #256]	; (8004268 <ProcessReceivedCommand+0x890>)
 8004166:	edd3 7a01 	vldr	s15, [r3, #4]
 800416a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800416e:	eef4 7a47 	vcmp.f32	s15, s14
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	d110      	bne.n	800419a <ProcessReceivedCommand+0x7c2>
				{		
					Direction = true;
 8004178:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <ProcessReceivedCommand+0x8cc>)
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
					PRIsToggled = false;
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <ProcessReceivedCommand+0x8d0>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = true;
 8004184:	4b49      	ldr	r3, [pc, #292]	; (80042ac <ProcessReceivedCommand+0x8d4>)
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
					// Calculate Delta Pulse

					//Timer3CountPeriod = (int)((float)(120000000.0/((JogSpeed)*(float)EncoderResolution)) + 0.5);
					//Start Running
					StartPulseGenerating(Direction);
 800418a:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <ProcessReceivedCommand+0x8cc>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd fcaa 	bl	8001ae8 <StartPulseGenerating>
					DisableSTOP();
 8004194:	f7fd f868 	bl	8001268 <DisableSTOP>
					//Timer3CountPeriod = (int)((float)(120000000.0/((JogSpeed)*(float)EncoderResolution)) + 0.5);
					//Start Running
					StartPulseGenerating(Direction);
					DisableSTOP();
				}		  
				break;
 8004198:	e31b      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
					Direction = false;
 800419a:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <ProcessReceivedCommand+0x8cc>)
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
					PRIsToggled = true;
 80041a0:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <ProcessReceivedCommand+0x8d0>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = true;
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <ProcessReceivedCommand+0x8d4>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	701a      	strb	r2, [r3, #0]
					StartPulseGenerating(Direction);
 80041ac:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <ProcessReceivedCommand+0x8cc>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fd fc99 	bl	8001ae8 <StartPulseGenerating>
					DisableSTOP();
 80041b6:	f7fd f857 	bl	8001268 <DisableSTOP>
				break;
 80041ba:	e30a      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
		case 27: // Set Running Mode
			if(StartRunning) // Setting is not available while running
 80041bc:	4b32      	ldr	r3, [pc, #200]	; (8004288 <ProcessReceivedCommand+0x8b0>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <ProcessReceivedCommand+0x7f8>
			{
				InitializeRunning(ExperimentMode);
 80041c4:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <ProcessReceivedCommand+0x8ac>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd ff3d 	bl	8002048 <InitializeRunning>
				break;
 80041ce:	e300      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				if (MotionCode[1] == 1) // RunningMode = true => Automatic Running
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <ProcessReceivedCommand+0x890>)
 80041d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80041d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041da:	eef4 7a47 	vcmp.f32	s15, s14
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d103      	bne.n	80041ec <ProcessReceivedCommand+0x814>
				{
					RunningMode = true; // Automatic	
 80041e4:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <ProcessReceivedCommand+0x8d8>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <ProcessReceivedCommand+0x81a>
				}				 			
				else
				{
					RunningMode = false; // Manual
 80041ec:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <ProcessReceivedCommand+0x8d8>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
				}					
				char SammpleTimeBuffer[10];
				TxPCLen = sprintf(SammpleTimeBuffer,"g27/%de",RunningMode);
 80041f2:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <ProcessReceivedCommand+0x8d8>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80041fc:	492d      	ldr	r1, [pc, #180]	; (80042b4 <ProcessReceivedCommand+0x8dc>)
 80041fe:	4618      	mov	r0, r3
 8004200:	f005 fe92 	bl	8009f28 <siprintf>
 8004204:	4603      	mov	r3, r0
 8004206:	b2da      	uxtb	r2, r3
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <ProcessReceivedCommand+0x8a4>)
 800420a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SammpleTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <ProcessReceivedCommand+0x8a4>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b29a      	uxth	r2, r3
 8004212:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8004216:	23c8      	movs	r3, #200	; 0xc8
 8004218:	4819      	ldr	r0, [pc, #100]	; (8004280 <ProcessReceivedCommand+0x8a8>)
 800421a:	f004 f9be 	bl	800859a <HAL_UART_Transmit>
				break;
 800421e:	e2d8      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			
		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <ProcessReceivedCommand+0x8b0>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <ProcessReceivedCommand+0x85c>
			{
				InitializeRunning(ExperimentMode);
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <ProcessReceivedCommand+0x8ac>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7fd ff0b 	bl	8002048 <InitializeRunning>
				break;
 8004232:	e2ce      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				IsJogControl = false;
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <ProcessReceivedCommand+0x8e0>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
				StopPulseGenerating();
 800423a:	f7fd fc37 	bl	8001aac <StopPulseGenerating>
				JoggingMoveUp = false;
 800423e:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <ProcessReceivedCommand+0x8e4>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
				//HAL_TIM_IC_Stop()
				break;
 8004244:	e2c5      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
//				}
//				break;
//			}
			
		case 31: // Set Experiment Mode
			if (StartRunning) // Setting is not available while running
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <ProcessReceivedCommand+0x8b0>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d038      	beq.n	80042c0 <ProcessReceivedCommand+0x8e8>
			{
				InitializeRunning(ExperimentMode);
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <ProcessReceivedCommand+0x8ac>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fef8 	bl	8002048 <InitializeRunning>
				break;
 8004258:	e2bb      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
 800425a:	bf00      	nop
 800425c:	f3af 8000 	nop.w
 8004260:	9999999a 	.word	0x9999999a
 8004264:	3fb99999 	.word	0x3fb99999
 8004268:	20000504 	.word	0x20000504
 800426c:	2000045d 	.word	0x2000045d
 8004270:	40080000 	.word	0x40080000
 8004274:	20000460 	.word	0x20000460
 8004278:	0800dd48 	.word	0x0800dd48
 800427c:	2000042a 	.word	0x2000042a
 8004280:	2000033c 	.word	0x2000033c
 8004284:	20000004 	.word	0x20000004
 8004288:	20000438 	.word	0x20000438
 800428c:	20000464 	.word	0x20000464
 8004290:	0800dd50 	.word	0x0800dd50
 8004294:	2000045c 	.word	0x2000045c
 8004298:	0800dd5c 	.word	0x0800dd5c
 800429c:	40020800 	.word	0x40020800
 80042a0:	200004b4 	.word	0x200004b4
 80042a4:	20000439 	.word	0x20000439
 80042a8:	2000044b 	.word	0x2000044b
 80042ac:	20000440 	.word	0x20000440
 80042b0:	2000044a 	.word	0x2000044a
 80042b4:	0800dd64 	.word	0x0800dd64
 80042b8:	20000448 	.word	0x20000448
 80042bc:	20000445 	.word	0x20000445
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 80042c0:	4ba3      	ldr	r3, [pc, #652]	; (8004550 <ProcessReceivedCommand+0xb78>)
 80042c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80042c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80042ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b9f      	ldr	r3, [pc, #636]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 80042d6:	701a      	strb	r2, [r3, #0]
				char SetModeBuff[8];
				TxPCLen = sprintf(SetModeBuff,"m%de",ExperimentMode);
 80042d8:	4b9e      	ldr	r3, [pc, #632]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80042e2:	499d      	ldr	r1, [pc, #628]	; (8004558 <ProcessReceivedCommand+0xb80>)
 80042e4:	4618      	mov	r0, r3
 80042e6:	f005 fe1f 	bl	8009f28 <siprintf>
 80042ea:	4603      	mov	r3, r0
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b9b      	ldr	r3, [pc, #620]	; (800455c <ProcessReceivedCommand+0xb84>)
 80042f0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SetModeBuff,TxPCLen,100); // Send to uart6 to check the params are set or not	
 80042f2:	4b9a      	ldr	r3, [pc, #616]	; (800455c <ProcessReceivedCommand+0xb84>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80042fc:	2364      	movs	r3, #100	; 0x64
 80042fe:	4898      	ldr	r0, [pc, #608]	; (8004560 <ProcessReceivedCommand+0xb88>)
 8004300:	f004 f94b 	bl	800859a <HAL_UART_Transmit>
				break;
 8004304:	e265      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			
		case 32: // Set Pulling Accelerating Distance; Pulling Mode
			if (StartRunning) // Setting is not available while running
 8004306:	4b97      	ldr	r3, [pc, #604]	; (8004564 <ProcessReceivedCommand+0xb8c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <ProcessReceivedCommand+0x942>
			{
				InitializeRunning(ExperimentMode);
 800430e:	4b91      	ldr	r3, [pc, #580]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fe98 	bl	8002048 <InitializeRunning>
				break;
 8004318:	e25b      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				PullingAccelDistance = MotionCode[1];
 800431a:	4b8d      	ldr	r3, [pc, #564]	; (8004550 <ProcessReceivedCommand+0xb78>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4a92      	ldr	r2, [pc, #584]	; (8004568 <ProcessReceivedCommand+0xb90>)
 8004320:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 8004322:	f7ff f889 	bl	8003438 <CalculateRunningSpec>
				
				char PullingDistanceBuffer[10];
				TxPCLen = sprintf(PullingDistanceBuffer,"r32/%.1fe",PullingAccelDistance);
 8004326:	4b90      	ldr	r3, [pc, #576]	; (8004568 <ProcessReceivedCommand+0xb90>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f90c 	bl	8000548 <__aeabi_f2d>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 8004338:	498c      	ldr	r1, [pc, #560]	; (800456c <ProcessReceivedCommand+0xb94>)
 800433a:	f005 fdf5 	bl	8009f28 <siprintf>
 800433e:	4603      	mov	r3, r0
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b86      	ldr	r3, [pc, #536]	; (800455c <ProcessReceivedCommand+0xb84>)
 8004344:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDistanceBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not			
 8004346:	4b85      	ldr	r3, [pc, #532]	; (800455c <ProcessReceivedCommand+0xb84>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b29a      	uxth	r2, r3
 800434c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8004350:	2364      	movs	r3, #100	; 0x64
 8004352:	4883      	ldr	r0, [pc, #524]	; (8004560 <ProcessReceivedCommand+0xb88>)
 8004354:	f004 f921 	bl	800859a <HAL_UART_Transmit>
				break;
 8004358:	e23b      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			
		case 33: // Set Pulling AccRef in Pulling Mode
			if (StartRunning)// Setting is not available while running
 800435a:	4b82      	ldr	r3, [pc, #520]	; (8004564 <ProcessReceivedCommand+0xb8c>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <ProcessReceivedCommand+0x996>
			{
				InitializeRunning(ExperimentMode);
 8004362:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd fe6e 	bl	8002048 <InitializeRunning>
				break;
 800436c:	e231      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				PullingAccel = MotionCode[1];
 800436e:	4b78      	ldr	r3, [pc, #480]	; (8004550 <ProcessReceivedCommand+0xb78>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <ProcessReceivedCommand+0xb98>)
 8004374:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 8004376:	f7ff f85f 	bl	8003438 <CalculateRunningSpec>
				
				char AccRefPullingBuffer[10];
				TxPCLen = sprintf(AccRefPullingBuffer,"r33/%.2fe",PullingAccel);
 800437a:	4b7d      	ldr	r3, [pc, #500]	; (8004570 <ProcessReceivedCommand+0xb98>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f8e2 	bl	8000548 <__aeabi_f2d>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800438c:	4979      	ldr	r1, [pc, #484]	; (8004574 <ProcessReceivedCommand+0xb9c>)
 800438e:	f005 fdcb 	bl	8009f28 <siprintf>
 8004392:	4603      	mov	r3, r0
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4b71      	ldr	r3, [pc, #452]	; (800455c <ProcessReceivedCommand+0xb84>)
 8004398:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)AccRefPullingBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 800439a:	4b70      	ldr	r3, [pc, #448]	; (800455c <ProcessReceivedCommand+0xb84>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80043a4:	2364      	movs	r3, #100	; 0x64
 80043a6:	486e      	ldr	r0, [pc, #440]	; (8004560 <ProcessReceivedCommand+0xb88>)
 80043a8:	f004 f8f7 	bl	800859a <HAL_UART_Transmit>
				break;
 80043ac:	e211      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			
		case 34: // Set DroppingDecel, m/s2
			if (StartRunning)// Setting is not available while running
 80043ae:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <ProcessReceivedCommand+0xb8c>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <ProcessReceivedCommand+0x9ea>
			{
				InitializeRunning(ExperimentMode);				
 80043b6:	4b67      	ldr	r3, [pc, #412]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fd fe44 	bl	8002048 <InitializeRunning>
				
				char DroppingDecelBuffer[10];
				TxPCLen = sprintf(DroppingDecelBuffer,"r34/%.2fe",DroppingDecel);
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}
			break;		
 80043c0:	e207      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				DroppingDecel = MotionCode[1];
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <ProcessReceivedCommand+0xb78>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4a6c      	ldr	r2, [pc, #432]	; (8004578 <ProcessReceivedCommand+0xba0>)
 80043c8:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 80043ca:	f7ff f835 	bl	8003438 <CalculateRunningSpec>
				TxPCLen = sprintf(DroppingDecelBuffer,"r34/%.2fe",DroppingDecel);
 80043ce:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <ProcessReceivedCommand+0xba0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fc f8b8 	bl	8000548 <__aeabi_f2d>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 80043e0:	4966      	ldr	r1, [pc, #408]	; (800457c <ProcessReceivedCommand+0xba4>)
 80043e2:	f005 fda1 	bl	8009f28 <siprintf>
 80043e6:	4603      	mov	r3, r0
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <ProcessReceivedCommand+0xb84>)
 80043ec:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 80043ee:	4b5b      	ldr	r3, [pc, #364]	; (800455c <ProcessReceivedCommand+0xb84>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80043f8:	2364      	movs	r3, #100	; 0x64
 80043fa:	4859      	ldr	r0, [pc, #356]	; (8004560 <ProcessReceivedCommand+0xb88>)
 80043fc:	f004 f8cd 	bl	800859a <HAL_UART_Transmit>
			break;		
 8004400:	e1e7      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			
		case 35: // Set Pulling Deceleration in m/s2
			if (StartRunning)// Setting is not available while running
 8004402:	4b58      	ldr	r3, [pc, #352]	; (8004564 <ProcessReceivedCommand+0xb8c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <ProcessReceivedCommand+0xa3e>
			{
				InitializeRunning(ExperimentMode);				
 800440a:	4b52      	ldr	r3, [pc, #328]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fe1a 	bl	8002048 <InitializeRunning>
				
				char PullingDecelBuffer[10];
				TxPCLen = sprintf(PullingDecelBuffer,"r35/%.2fe",PullingDecel);
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}
			break;
 8004414:	e1dd      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				PullingDecel = MotionCode[1];
 8004416:	4b4e      	ldr	r3, [pc, #312]	; (8004550 <ProcessReceivedCommand+0xb78>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a59      	ldr	r2, [pc, #356]	; (8004580 <ProcessReceivedCommand+0xba8>)
 800441c:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 800441e:	f7ff f80b 	bl	8003438 <CalculateRunningSpec>
				TxPCLen = sprintf(PullingDecelBuffer,"r35/%.2fe",PullingDecel);
 8004422:	4b57      	ldr	r3, [pc, #348]	; (8004580 <ProcessReceivedCommand+0xba8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc f88e 	bl	8000548 <__aeabi_f2d>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8004434:	4953      	ldr	r1, [pc, #332]	; (8004584 <ProcessReceivedCommand+0xbac>)
 8004436:	f005 fd77 	bl	8009f28 <siprintf>
 800443a:	4603      	mov	r3, r0
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <ProcessReceivedCommand+0xb84>)
 8004440:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 8004442:	4b46      	ldr	r3, [pc, #280]	; (800455c <ProcessReceivedCommand+0xb84>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b29a      	uxth	r2, r3
 8004448:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800444c:	2364      	movs	r3, #100	; 0x64
 800444e:	4844      	ldr	r0, [pc, #272]	; (8004560 <ProcessReceivedCommand+0xb88>)
 8004450:	f004 f8a3 	bl	800859a <HAL_UART_Transmit>
			break;
 8004454:	e1bd      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			
		case 36: // Resource
			break;
			
		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 8004456:	4b43      	ldr	r3, [pc, #268]	; (8004564 <ProcessReceivedCommand+0xb8c>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <ProcessReceivedCommand+0xa92>
			{
				InitializeRunning(ExperimentMode);
 800445e:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd fdf0 	bl	8002048 <InitializeRunning>
				break;
 8004468:	e1b3      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				StoppingTime = MotionCode[1];
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <ProcessReceivedCommand+0xb78>)
 800446c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004474:	ee17 3a90 	vmov	r3, s15
 8004478:	b29a      	uxth	r2, r3
 800447a:	4b43      	ldr	r3, [pc, #268]	; (8004588 <ProcessReceivedCommand+0xbb0>)
 800447c:	801a      	strh	r2, [r3, #0]
				if (StoppingTime <= 2000) // ms
 800447e:	4b42      	ldr	r3, [pc, #264]	; (8004588 <ProcessReceivedCommand+0xbb0>)
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004486:	d803      	bhi.n	8004490 <ProcessReceivedCommand+0xab8>
				{
					StoppingTime = 2000; // min = 2000 ms
 8004488:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <ProcessReceivedCommand+0xbb0>)
 800448a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800448e:	801a      	strh	r2, [r3, #0]
				}
				if (StoppingTime >= 10000)
 8004490:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <ProcessReceivedCommand+0xbb0>)
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	f242 720f 	movw	r2, #9999	; 0x270f
 8004498:	4293      	cmp	r3, r2
 800449a:	d903      	bls.n	80044a4 <ProcessReceivedCommand+0xacc>
				{
					StoppingTime = 10000; // max = 10000 ms
 800449c:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <ProcessReceivedCommand+0xbb0>)
 800449e:	f242 7210 	movw	r2, #10000	; 0x2710
 80044a2:	801a      	strh	r2, [r3, #0]
				}
				char StoppingTimeBuffer[10];
				TxPCLen = sprintf(StoppingTimeBuffer,"r37/%de",StoppingTime);
 80044a4:	4b38      	ldr	r3, [pc, #224]	; (8004588 <ProcessReceivedCommand+0xbb0>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044ae:	4937      	ldr	r1, [pc, #220]	; (800458c <ProcessReceivedCommand+0xbb4>)
 80044b0:	4618      	mov	r0, r3
 80044b2:	f005 fd39 	bl	8009f28 <siprintf>
 80044b6:	4603      	mov	r3, r0
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b28      	ldr	r3, [pc, #160]	; (800455c <ProcessReceivedCommand+0xb84>)
 80044bc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)StoppingTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80044be:	4b27      	ldr	r3, [pc, #156]	; (800455c <ProcessReceivedCommand+0xb84>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80044c8:	23c8      	movs	r3, #200	; 0xc8
 80044ca:	4825      	ldr	r0, [pc, #148]	; (8004560 <ProcessReceivedCommand+0xb88>)
 80044cc:	f004 f865 	bl	800859a <HAL_UART_Transmit>
				break;
 80044d0:	e17f      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <ProcessReceivedCommand+0xb8c>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <ProcessReceivedCommand+0xb0e>
			{
				InitializeRunning(ExperimentMode);
 80044da:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd fdb2 	bl	8002048 <InitializeRunning>
				break;
 80044e4:	e175      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				IsHoming = true;
 80044e6:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <ProcessReceivedCommand+0xbb8>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]

				Direction = false; // false = move up, true = move down			
 80044ec:	4b29      	ldr	r3, [pc, #164]	; (8004594 <ProcessReceivedCommand+0xbbc>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80044f2:	4b29      	ldr	r3, [pc, #164]	; (8004598 <ProcessReceivedCommand+0xbc0>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
				JoggingMoveUp = true;
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <ProcessReceivedCommand+0xbc4>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 80044fe:	f7fc feb3 	bl	8001268 <DisableSTOP>
				StartPulseGenerating(Direction);
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <ProcessReceivedCommand+0xbbc>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd faee 	bl	8001ae8 <StartPulseGenerating>
			}
			break;
 800450c:	e161      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			
		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <ProcessReceivedCommand+0xb8c>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <ProcessReceivedCommand+0xb4a>
			{
				InitializeRunning(ExperimentMode);
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <ProcessReceivedCommand+0xb7c>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd fd94 	bl	8002048 <InitializeRunning>
				break;
 8004520:	e157      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <ProcessReceivedCommand+0xb78>)
 8004524:	edd3 7a01 	vldr	s15, [r3, #4]
 8004528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800452c:	eef4 7a47 	vcmp.f32	s15, s14
 8004530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004534:	d13a      	bne.n	80045ac <ProcessReceivedCommand+0xbd4>
				{
					MotorDriver = true;
 8004536:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <ProcessReceivedCommand+0xbc8>)
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 800453c:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <ProcessReceivedCommand+0xbcc>)
 800453e:	221d      	movs	r2, #29
 8004540:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <ProcessReceivedCommand+0xbd0>)
 8004544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004548:	801a      	strh	r2, [r3, #0]
					InitParams ();
 800454a:	f7ff f9d1 	bl	80038f0 <InitParams>
 800454e:	e039      	b.n	80045c4 <ProcessReceivedCommand+0xbec>
 8004550:	20000504 	.word	0x20000504
 8004554:	20000004 	.word	0x20000004
 8004558:	0800dd6c 	.word	0x0800dd6c
 800455c:	2000042a 	.word	0x2000042a
 8004560:	2000033c 	.word	0x2000033c
 8004564:	20000438 	.word	0x20000438
 8004568:	20000498 	.word	0x20000498
 800456c:	0800dd74 	.word	0x0800dd74
 8004570:	2000047c 	.word	0x2000047c
 8004574:	0800dd80 	.word	0x0800dd80
 8004578:	20000468 	.word	0x20000468
 800457c:	0800dd8c 	.word	0x0800dd8c
 8004580:	20000480 	.word	0x20000480
 8004584:	0800dd98 	.word	0x0800dd98
 8004588:	2000045e 	.word	0x2000045e
 800458c:	0800dda4 	.word	0x0800dda4
 8004590:	20000447 	.word	0x20000447
 8004594:	20000439 	.word	0x20000439
 8004598:	2000044b 	.word	0x2000044b
 800459c:	20000445 	.word	0x20000445
 80045a0:	20000003 	.word	0x20000003
 80045a4:	20000000 	.word	0x20000000
 80045a8:	2000000a 	.word	0x2000000a
				}
				else // ASDA A3
				{
					MotorDriver = false;
 80045ac:	4b8c      	ldr	r3, [pc, #560]	; (80047e0 <ProcessReceivedCommand+0xe08>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 80045b2:	4b8c      	ldr	r3, [pc, #560]	; (80047e4 <ProcessReceivedCommand+0xe0c>)
 80045b4:	2211      	movs	r2, #17
 80045b6:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 80045b8:	4b8b      	ldr	r3, [pc, #556]	; (80047e8 <ProcessReceivedCommand+0xe10>)
 80045ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045be:	801a      	strh	r2, [r3, #0]
					InitParams ();
 80045c0:	f7ff f996 	bl	80038f0 <InitParams>
					// For ASDA Drier, read 1 register => receive 9 bytes	
					// read 2 registers => receive 13 bytes
				}
				char DriverTypeBuffer[10];
				TxPCLen = sprintf(DriverTypeBuffer,"g39/%de",MotorDriver);
 80045c4:	4b86      	ldr	r3, [pc, #536]	; (80047e0 <ProcessReceivedCommand+0xe08>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045ce:	4987      	ldr	r1, [pc, #540]	; (80047ec <ProcessReceivedCommand+0xe14>)
 80045d0:	4618      	mov	r0, r3
 80045d2:	f005 fca9 	bl	8009f28 <siprintf>
 80045d6:	4603      	mov	r3, r0
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4b85      	ldr	r3, [pc, #532]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 80045dc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DriverTypeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80045de:	4b84      	ldr	r3, [pc, #528]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80045e8:	23c8      	movs	r3, #200	; 0xc8
 80045ea:	4882      	ldr	r0, [pc, #520]	; (80047f4 <ProcessReceivedCommand+0xe1c>)
 80045ec:	f003 ffd5 	bl	800859a <HAL_UART_Transmit>
			}			
			break;
 80045f0:	e0ef      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		
		case 41: // Set Fly Acc slope
			if (StartRunning)// Setting is not available while running
 80045f2:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <ProcessReceivedCommand+0xe20>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <ProcessReceivedCommand+0xc2e>
			{
				InitializeRunning(ExperimentMode);				
 80045fa:	4b80      	ldr	r3, [pc, #512]	; (80047fc <ProcessReceivedCommand+0xe24>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd fd22 	bl	8002048 <InitializeRunning>
				char FlyAccSlopeBuffer[10];
				TxPCLen = sprintf(FlyAccSlopeBuffer,"r41/%.3fe",FlyAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)FlyAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
			}
			
			break;
 8004604:	e0e5      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				FlyAccSlope = MotionCode[1];
 8004606:	4b7e      	ldr	r3, [pc, #504]	; (8004800 <ProcessReceivedCommand+0xe28>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4a7e      	ldr	r2, [pc, #504]	; (8004804 <ProcessReceivedCommand+0xe2c>)
 800460c:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(FlyAccSlopeBuffer,"r41/%.3fe",FlyAccSlope);
 800460e:	4b7d      	ldr	r3, [pc, #500]	; (8004804 <ProcessReceivedCommand+0xe2c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fb ff98 	bl	8000548 <__aeabi_f2d>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8004620:	4979      	ldr	r1, [pc, #484]	; (8004808 <ProcessReceivedCommand+0xe30>)
 8004622:	f005 fc81 	bl	8009f28 <siprintf>
 8004626:	4603      	mov	r3, r0
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4b71      	ldr	r3, [pc, #452]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 800462c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)FlyAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 800462e:	4b70      	ldr	r3, [pc, #448]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b29a      	uxth	r2, r3
 8004634:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004638:	2364      	movs	r3, #100	; 0x64
 800463a:	486e      	ldr	r0, [pc, #440]	; (80047f4 <ProcessReceivedCommand+0xe1c>)
 800463c:	f003 ffad 	bl	800859a <HAL_UART_Transmit>
			break;
 8004640:	e0c7      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		
		case 42: // Set Ki
			if (StartRunning)// Setting is not available while running
 8004642:	4b6d      	ldr	r3, [pc, #436]	; (80047f8 <ProcessReceivedCommand+0xe20>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <ProcessReceivedCommand+0xc7e>
			{
				InitializeRunning(ExperimentMode);				
 800464a:	4b6c      	ldr	r3, [pc, #432]	; (80047fc <ProcessReceivedCommand+0xe24>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fcfa 	bl	8002048 <InitializeRunning>
				
				char KiBuffer[10];
				TxPCLen = sprintf(KiBuffer,"r42/%.4fe",Ki);
				HAL_UART_Transmit(&huart6,(uint8_t *)KiBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 8004654:	e0bd      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				Ki = MotionCode[1];
 8004656:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <ProcessReceivedCommand+0xe28>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4a6c      	ldr	r2, [pc, #432]	; (800480c <ProcessReceivedCommand+0xe34>)
 800465c:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(KiBuffer,"r42/%.4fe",Ki);
 800465e:	4b6b      	ldr	r3, [pc, #428]	; (800480c <ProcessReceivedCommand+0xe34>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fb ff70 	bl	8000548 <__aeabi_f2d>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8004670:	4967      	ldr	r1, [pc, #412]	; (8004810 <ProcessReceivedCommand+0xe38>)
 8004672:	f005 fc59 	bl	8009f28 <siprintf>
 8004676:	4603      	mov	r3, r0
 8004678:	b2da      	uxtb	r2, r3
 800467a:	4b5d      	ldr	r3, [pc, #372]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 800467c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)KiBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 800467e:	4b5c      	ldr	r3, [pc, #368]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b29a      	uxth	r2, r3
 8004684:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004688:	2364      	movs	r3, #100	; 0x64
 800468a:	485a      	ldr	r0, [pc, #360]	; (80047f4 <ProcessReceivedCommand+0xe1c>)
 800468c:	f003 ff85 	bl	800859a <HAL_UART_Transmit>
			break;
 8004690:	e09f      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			
		case 43: //Set Kd
			if (StartRunning)// Setting is not available while running
 8004692:	4b59      	ldr	r3, [pc, #356]	; (80047f8 <ProcessReceivedCommand+0xe20>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <ProcessReceivedCommand+0xcce>
			{
				InitializeRunning(ExperimentMode);				
 800469a:	4b58      	ldr	r3, [pc, #352]	; (80047fc <ProcessReceivedCommand+0xe24>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fd fcd2 	bl	8002048 <InitializeRunning>
				
				char BrakeAccSlopeBuffer[10];
				TxPCLen = sprintf(BrakeAccSlopeBuffer,"r43/%.4fe",BrakeAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)BrakeAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
			}			
			break;
 80046a4:	e095      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				BrakeAccSlope = MotionCode[1];
 80046a6:	4b56      	ldr	r3, [pc, #344]	; (8004800 <ProcessReceivedCommand+0xe28>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4a5a      	ldr	r2, [pc, #360]	; (8004814 <ProcessReceivedCommand+0xe3c>)
 80046ac:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(BrakeAccSlopeBuffer,"r43/%.4fe",BrakeAccSlope);
 80046ae:	4b59      	ldr	r3, [pc, #356]	; (8004814 <ProcessReceivedCommand+0xe3c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb ff48 	bl	8000548 <__aeabi_f2d>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80046c0:	4955      	ldr	r1, [pc, #340]	; (8004818 <ProcessReceivedCommand+0xe40>)
 80046c2:	f005 fc31 	bl	8009f28 <siprintf>
 80046c6:	4603      	mov	r3, r0
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b49      	ldr	r3, [pc, #292]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 80046cc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)BrakeAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 80046ce:	4b48      	ldr	r3, [pc, #288]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80046d8:	2364      	movs	r3, #100	; 0x64
 80046da:	4846      	ldr	r0, [pc, #280]	; (80047f4 <ProcessReceivedCommand+0xe1c>)
 80046dc:	f003 ff5d 	bl	800859a <HAL_UART_Transmit>
			break;
 80046e0:	e077      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		
		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 80046e2:	4b4e      	ldr	r3, [pc, #312]	; (800481c <ProcessReceivedCommand+0xe44>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4e      	ldr	r2, [pc, #312]	; (8004820 <ProcessReceivedCommand+0xe48>)
 80046e8:	6013      	str	r3, [r2, #0]
			//PositionPulseCmd = 0;
			break;
 80046ea:	e072      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		
		case 47: // Set open/Closed loop control Mode
			if (StartRunning)// Setting is not available while running
 80046ec:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <ProcessReceivedCommand+0xe20>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <ProcessReceivedCommand+0xd28>
			{
				InitializeRunning(ExperimentMode);				
 80046f4:	4b41      	ldr	r3, [pc, #260]	; (80047fc <ProcessReceivedCommand+0xe24>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd fca5 	bl	8002048 <InitializeRunning>
				
				char ControlLoopBuffer[10];
				TxPCLen = sprintf(ControlLoopBuffer,"g47/%de",IsOpenLoopControl);
				HAL_UART_Transmit(&huart6,(uint8_t *)ControlLoopBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 80046fe:	e068      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				if(MotionCode[1] == 0) // Set to Closed loop control
 8004700:	4b3f      	ldr	r3, [pc, #252]	; (8004800 <ProcessReceivedCommand+0xe28>)
 8004702:	edd3 7a01 	vldr	s15, [r3, #4]
 8004706:	eef5 7a40 	vcmp.f32	s15, #0.0
 800470a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470e:	d103      	bne.n	8004718 <ProcessReceivedCommand+0xd40>
					IsOpenLoopControl = false;
 8004710:	4b44      	ldr	r3, [pc, #272]	; (8004824 <ProcessReceivedCommand+0xe4c>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e002      	b.n	800471e <ProcessReceivedCommand+0xd46>
					IsOpenLoopControl = true;
 8004718:	4b42      	ldr	r3, [pc, #264]	; (8004824 <ProcessReceivedCommand+0xe4c>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ControlLoopBuffer,"g47/%de",IsOpenLoopControl);
 800471e:	4b41      	ldr	r3, [pc, #260]	; (8004824 <ProcessReceivedCommand+0xe4c>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004728:	493f      	ldr	r1, [pc, #252]	; (8004828 <ProcessReceivedCommand+0xe50>)
 800472a:	4618      	mov	r0, r3
 800472c:	f005 fbfc 	bl	8009f28 <siprintf>
 8004730:	4603      	mov	r3, r0
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 8004736:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ControlLoopBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 8004738:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b29a      	uxth	r2, r3
 800473e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004742:	2364      	movs	r3, #100	; 0x64
 8004744:	482b      	ldr	r0, [pc, #172]	; (80047f4 <ProcessReceivedCommand+0xe1c>)
 8004746:	f003 ff28 	bl	800859a <HAL_UART_Transmit>
			break;
 800474a:	e042      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			
		case 48: // turn on/off the software upper limit
			if (StartRunning)// Setting is not available while running
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <ProcessReceivedCommand+0xe20>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <ProcessReceivedCommand+0xd88>
			{
				InitializeRunning(ExperimentMode);				
 8004754:	4b29      	ldr	r3, [pc, #164]	; (80047fc <ProcessReceivedCommand+0xe24>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fd fc75 	bl	8002048 <InitializeRunning>
				
				char SoftWareLimitBuffer[10];
				TxPCLen = sprintf(SoftWareLimitBuffer,"g48/%de",SoftWareLimit);
				HAL_UART_Transmit(&huart6,(uint8_t *)SoftWareLimitBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 800475e:	e038      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
				if(MotionCode[1] == 1) // turn on software limit
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <ProcessReceivedCommand+0xe28>)
 8004762:	edd3 7a01 	vldr	s15, [r3, #4]
 8004766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476a:	eef4 7a47 	vcmp.f32	s15, s14
 800476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004772:	d103      	bne.n	800477c <ProcessReceivedCommand+0xda4>
					SoftWareLimit = true;
 8004774:	4b2d      	ldr	r3, [pc, #180]	; (800482c <ProcessReceivedCommand+0xe54>)
 8004776:	2201      	movs	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e002      	b.n	8004782 <ProcessReceivedCommand+0xdaa>
					SoftWareLimit = false;
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <ProcessReceivedCommand+0xe54>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(SoftWareLimitBuffer,"g48/%de",SoftWareLimit);
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <ProcessReceivedCommand+0xe54>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800478c:	4928      	ldr	r1, [pc, #160]	; (8004830 <ProcessReceivedCommand+0xe58>)
 800478e:	4618      	mov	r0, r3
 8004790:	f005 fbca 	bl	8009f28 <siprintf>
 8004794:	4603      	mov	r3, r0
 8004796:	b2da      	uxtb	r2, r3
 8004798:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 800479a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SoftWareLimitBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <ProcessReceivedCommand+0xe18>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80047a6:	2364      	movs	r3, #100	; 0x64
 80047a8:	4812      	ldr	r0, [pc, #72]	; (80047f4 <ProcessReceivedCommand+0xe1c>)
 80047aa:	f003 fef6 	bl	800859a <HAL_UART_Transmit>
			break;
 80047ae:	e010      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
		default:
			if (StartRunning)// Keep running
 80047b0:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <ProcessReceivedCommand+0xe20>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <ProcessReceivedCommand+0xdf8>
			{
				InitializeRunning(ExperimentMode);
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <ProcessReceivedCommand+0xe24>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fd fc43 	bl	8002048 <InitializeRunning>
				break;
 80047c2:	e006      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			break;
 80047c4:	bf00      	nop
 80047c6:	e004      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			break;
 80047c8:	bf00      	nop
 80047ca:	e002      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <ProcessReceivedCommand+0xdfa>
			}
			else
			{
				break;
 80047d0:	bf00      	nop
			}					
	}
}
 80047d2:	bf00      	nop
 80047d4:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 80047d8:	46bd      	mov	sp, r7
 80047da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047de:	bf00      	nop
 80047e0:	20000003 	.word	0x20000003
 80047e4:	20000000 	.word	0x20000000
 80047e8:	2000000a 	.word	0x2000000a
 80047ec:	0800ddac 	.word	0x0800ddac
 80047f0:	2000042a 	.word	0x2000042a
 80047f4:	2000033c 	.word	0x2000033c
 80047f8:	20000438 	.word	0x20000438
 80047fc:	20000004 	.word	0x20000004
 8004800:	20000504 	.word	0x20000504
 8004804:	20000534 	.word	0x20000534
 8004808:	0800ddb4 	.word	0x0800ddb4
 800480c:	20000528 	.word	0x20000528
 8004810:	0800ddc0 	.word	0x0800ddc0
 8004814:	20000530 	.word	0x20000530
 8004818:	0800ddcc 	.word	0x0800ddcc
 800481c:	200004fc 	.word	0x200004fc
 8004820:	200004b0 	.word	0x200004b0
 8004824:	20000449 	.word	0x20000449
 8004828:	0800ddd8 	.word	0x0800ddd8
 800482c:	20000005 	.word	0x20000005
 8004830:	0800dde0 	.word	0x0800dde0

08004834 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);
	
	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a42      	ldr	r2, [pc, #264]	; (800494c <HAL_UART_RxCpltCallback+0x118>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d121      	bne.n	800488a <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 8004846:	4b42      	ldr	r3, [pc, #264]	; (8004950 <HAL_UART_RxCpltCallback+0x11c>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	4293      	cmp	r3, r2
 800484e:	d016      	beq.n	800487e <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != NULL) // remove the null character
 8004850:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <HAL_UART_RxCpltCallback+0x11c>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d018      	beq.n	800488a <HAL_UART_RxCpltCallback+0x56>
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 8004858:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <HAL_UART_RxCpltCallback+0x120>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <HAL_UART_RxCpltCallback+0x11c>)
 8004860:	7819      	ldrb	r1, [r3, #0]
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <HAL_UART_RxCpltCallback+0x124>)
 8004864:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_UART_RxCpltCallback+0x120>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	3301      	adds	r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_UART_RxCpltCallback+0x120>)
 8004870:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004872:	2201      	movs	r2, #1
 8004874:	4936      	ldr	r1, [pc, #216]	; (8004950 <HAL_UART_RxCpltCallback+0x11c>)
 8004876:	4839      	ldr	r0, [pc, #228]	; (800495c <HAL_UART_RxCpltCallback+0x128>)
 8004878:	f003 ff21 	bl	80086be <HAL_UART_Receive_IT>
 800487c:	e005      	b.n	800488a <HAL_UART_RxCpltCallback+0x56>
				}		
			}
			else //if(RxPCData==EndChar)
			{								
				_rxPCIndex=0;
 800487e:	4b35      	ldr	r3, [pc, #212]	; (8004954 <HAL_UART_RxCpltCallback+0x120>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed				
 8004884:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_UART_RxCpltCallback+0x12c>)
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
		}
	// END UART6
		
		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a35      	ldr	r2, [pc, #212]	; (8004964 <HAL_UART_RxCpltCallback+0x130>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d130      	bne.n	80048f6 <HAL_UART_RxCpltCallback+0xc2>
		{	
			if (_rxDriverIndex >= NoOfBytes) //
 8004894:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_UART_RxCpltCallback+0x134>)
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	4b34      	ldr	r3, [pc, #208]	; (800496c <HAL_UART_RxCpltCallback+0x138>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d308      	bcc.n	80048b2 <HAL_UART_RxCpltCallback+0x7e>
			{					
				RxUart5_Cpl_Flag = true; // Complete Receiving
 80048a0:	4b33      	ldr	r3, [pc, #204]	; (8004970 <HAL_UART_RxCpltCallback+0x13c>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_UART_RxCpltCallback+0x140>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;								
 80048ac:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <HAL_UART_RxCpltCallback+0x134>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
			}				
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_UART_RxCpltCallback+0x134>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_RxCpltCallback+0x94>
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <HAL_UART_RxCpltCallback+0x144>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d102      	bne.n	80048c8 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true; 
 80048c2:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <HAL_UART_RxCpltCallback+0x140>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 80048c8:	4b2a      	ldr	r3, [pc, #168]	; (8004974 <HAL_UART_RxCpltCallback+0x140>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d011      	beq.n	80048f6 <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer							
 80048d2:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_UART_RxCpltCallback+0x134>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b27      	ldr	r3, [pc, #156]	; (8004978 <HAL_UART_RxCpltCallback+0x144>)
 80048da:	7819      	ldrb	r1, [r3, #0]
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <HAL_UART_RxCpltCallback+0x148>)
 80048de:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_UART_RxCpltCallback+0x134>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_UART_RxCpltCallback+0x134>)
 80048ea:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/					
 80048ec:	2201      	movs	r2, #1
 80048ee:	4922      	ldr	r1, [pc, #136]	; (8004978 <HAL_UART_RxCpltCallback+0x144>)
 80048f0:	4823      	ldr	r0, [pc, #140]	; (8004980 <HAL_UART_RxCpltCallback+0x14c>)
 80048f2:	f003 fee4 	bl	80086be <HAL_UART_Receive_IT>
			}					
		}
		// END UART5

		// BEGIN UART3
		if (huart->Instance==USART3) // UART3, receive Acc data
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a22      	ldr	r2, [pc, #136]	; (8004984 <HAL_UART_RxCpltCallback+0x150>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d121      	bne.n	8004944 <HAL_UART_RxCpltCallback+0x110>
		{
			
			if(RxUart3Data!=EndChar) // read up to the ending char
 8004900:	4b21      	ldr	r3, [pc, #132]	; (8004988 <HAL_UART_RxCpltCallback+0x154>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	4293      	cmp	r3, r2
 8004908:	d011      	beq.n	800492e <HAL_UART_RxCpltCallback+0xfa>
			{
				if (RxUart3Data != NULL) // remove the null character
 800490a:	4b1f      	ldr	r3, [pc, #124]	; (8004988 <HAL_UART_RxCpltCallback+0x154>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d013      	beq.n	800493a <HAL_UART_RxCpltCallback+0x106>
				{
					RxUart3Buff[_rxUart3Index]=RxUart3Data;// Copy the data to buffer
 8004912:	4b1e      	ldr	r3, [pc, #120]	; (800498c <HAL_UART_RxCpltCallback+0x158>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_UART_RxCpltCallback+0x154>)
 800491a:	7819      	ldrb	r1, [r3, #0]
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <HAL_UART_RxCpltCallback+0x15c>)
 800491e:	5499      	strb	r1, [r3, r2]
				  _rxUart3Index++;					
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <HAL_UART_RxCpltCallback+0x158>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_UART_RxCpltCallback+0x158>)
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e005      	b.n	800493a <HAL_UART_RxCpltCallback+0x106>
				}		
			}
			else //if(RxPCData==EndChar)
			{								
				_rxUart3Index=0;
 800492e:	4b17      	ldr	r3, [pc, #92]	; (800498c <HAL_UART_RxCpltCallback+0x158>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
				RxUart3_Cpl_Flag=true; // reading completed				
 8004934:	4b17      	ldr	r3, [pc, #92]	; (8004994 <HAL_UART_RxCpltCallback+0x160>)
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart3,&RxUart3Data,1);				
 800493a:	2201      	movs	r2, #1
 800493c:	4912      	ldr	r1, [pc, #72]	; (8004988 <HAL_UART_RxCpltCallback+0x154>)
 800493e:	4816      	ldr	r0, [pc, #88]	; (8004998 <HAL_UART_RxCpltCallback+0x164>)
 8004940:	f003 febd 	bl	80086be <HAL_UART_Receive_IT>
		}
//		// END UART3
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40011400 	.word	0x40011400
 8004950:	20000408 	.word	0x20000408
 8004954:	20000430 	.word	0x20000430
 8004958:	20000380 	.word	0x20000380
 800495c:	2000033c 	.word	0x2000033c
 8004960:	20000433 	.word	0x20000433
 8004964:	40005000 	.word	0x40005000
 8004968:	20000431 	.word	0x20000431
 800496c:	20000000 	.word	0x20000000
 8004970:	20000434 	.word	0x20000434
 8004974:	20000436 	.word	0x20000436
 8004978:	20000409 	.word	0x20000409
 800497c:	200003a8 	.word	0x200003a8
 8004980:	200002b4 	.word	0x200002b4
 8004984:	40004800 	.word	0x40004800
 8004988:	2000040a 	.word	0x2000040a
 800498c:	20000432 	.word	0x20000432
 8004990:	200003c8 	.word	0x200003c8
 8004994:	20000435 	.word	0x20000435
 8004998:	200002f8 	.word	0x200002f8

0800499c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d147      	bne.n	8004a3e <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		if (DeltaPulseCount > abs(DeltaPulse+10)) // Stop pulse generating when reach the position cmd
 80049ae:	4b3a      	ldr	r3, [pc, #232]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330a      	adds	r3, #10
 80049b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80049b8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80049bc:	4b37      	ldr	r3, [pc, #220]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	da09      	bge.n	80049d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			DeltaPulseCount = 0;
 80049c4:	4b35      	ldr	r3, [pc, #212]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
			DeltaPulse = 0;
 80049ca:	4b33      	ldr	r3, [pc, #204]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
			//StopPulseGenerating();
			PulseGenerationFlag = false;
 80049d0:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
			return;
 80049d6:	e059      	b.n	8004a8c <HAL_TIM_PeriodElapsedCallback+0xf0>
		}
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 80049d8:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02e      	beq.n	8004a3e <HAL_TIM_PeriodElapsedCallback+0xa2>
		{
				Timer3Count++;
 80049e0:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	4b2e      	ldr	r3, [pc, #184]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80049ea:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 80049ec:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d322      	bcc.n	8004a3e <HAL_TIM_PeriodElapsedCallback+0xa2>
				{
					Timer3Count = 0;
 80049f8:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	801a      	strh	r2, [r3, #0]
					if (PRIsToggled)
 80049fe:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <HAL_TIM_PeriodElapsedCallback+0x86>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8004a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a0a:	4829      	ldr	r0, [pc, #164]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004a0c:	f002 fa35 	bl	8006e7a <HAL_GPIO_TogglePin>
						PRIsToggled = false;					
 8004a10:	4b26      	ldr	r3, [pc, #152]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
						DeltaPulseCount++;
 8004a16:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004a1e:	6013      	str	r3, [r2, #0]
						return; // exit the function
 8004a20:	e034      	b.n	8004a8c <HAL_TIM_PeriodElapsedCallback+0xf0>
					}				
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8004a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a26:	4823      	ldr	r0, [pc, #140]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004a28:	f002 fa27 	bl	8006e7a <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
						DeltaPulseCount++;
 8004a32:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3301      	adds	r3, #1
 8004a38:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004a3a:	6013      	str	r3, [r2, #0]
						return; // exit the function
 8004a3c:	e026      	b.n	8004a8c <HAL_TIM_PeriodElapsedCallback+0xf0>
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d121      	bne.n	8004a8c <HAL_TIM_PeriodElapsedCallback+0xf0>
		{
				// To calculate PID controller
				Timer2SampleTimeControlCount++;
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a52:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8004a54:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d305      	bcc.n	8004a6c <HAL_TIM_PeriodElapsedCallback+0xd0>
				{		
					Timer2ControlInterrupt = true;
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
					Timer2SampleTimeControlCount = 0;
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
				}
			
				// To transmit the data each 50ms
				Timer2Count++;
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a76:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 50) // turn on the flag when the sample time reaches, fix the data sample time to 40ms
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b31      	cmp	r3, #49	; 0x31
 8004a7e:	d905      	bls.n	8004a8c <HAL_TIM_PeriodElapsedCallback+0xf0>
				{		
					Timer2SampleTimeInterrupt = true;
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;					
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
				}
		}
}
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40000400 	.word	0x40000400
 8004a98:	200004bc 	.word	0x200004bc
 8004a9c:	200004b8 	.word	0x200004b8
 8004aa0:	2000043f 	.word	0x2000043f
 8004aa4:	20000454 	.word	0x20000454
 8004aa8:	20000008 	.word	0x20000008
 8004aac:	2000044b 	.word	0x2000044b
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40020800 	.word	0x40020800
 8004ab8:	2000044d 	.word	0x2000044d
 8004abc:	2000045c 	.word	0x2000045c
 8004ac0:	2000043b 	.word	0x2000043b
 8004ac4:	2000044c 	.word	0x2000044c
 8004ac8:	2000043a 	.word	0x2000043a
 8004acc:	00000000 	.word	0x00000000

08004ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad4:	b08f      	sub	sp, #60	; 0x3c
 8004ad6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8004ad8:	f001 faca 	bl	8006070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004adc:	f000 fca8 	bl	8005430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ae0:	f000 fe80 	bl	80057e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8004ae4:	f000 fd3a 	bl	800555c <MX_TIM2_Init>
  MX_UART5_Init();
 8004ae8:	f000 fdfe 	bl	80056e8 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8004aec:	f000 fe50 	bl	8005790 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8004af0:	f000 fdae 	bl	8005650 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8004af4:	f000 fe22 	bl	800573c <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004af8:	f000 fd04 	bl	8005504 <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8004afc:	2201      	movs	r2, #1
 8004afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b02:	4872      	ldr	r0, [pc, #456]	; (8004ccc <main+0x1fc>)
 8004b04:	f002 f9a0 	bl	8006e48 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8004b08:	f241 3088 	movw	r0, #5000	; 0x1388
 8004b0c:	f001 fb22 	bl	8006154 <HAL_Delay>
	
	InitParams (); // Read the saved params from the flash memory
 8004b10:	f7fe feee 	bl	80038f0 <InitParams>
// PID(&TPID, &AccFb, &PIPulseCmd, &DroppingAccel, Kp, StoppingTime, 0, _PID_P_ON_E, _PID_CD_DIRECT); // Kd = 0, use PI controller	
//  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
//  PID_SetSampleTime(&TPID, Timer2Period); // the sample time is 50ms = Timer2 time interval
//  PID_SetOutputLimits(&TPID, -2000, 2000); // min PID: -2000rpm, max: 2000rpm
	
	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET); // Set Uart3 to receive Mode
 8004b14:	2201      	movs	r2, #1
 8004b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b1a:	486d      	ldr	r0, [pc, #436]	; (8004cd0 <main+0x200>)
 8004b1c:	f002 f994 	bl	8006e48 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart3,&RxUart3Data,1); // Enable Interrupt
 8004b20:	2201      	movs	r2, #1
 8004b22:	496c      	ldr	r1, [pc, #432]	; (8004cd4 <main+0x204>)
 8004b24:	486c      	ldr	r0, [pc, #432]	; (8004cd8 <main+0x208>)
 8004b26:	f003 fdca 	bl	80086be <HAL_UART_Receive_IT>
	
	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 8004b2a:	486c      	ldr	r0, [pc, #432]	; (8004cdc <main+0x20c>)
 8004b2c:	f002 fe68 	bl	8007800 <HAL_TIM_Base_Start_IT>
// Not turn on timer3 at the start
//	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer 3 interrupt
	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004b30:	2201      	movs	r2, #1
 8004b32:	496b      	ldr	r1, [pc, #428]	; (8004ce0 <main+0x210>)
 8004b34:	486b      	ldr	r0, [pc, #428]	; (8004ce4 <main+0x214>)
 8004b36:	f003 fdc2 	bl	80086be <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4,&RxESPData,1);	
	DriverInit();
 8004b3a:	f7fc fba1 	bl	8001280 <DriverInit>
	ReadMultiRegister(StE03,5);
 8004b3e:	2105      	movs	r1, #5
 8004b40:	200c      	movs	r0, #12
 8004b42:	f7fc fddb 	bl	80016fc <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		
		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8004b46:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <main+0x218>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00b      	beq.n	8004b68 <main+0x98>
			{
				ExtractMotionCode();				
 8004b50:	f7fc fd78 	bl	8001644 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 8004b54:	f7fe ff40 	bl	80039d8 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 8004b58:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <main+0x218>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004b5e:	2201      	movs	r2, #1
 8004b60:	495f      	ldr	r1, [pc, #380]	; (8004ce0 <main+0x210>)
 8004b62:	4860      	ldr	r0, [pc, #384]	; (8004ce4 <main+0x214>)
 8004b64:	f003 fdab 	bl	80086be <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 8004b68:	4b60      	ldr	r3, [pc, #384]	; (8004cec <main+0x21c>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8103 	beq.w	8004d7a <main+0x2aa>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 8004b74:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <main+0x21c>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
			// BEGIN running experiment
			if (StartRunning) // Process Running Experiment
 8004b7a:	4b5d      	ldr	r3, [pc, #372]	; (8004cf0 <main+0x220>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 809b 	beq.w	8004cba <main+0x1ea>
			{
				switch (ExperimentMode)
 8004b84:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <main+0x224>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d067      	beq.n	8004c5c <main+0x18c>
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	f300 8096 	bgt.w	8004cbe <main+0x1ee>
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <main+0xcc>
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d031      	beq.n	8004bfe <main+0x12e>
								}
							}
						}
						break;
					default:
						break;
 8004b9a:	e090      	b.n	8004cbe <main+0x1ee>
						if (Dropping()) // Dropping() return true when it finishing
 8004b9c:	f7fe fa2c 	bl	8002ff8 <Dropping>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 808d 	beq.w	8004cc2 <main+0x1f2>
							if (!POSReach) // Check if position is reached or not
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <main+0x228>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f083 0301 	eor.w	r3, r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8085 	beq.w	8004cc2 <main+0x1f2>
								if (WaitingMiliSecond(3000)) // Wait for 2 Seconds
 8004bb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004bbc:	f7fc ffc4 	bl	8001b48 <WaitingMiliSecond>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d07d      	beq.n	8004cc2 <main+0x1f2>
									StopExperiment();
 8004bc6:	f7fe fc13 	bl	80033f0 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004bca:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <main+0x22c>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d077      	beq.n	8004cc2 <main+0x1f2>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004bd2:	221e      	movs	r2, #30
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	484a      	ldr	r0, [pc, #296]	; (8004d00 <main+0x230>)
 8004bd8:	f004 fd34 	bl	8009644 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004bdc:	4949      	ldr	r1, [pc, #292]	; (8004d04 <main+0x234>)
 8004bde:	4848      	ldr	r0, [pc, #288]	; (8004d00 <main+0x230>)
 8004be0:	f005 f9a2 	bl	8009f28 <siprintf>
 8004be4:	4603      	mov	r3, r0
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <main+0x238>)
 8004bea:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004bec:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <main+0x238>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	23c8      	movs	r3, #200	; 0xc8
 8004bf4:	4942      	ldr	r1, [pc, #264]	; (8004d00 <main+0x230>)
 8004bf6:	483b      	ldr	r0, [pc, #236]	; (8004ce4 <main+0x214>)
 8004bf8:	f003 fccf 	bl	800859a <HAL_UART_Transmit>
						break;
 8004bfc:	e061      	b.n	8004cc2 <main+0x1f2>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8004bfe:	f7fd fa77 	bl	80020f0 <PullingExperiment>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05e      	beq.n	8004cc6 <main+0x1f6>
							if (!POSReach) // Check if position is reached or not
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <main+0x228>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	f083 0301 	eor.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d057      	beq.n	8004cc6 <main+0x1f6>
								if (WaitingMiliSecond(3000)) // Wait for 2 Seconds
 8004c16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004c1a:	f7fc ff95 	bl	8001b48 <WaitingMiliSecond>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d050      	beq.n	8004cc6 <main+0x1f6>
									StopExperiment();
 8004c24:	f7fe fbe4 	bl	80033f0 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004c28:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <main+0x22c>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d04a      	beq.n	8004cc6 <main+0x1f6>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004c30:	221e      	movs	r2, #30
 8004c32:	2100      	movs	r1, #0
 8004c34:	4832      	ldr	r0, [pc, #200]	; (8004d00 <main+0x230>)
 8004c36:	f004 fd05 	bl	8009644 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004c3a:	4932      	ldr	r1, [pc, #200]	; (8004d04 <main+0x234>)
 8004c3c:	4830      	ldr	r0, [pc, #192]	; (8004d00 <main+0x230>)
 8004c3e:	f005 f973 	bl	8009f28 <siprintf>
 8004c42:	4603      	mov	r3, r0
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <main+0x238>)
 8004c48:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <main+0x238>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	23c8      	movs	r3, #200	; 0xc8
 8004c52:	492b      	ldr	r1, [pc, #172]	; (8004d00 <main+0x230>)
 8004c54:	4823      	ldr	r0, [pc, #140]	; (8004ce4 <main+0x214>)
 8004c56:	f003 fca0 	bl	800859a <HAL_UART_Transmit>
						break;
 8004c5a:	e034      	b.n	8004cc6 <main+0x1f6>
						if (PullAndDrop()) // PullingExperiment() return true when it finishing
 8004c5c:	f7fd fcfc 	bl	8002658 <PullAndDrop>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d052      	beq.n	8004d0c <main+0x23c>
							if (!POSReach) // Check if position is reached or not
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <main+0x228>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f083 0301 	eor.w	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d04b      	beq.n	8004d0c <main+0x23c>
								if (WaitingMiliSecond(3000)) // Wait for 3 Seconds
 8004c74:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004c78:	f7fc ff66 	bl	8001b48 <WaitingMiliSecond>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d044      	beq.n	8004d0c <main+0x23c>
									StopExperiment();
 8004c82:	f7fe fbb5 	bl	80033f0 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004c86:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <main+0x22c>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03e      	beq.n	8004d0c <main+0x23c>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004c8e:	221e      	movs	r2, #30
 8004c90:	2100      	movs	r1, #0
 8004c92:	481b      	ldr	r0, [pc, #108]	; (8004d00 <main+0x230>)
 8004c94:	f004 fcd6 	bl	8009644 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004c98:	491a      	ldr	r1, [pc, #104]	; (8004d04 <main+0x234>)
 8004c9a:	4819      	ldr	r0, [pc, #100]	; (8004d00 <main+0x230>)
 8004c9c:	f005 f944 	bl	8009f28 <siprintf>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <main+0x238>)
 8004ca6:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <main+0x238>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	23c8      	movs	r3, #200	; 0xc8
 8004cb0:	4913      	ldr	r1, [pc, #76]	; (8004d00 <main+0x230>)
 8004cb2:	480c      	ldr	r0, [pc, #48]	; (8004ce4 <main+0x214>)
 8004cb4:	f003 fc71 	bl	800859a <HAL_UART_Transmit>
						break;
 8004cb8:	e028      	b.n	8004d0c <main+0x23c>
				}
			}
 8004cba:	bf00      	nop
 8004cbc:	e027      	b.n	8004d0e <main+0x23e>
						break;
 8004cbe:	bf00      	nop
 8004cc0:	e025      	b.n	8004d0e <main+0x23e>
						break;
 8004cc2:	bf00      	nop
 8004cc4:	e023      	b.n	8004d0e <main+0x23e>
						break;
 8004cc6:	bf00      	nop
 8004cc8:	e021      	b.n	8004d0e <main+0x23e>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40020400 	.word	0x40020400
 8004cd4:	2000040a 	.word	0x2000040a
 8004cd8:	200002f8 	.word	0x200002f8
 8004cdc:	20000224 	.word	0x20000224
 8004ce0:	20000408 	.word	0x20000408
 8004ce4:	2000033c 	.word	0x2000033c
 8004ce8:	20000433 	.word	0x20000433
 8004cec:	2000043b 	.word	0x2000043b
 8004cf0:	20000438 	.word	0x20000438
 8004cf4:	20000004 	.word	0x20000004
 8004cf8:	20000441 	.word	0x20000441
 8004cfc:	2000044a 	.word	0x2000044a
 8004d00:	2000040c 	.word	0x2000040c
 8004d04:	0800dde8 	.word	0x0800dde8
 8004d08:	2000042a 	.word	0x2000042a
						break;
 8004d0c:	bf00      	nop
			if (IsJogControl) // Jog control mode
 8004d0e:	4b86      	ldr	r3, [pc, #536]	; (8004f28 <main+0x458>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d031      	beq.n	8004d7a <main+0x2aa>
			{
				DeltaPulse = CalculateDeltaPulse (DrumRadius*JogSpeed*2*3.14/60);
 8004d16:	4b85      	ldr	r3, [pc, #532]	; (8004f2c <main+0x45c>)
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d22:	4b83      	ldr	r3, [pc, #524]	; (8004f30 <main+0x460>)
 8004d24:	edd3 7a00 	vldr	s15, [r3]
 8004d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d30:	ee17 0a90 	vmov	r0, s15
 8004d34:	f7fb fc08 	bl	8000548 <__aeabi_f2d>
 8004d38:	a379      	add	r3, pc, #484	; (adr r3, 8004f20 <main+0x450>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc5b 	bl	80005f8 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	4b79      	ldr	r3, [pc, #484]	; (8004f34 <main+0x464>)
 8004d50:	f7fb fd7c 	bl	800084c <__aeabi_ddiv>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f7fb ff44 	bl	8000be8 <__aeabi_d2f>
 8004d60:	4603      	mov	r3, r0
 8004d62:	ee00 3a10 	vmov	s0, r3
 8004d66:	f7fc ff17 	bl	8001b98 <CalculateDeltaPulse>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4a72      	ldr	r2, [pc, #456]	; (8004f38 <main+0x468>)
 8004d6e:	6013      	str	r3, [r2, #0]
				StartPulseGenerating(Direction);
 8004d70:	4b72      	ldr	r3, [pc, #456]	; (8004f3c <main+0x46c>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fc feb7 	bl	8001ae8 <StartPulseGenerating>
		}
			// END Running Experiment
		// END Timer2ControlInterrupt
		
		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 8004d7a:	4b71      	ldr	r3, [pc, #452]	; (8004f40 <main+0x470>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 816a 	beq.w	800505a <main+0x58a>
		{
			Timer2SampleTimeInterrupt = false;
 8004d86:	4b6e      	ldr	r3, [pc, #440]	; (8004f40 <main+0x470>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
			
			// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
			// If servo is not ready or not ON, then turn off all the functions
			if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	486d      	ldr	r0, [pc, #436]	; (8004f44 <main+0x474>)
 8004d90:	f002 f842 	bl	8006e18 <HAL_GPIO_ReadPin>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <main+0x2d8>
 8004d9a:	2140      	movs	r1, #64	; 0x40
 8004d9c:	4869      	ldr	r0, [pc, #420]	; (8004f44 <main+0x474>)
 8004d9e:	f002 f83b 	bl	8006e18 <HAL_GPIO_ReadPin>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <main+0x2ea>
			{
				// If the servo is not ON. Then stop all the running function
				StopPulseGenerating();
 8004da8:	f7fc fe80 	bl	8001aac <StopPulseGenerating>
				StopExperiment();				
 8004dac:	f7fe fb20 	bl	80033f0 <StopExperiment>
				ResetPIDController();
 8004db0:	f7fc fc2e 	bl	8001610 <ResetPIDController>
				IsHoming = false; // Disable Homming
 8004db4:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <main+0x478>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
			}	
			
			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 8004dba:	4b64      	ldr	r3, [pc, #400]	; (8004f4c <main+0x47c>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	f083 0301 	eor.w	r3, r3, #1
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d026      	beq.n	8004e16 <main+0x346>
			{
				if (StartRunning && StartAccleratePulling) // Always turn on the software limit while running
 8004dc8:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <main+0x480>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <main+0x322>
 8004dd0:	4b60      	ldr	r3, [pc, #384]	; (8004f54 <main+0x484>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00c      	beq.n	8004df2 <main+0x322>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004dd8:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <main+0x488>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b5f      	ldr	r3, [pc, #380]	; (8004f5c <main+0x48c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2bc8      	cmp	r3, #200	; 0xc8
 8004de4:	dc05      	bgt.n	8004df2 <main+0x322>
					{				
						StopPulseGenerating();
 8004de6:	f7fc fe61 	bl	8001aac <StopPulseGenerating>
						StopExperiment();				
 8004dea:	f7fe fb01 	bl	80033f0 <StopExperiment>
						ResetPIDController();						
 8004dee:	f7fc fc0f 	bl	8001610 <ResetPIDController>
					}					
				}
				if (SoftWareLimit) // Software limit is on
 8004df2:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <main+0x490>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d035      	beq.n	8004e66 <main+0x396>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004dfa:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <main+0x488>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <main+0x48c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2bc8      	cmp	r3, #200	; 0xc8
 8004e06:	dc2e      	bgt.n	8004e66 <main+0x396>
					{				
						StopPulseGenerating();
 8004e08:	f7fc fe50 	bl	8001aac <StopPulseGenerating>
						StopExperiment();				
 8004e0c:	f7fe faf0 	bl	80033f0 <StopExperiment>
						ResetPIDController();						
 8004e10:	f7fc fbfe 	bl	8001610 <ResetPIDController>
 8004e14:	e027      	b.n	8004e66 <main+0x396>
					}	
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning && StartAccleratePulling)// Always turn on the software limit while running
 8004e16:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <main+0x480>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d011      	beq.n	8004e42 <main+0x372>
 8004e1e:	4b4d      	ldr	r3, [pc, #308]	; (8004f54 <main+0x484>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <main+0x372>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004e26:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <main+0x488>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <main+0x48c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e34:	dc05      	bgt.n	8004e42 <main+0x372>
					{				
						StopPulseGenerating();
 8004e36:	f7fc fe39 	bl	8001aac <StopPulseGenerating>
						StopExperiment();				
 8004e3a:	f7fe fad9 	bl	80033f0 <StopExperiment>
						ResetPIDController();						
 8004e3e:	f7fc fbe7 	bl	8001610 <ResetPIDController>
					}					
				}
				if (SoftWareLimit) // Software limit is on
 8004e42:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <main+0x490>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00d      	beq.n	8004e66 <main+0x396>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <main+0x488>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4b43      	ldr	r3, [pc, #268]	; (8004f5c <main+0x48c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e58:	dc05      	bgt.n	8004e66 <main+0x396>
					{				
						StopPulseGenerating();
 8004e5a:	f7fc fe27 	bl	8001aac <StopPulseGenerating>
						StopExperiment();				
 8004e5e:	f7fe fac7 	bl	80033f0 <StopExperiment>
						ResetPIDController();						
 8004e62:	f7fc fbd5 	bl	8001610 <ResetPIDController>
					}	
				}				
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <main+0x478>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <main+0x3b2>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position
 8004e6e:	2164      	movs	r1, #100	; 0x64
 8004e70:	2000      	movs	r0, #0
 8004e72:	f7fc feeb 	bl	8001c4c <CheckGoingToRefPosition>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <main+0x3b2>
				{
					IsHoming = false; // finish homing
 8004e7c:	4b32      	ldr	r3, [pc, #200]	; (8004f48 <main+0x478>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing
			
			// BEGIN Send data to the UI
			if (UIDataRequest)
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <main+0x494>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80b8 	beq.w	8004ffc <main+0x52c>
			{
				if (PositionControlMode) // Position Mode, read both Position and Speed, Send both Position and Speed
 8004e8c:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <main+0x498>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80b3 	beq.w	8004ffc <main+0x52c>
				{
					memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset					
 8004e96:	221e      	movs	r2, #30
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4834      	ldr	r0, [pc, #208]	; (8004f6c <main+0x49c>)
 8004e9c:	f004 fbd2 	bl	8009644 <memset>
					if (MotorDriver) // FDA7000 Driver
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <main+0x47c>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d071      	beq.n	8004f8c <main+0x4bc>
					{
						
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PositionPulseCmd*EgearRatio); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError);
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 8004ea8:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <main+0x4a0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fb fb4b 	bl	8000548 <__aeabi_f2d>
 8004eb2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <main+0x4a4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fb44 	bl	8000548 <__aeabi_f2d>
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	4689      	mov	r9, r1
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <main+0x4a8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb fb3d 	bl	8000548 <__aeabi_f2d>
 8004ece:	4682      	mov	sl, r0
 8004ed0:	468b      	mov	fp, r1
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <main+0x4ac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb fb36 	bl	8000548 <__aeabi_f2d>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ee4:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004ee8:	e9cd 8900 	strd	r8, r9, [sp]
 8004eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ef0:	4923      	ldr	r1, [pc, #140]	; (8004f80 <main+0x4b0>)
 8004ef2:	481e      	ldr	r0, [pc, #120]	; (8004f6c <main+0x49c>)
 8004ef4:	f005 f818 	bl	8009f28 <siprintf>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <main+0x4b4>)
 8004efe:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio 
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004f00:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <main+0x4b4>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	23c8      	movs	r3, #200	; 0xc8
 8004f08:	4918      	ldr	r1, [pc, #96]	; (8004f6c <main+0x49c>)
 8004f0a:	481f      	ldr	r0, [pc, #124]	; (8004f88 <main+0x4b8>)
 8004f0c:	f003 fb45 	bl	800859a <HAL_UART_Transmit>
						ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 8004f10:	2106      	movs	r1, #6
 8004f12:	200c      	movs	r0, #12
 8004f14:	f7fc fbf2 	bl	80016fc <ReadMultiRegister>
 8004f18:	e070      	b.n	8004ffc <main+0x52c>
 8004f1a:	bf00      	nop
 8004f1c:	f3af 8000 	nop.w
 8004f20:	51eb851f 	.word	0x51eb851f
 8004f24:	40091eb8 	.word	0x40091eb8
 8004f28:	20000448 	.word	0x20000448
 8004f2c:	20000006 	.word	0x20000006
 8004f30:	20000458 	.word	0x20000458
 8004f34:	404e0000 	.word	0x404e0000
 8004f38:	200004bc 	.word	0x200004bc
 8004f3c:	20000439 	.word	0x20000439
 8004f40:	2000043a 	.word	0x2000043a
 8004f44:	40021000 	.word	0x40021000
 8004f48:	20000447 	.word	0x20000447
 8004f4c:	20000003 	.word	0x20000003
 8004f50:	20000438 	.word	0x20000438
 8004f54:	20000443 	.word	0x20000443
 8004f58:	200004fc 	.word	0x200004fc
 8004f5c:	200004b0 	.word	0x200004b0
 8004f60:	20000005 	.word	0x20000005
 8004f64:	2000043c 	.word	0x2000043c
 8004f68:	20000002 	.word	0x20000002
 8004f6c:	2000040c 	.word	0x2000040c
 8004f70:	200004f4 	.word	0x200004f4
 8004f74:	20000500 	.word	0x20000500
 8004f78:	20000548 	.word	0x20000548
 8004f7c:	20000010 	.word	0x20000010
 8004f80:	0800ddec 	.word	0x0800ddec
 8004f84:	2000042a 	.word	0x2000042a
 8004f88:	2000033c 	.word	0x2000033c
					}
					else // ASDA-A3 Driver
					{
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%d/%.1f/%.1fe",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError,AccZ,AccRef); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 8004f8c:	4b87      	ldr	r3, [pc, #540]	; (80051ac <main+0x6dc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fb fad9 	bl	8000548 <__aeabi_f2d>
 8004f96:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004f9a:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <main+0x6e0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fb fad2 	bl	8000548 <__aeabi_f2d>
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	4689      	mov	r9, r1
 8004fa8:	4b82      	ldr	r3, [pc, #520]	; (80051b4 <main+0x6e4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fb facb 	bl	8000548 <__aeabi_f2d>
 8004fb2:	4682      	mov	sl, r0
 8004fb4:	468b      	mov	fp, r1
 8004fb6:	4b80      	ldr	r3, [pc, #512]	; (80051b8 <main+0x6e8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb fac4 	bl	8000548 <__aeabi_f2d>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fc8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004fcc:	e9cd 8900 	strd	r8, r9, [sp]
 8004fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd4:	4979      	ldr	r1, [pc, #484]	; (80051bc <main+0x6ec>)
 8004fd6:	487a      	ldr	r0, [pc, #488]	; (80051c0 <main+0x6f0>)
 8004fd8:	f004 ffa6 	bl	8009f28 <siprintf>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	4b78      	ldr	r3, [pc, #480]	; (80051c4 <main+0x6f4>)
 8004fe2:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio 
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004fe4:	4b77      	ldr	r3, [pc, #476]	; (80051c4 <main+0x6f4>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	23c8      	movs	r3, #200	; 0xc8
 8004fec:	4974      	ldr	r1, [pc, #464]	; (80051c0 <main+0x6f0>)
 8004fee:	4876      	ldr	r0, [pc, #472]	; (80051c8 <main+0x6f8>)
 8004ff0:	f003 fad3 	bl	800859a <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6); 
 8004ff4:	2106      	movs	r1, #6
 8004ff6:	2012      	movs	r0, #18
 8004ff8:	f7fc fb80 	bl	80016fc <ReadMultiRegister>
					}					
				}
			}
			if(OutputDataRequest)
 8004ffc:	4b73      	ldr	r3, [pc, #460]	; (80051cc <main+0x6fc>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02a      	beq.n	800505a <main+0x58a>
				{
					CountTimerDriverOutput++;
 8005004:	4b72      	ldr	r3, [pc, #456]	; (80051d0 <main+0x700>)
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	4b70      	ldr	r3, [pc, #448]	; (80051d0 <main+0x700>)
 800500e:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 8005010:	4b6f      	ldr	r3, [pc, #444]	; (80051d0 <main+0x700>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	2b0e      	cmp	r3, #14
 8005016:	d920      	bls.n	800505a <main+0x58a>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 8005018:	f7fc f972 	bl	8001300 <ReadLogicF7000Out>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <main+0x704>)
 8005022:	801a      	strh	r2, [r3, #0]
						
						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005024:	221e      	movs	r2, #30
 8005026:	2100      	movs	r1, #0
 8005028:	4865      	ldr	r0, [pc, #404]	; (80051c0 <main+0x6f0>)
 800502a:	f004 fb0b 	bl	8009644 <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 800502e:	4b69      	ldr	r3, [pc, #420]	; (80051d4 <main+0x704>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	4968      	ldr	r1, [pc, #416]	; (80051d8 <main+0x708>)
 8005036:	4862      	ldr	r0, [pc, #392]	; (80051c0 <main+0x6f0>)
 8005038:	f004 ff76 	bl	8009f28 <siprintf>
 800503c:	4603      	mov	r3, r0
 800503e:	b2da      	uxtb	r2, r3
 8005040:	4b60      	ldr	r3, [pc, #384]	; (80051c4 <main+0x6f4>)
 8005042:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005044:	4b5f      	ldr	r3, [pc, #380]	; (80051c4 <main+0x6f4>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b29a      	uxth	r2, r3
 800504a:	23c8      	movs	r3, #200	; 0xc8
 800504c:	495c      	ldr	r1, [pc, #368]	; (80051c0 <main+0x6f0>)
 800504e:	485e      	ldr	r0, [pc, #376]	; (80051c8 <main+0x6f8>)
 8005050:	f003 faa3 	bl	800859a <HAL_UART_Transmit>
						
						CountTimerDriverOutput = 0;
 8005054:	4b5e      	ldr	r3, [pc, #376]	; (80051d0 <main+0x700>)
 8005056:	2200      	movs	r2, #0
 8005058:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI				
		}
		// END 50ms period interrupt
		
		// BEGIN Uart3 receive complete
		if (RxUart3_Cpl_Flag)
 800505a:	4b60      	ldr	r3, [pc, #384]	; (80051dc <main+0x70c>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d03b      	beq.n	80050dc <main+0x60c>
		{
			RxUart3_Cpl_Flag = false;			
 8005064:	4b5d      	ldr	r3, [pc, #372]	; (80051dc <main+0x70c>)
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
//			else 
//			{
//				AccZ = AccZ + 10;
//			}

			memset (AccZDataRegion, '\0', sizeof (AccZDataRegion)); // reset buffer
 800506a:	220a      	movs	r2, #10
 800506c:	2100      	movs	r1, #0
 800506e:	485c      	ldr	r0, [pc, #368]	; (80051e0 <main+0x710>)
 8005070:	f004 fae8 	bl	8009644 <memset>
			
			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 8005074:	2300      	movs	r3, #0
 8005076:	75fb      	strb	r3, [r7, #23]
 8005078:	e00f      	b.n	800509a <main+0x5ca>
			{
				if (RxUart3Buff[i] != 0x00)
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	4a59      	ldr	r2, [pc, #356]	; (80051e4 <main+0x714>)
 800507e:	5cd3      	ldrb	r3, [r2, r3]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <main+0x5c4>
				{
					AccZDataRegion[i] = RxUart3Buff[i];
 8005086:	7dfa      	ldrb	r2, [r7, #23]
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	4956      	ldr	r1, [pc, #344]	; (80051e4 <main+0x714>)
 800508c:	5c8a      	ldrb	r2, [r1, r2]
 800508e:	b2d1      	uxtb	r1, r2
 8005090:	4a53      	ldr	r2, [pc, #332]	; (80051e0 <main+0x710>)
 8005092:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	3301      	adds	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	2b0a      	cmp	r3, #10
 800509e:	d9ec      	bls.n	800507a <main+0x5aa>
				}
			}
			if (fabs(atof((char *)RxUart3Buff)) <= 100)
 80050a0:	4850      	ldr	r0, [pc, #320]	; (80051e4 <main+0x714>)
 80050a2:	f004 faa1 	bl	80095e8 <atof>
 80050a6:	ec53 2b10 	vmov	r2, r3, d0
 80050aa:	4614      	mov	r4, r2
 80050ac:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <main+0x718>)
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	f7fb fd19 	bl	8000af0 <__aeabi_dcmple>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <main+0x60c>
			{
				AccZ = atof((char *)RxUart3Buff);
 80050c4:	4847      	ldr	r0, [pc, #284]	; (80051e4 <main+0x714>)
 80050c6:	f004 fa8f 	bl	80095e8 <atof>
 80050ca:	ec53 2b10 	vmov	r2, r3, d0
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fb fd89 	bl	8000be8 <__aeabi_d2f>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4a44      	ldr	r2, [pc, #272]	; (80051ec <main+0x71c>)
 80050da:	6013      	str	r3, [r2, #0]
//			//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
//		}
// 	 End UART4 (ESP32) process
		
		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 80050dc:	4b44      	ldr	r3, [pc, #272]	; (80051f0 <main+0x720>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f43f ad2f 	beq.w	8004b46 <main+0x76>
			{
				RxUart5_Cpl_Flag = false;
 80050e8:	4b41      	ldr	r3, [pc, #260]	; (80051f0 <main+0x720>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
				
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 80050ee:	4b41      	ldr	r3, [pc, #260]	; (80051f4 <main+0x724>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e13a      	b.n	800536c <main+0x89c>
				{
					if (RxDriverBuff[i] == DriverID)
 80050f6:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <main+0x724>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b3e      	ldr	r3, [pc, #248]	; (80051f8 <main+0x728>)
 80050fe:	5c9b      	ldrb	r3, [r3, r2]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b01      	cmp	r3, #1
 8005104:	f040 812c 	bne.w	8005360 <main+0x890>
					{
						if (RxDriverBuff[1+i] == 3)
 8005108:	4b3a      	ldr	r3, [pc, #232]	; (80051f4 <main+0x724>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <main+0x728>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b03      	cmp	r3, #3
 8005116:	f040 80db 	bne.w	80052d0 <main+0x800>
						{							
							if (MotorDriver) // FDA7000
 800511a:	4b38      	ldr	r3, [pc, #224]	; (80051fc <main+0x72c>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d072      	beq.n	8005208 <main+0x738>
							{	
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 8005122:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <main+0x724>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	3306      	adds	r3, #6
 8005128:	4a33      	ldr	r2, [pc, #204]	; (80051f8 <main+0x728>)
 800512a:	5cd3      	ldrb	r3, [r2, r3]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	4b34      	ldr	r3, [pc, #208]	; (8005200 <main+0x730>)
 8005130:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 8005132:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <main+0x724>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	3305      	adds	r3, #5
 8005138:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <main+0x728>)
 800513a:	5cd3      	ldrb	r3, [r2, r3]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b30      	ldr	r3, [pc, #192]	; (8005200 <main+0x730>)
 8005140:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 8005142:	4b2c      	ldr	r3, [pc, #176]	; (80051f4 <main+0x724>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	3304      	adds	r3, #4
 8005148:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <main+0x728>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4b2c      	ldr	r3, [pc, #176]	; (8005200 <main+0x730>)
 8005150:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 8005152:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <main+0x724>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	3303      	adds	r3, #3
 8005158:	4a27      	ldr	r2, [pc, #156]	; (80051f8 <main+0x728>)
 800515a:	5cd3      	ldrb	r3, [r2, r3]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <main+0x730>)
 8005160:	70da      	strb	r2, [r3, #3]
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <main+0x730>)
 8005164:	681b      	ldr	r3, [r3, #0]
								
								memcpy(&MotorSpeed, SpeedValueRegion, 4);		
 8005166:	4a11      	ldr	r2, [pc, #68]	; (80051ac <main+0x6dc>)
 8005168:	6013      	str	r3, [r2, #0]
//								{
//									MotorSpeed = MotorSpeedBuff;
//								}
								
								
								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];								
 800516a:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <main+0x724>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	3313      	adds	r3, #19
 8005170:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <main+0x728>)
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	061a      	lsls	r2, r3, #24
 8005178:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <main+0x724>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	491e      	ldr	r1, [pc, #120]	; (80051f8 <main+0x728>)
 8005180:	5ccb      	ldrb	r3, [r1, r3]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	431a      	orrs	r2, r3
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <main+0x724>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	3315      	adds	r3, #21
 800518e:	491a      	ldr	r1, [pc, #104]	; (80051f8 <main+0x728>)
 8005190:	5ccb      	ldrb	r3, [r1, r3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	4313      	orrs	r3, r2
 8005198:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <main+0x724>)
 800519a:	7812      	ldrb	r2, [r2, #0]
 800519c:	3216      	adds	r2, #22
 800519e:	4916      	ldr	r1, [pc, #88]	; (80051f8 <main+0x728>)
 80051a0:	5c8a      	ldrb	r2, [r1, r2]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	4313      	orrs	r3, r2
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <main+0x734>)
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e087      	b.n	80052bc <main+0x7ec>
 80051ac:	200004f4 	.word	0x200004f4
 80051b0:	20000500 	.word	0x20000500
 80051b4:	20000548 	.word	0x20000548
 80051b8:	20000010 	.word	0x20000010
 80051bc:	0800ddec 	.word	0x0800ddec
 80051c0:	2000040c 	.word	0x2000040c
 80051c4:	2000042a 	.word	0x2000042a
 80051c8:	2000033c 	.word	0x2000033c
 80051cc:	20000001 	.word	0x20000001
 80051d0:	20000450 	.word	0x20000450
 80051d4:	20000452 	.word	0x20000452
 80051d8:	0800de04 	.word	0x0800de04
 80051dc:	20000435 	.word	0x20000435
 80051e0:	200003d4 	.word	0x200003d4
 80051e4:	200003c8 	.word	0x200003c8
 80051e8:	40590000 	.word	0x40590000
 80051ec:	2000053c 	.word	0x2000053c
 80051f0:	20000434 	.word	0x20000434
 80051f4:	2000042b 	.word	0x2000042b
 80051f8:	200003a8 	.word	0x200003a8
 80051fc:	20000003 	.word	0x20000003
 8005200:	2000042c 	.word	0x2000042c
 8005204:	200004fc 	.word	0x200004fc
								
								//PulseError = (RxDriverBuff[23+i] << 24) | (RxDriverBuff[24+i] << 16) | (RxDriverBuff[25+i] << 8) | RxDriverBuff[26+i];
							}
							else // ASDA-A3
							{								
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 8005208:	4b79      	ldr	r3, [pc, #484]	; (80053f0 <main+0x920>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	3305      	adds	r3, #5
 800520e:	4a79      	ldr	r2, [pc, #484]	; (80053f4 <main+0x924>)
 8005210:	5cd3      	ldrb	r3, [r2, r3]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	061a      	lsls	r2, r3, #24
 8005216:	4b76      	ldr	r3, [pc, #472]	; (80053f0 <main+0x920>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	3306      	adds	r3, #6
 800521c:	4975      	ldr	r1, [pc, #468]	; (80053f4 <main+0x924>)
 800521e:	5ccb      	ldrb	r3, [r1, r3]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	431a      	orrs	r2, r3
 8005226:	4b72      	ldr	r3, [pc, #456]	; (80053f0 <main+0x920>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	3303      	adds	r3, #3
 800522c:	4971      	ldr	r1, [pc, #452]	; (80053f4 <main+0x924>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	4313      	orrs	r3, r2
 8005236:	4a6e      	ldr	r2, [pc, #440]	; (80053f0 <main+0x920>)
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	3204      	adds	r2, #4
 800523c:	496d      	ldr	r1, [pc, #436]	; (80053f4 <main+0x924>)
 800523e:	5c8a      	ldrb	r2, [r1, r2]
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	4313      	orrs	r3, r2
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800524c:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8005250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005254:	4b68      	ldr	r3, [pc, #416]	; (80053f8 <main+0x928>)
 8005256:	edc3 7a00 	vstr	s15, [r3]
								
								if (fabs(MotorSpeedBuff) <= 2000)
 800525a:	4b67      	ldr	r3, [pc, #412]	; (80053f8 <main+0x928>)
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	eef0 7ae7 	vabs.f32	s15, s15
 8005264:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80053fc <main+0x92c>
 8005268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	d803      	bhi.n	800527a <main+0x7aa>
								{
									MotorSpeed = MotorSpeedBuff;
 8005272:	4b61      	ldr	r3, [pc, #388]	; (80053f8 <main+0x928>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a62      	ldr	r2, [pc, #392]	; (8005400 <main+0x930>)
 8005278:	6013      	str	r3, [r2, #0]
								}
								
								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 800527a:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <main+0x920>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	3309      	adds	r3, #9
 8005280:	4a5c      	ldr	r2, [pc, #368]	; (80053f4 <main+0x924>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	061a      	lsls	r2, r3, #24
 8005288:	4b59      	ldr	r3, [pc, #356]	; (80053f0 <main+0x920>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	330a      	adds	r3, #10
 800528e:	4959      	ldr	r1, [pc, #356]	; (80053f4 <main+0x924>)
 8005290:	5ccb      	ldrb	r3, [r1, r3]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	431a      	orrs	r2, r3
 8005298:	4b55      	ldr	r3, [pc, #340]	; (80053f0 <main+0x920>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3307      	adds	r3, #7
 800529e:	4955      	ldr	r1, [pc, #340]	; (80053f4 <main+0x924>)
 80052a0:	5ccb      	ldrb	r3, [r1, r3]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	4313      	orrs	r3, r2
 80052a8:	4a51      	ldr	r2, [pc, #324]	; (80053f0 <main+0x920>)
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	3208      	adds	r2, #8
 80052ae:	4951      	ldr	r1, [pc, #324]	; (80053f4 <main+0x924>)
 80052b0:	5c8a      	ldrb	r2, [r1, r2]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	4313      	orrs	r3, r2
 80052b6:	425b      	negs	r3, r3
 80052b8:	4a52      	ldr	r2, [pc, #328]	; (8005404 <main+0x934>)
 80052ba:	6013      	str	r3, [r2, #0]
								//PulseError = ((RxDriverBuff[13+i] << 24) | (RxDriverBuff[14+i] << 16) | (RxDriverBuff[11+i] << 8) | RxDriverBuff[12+i]);
								
								//ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/AsdaEncoderResolution; // Calculate Object Position in m
							}			
							
							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 80052bc:	221e      	movs	r2, #30
 80052be:	2100      	movs	r1, #0
 80052c0:	484c      	ldr	r0, [pc, #304]	; (80053f4 <main+0x924>)
 80052c2:	f004 f9bf 	bl	8009644 <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 80052c6:	2201      	movs	r2, #1
 80052c8:	494f      	ldr	r1, [pc, #316]	; (8005408 <main+0x938>)
 80052ca:	4850      	ldr	r0, [pc, #320]	; (800540c <main+0x93c>)
 80052cc:	f003 f9f7 	bl	80086be <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 80052d0:	4b48      	ldr	r3, [pc, #288]	; (80053f4 <main+0x924>)
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b06      	cmp	r3, #6
 80052d8:	d142      	bne.n	8005360 <main+0x890>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80052da:	221e      	movs	r2, #30
 80052dc:	2100      	movs	r1, #0
 80052de:	484c      	ldr	r0, [pc, #304]	; (8005410 <main+0x940>)
 80052e0:	f004 f9b0 	bl	8009644 <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]); 
 80052e4:	4b43      	ldr	r3, [pc, #268]	; (80053f4 <main+0x924>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	469c      	mov	ip, r3
 80052ec:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <main+0x924>)
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	469e      	mov	lr, r3
 80052f4:	4b3f      	ldr	r3, [pc, #252]	; (80053f4 <main+0x924>)
 80052f6:	789b      	ldrb	r3, [r3, #2]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <main+0x924>)
 80052fe:	78db      	ldrb	r3, [r3, #3]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	4619      	mov	r1, r3
 8005304:	4b3b      	ldr	r3, [pc, #236]	; (80053f4 <main+0x924>)
 8005306:	791b      	ldrb	r3, [r3, #4]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4618      	mov	r0, r3
 800530c:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <main+0x924>)
 800530e:	795b      	ldrb	r3, [r3, #5]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461e      	mov	r6, r3
 8005314:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <main+0x924>)
 8005316:	799b      	ldrb	r3, [r3, #6]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	4b35      	ldr	r3, [pc, #212]	; (80053f4 <main+0x924>)
 800531e:	79db      	ldrb	r3, [r3, #7]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <main+0x924>)
 8005326:	7a1b      	ldrb	r3, [r3, #8]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	9306      	str	r3, [sp, #24]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	9305      	str	r3, [sp, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	9603      	str	r6, [sp, #12]
 8005336:	9002      	str	r0, [sp, #8]
 8005338:	9101      	str	r1, [sp, #4]
 800533a:	9200      	str	r2, [sp, #0]
 800533c:	4673      	mov	r3, lr
 800533e:	4662      	mov	r2, ip
 8005340:	4934      	ldr	r1, [pc, #208]	; (8005414 <main+0x944>)
 8005342:	4833      	ldr	r0, [pc, #204]	; (8005410 <main+0x940>)
 8005344:	f004 fdf0 	bl	8009f28 <siprintf>
 8005348:	4603      	mov	r3, r0
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b32      	ldr	r3, [pc, #200]	; (8005418 <main+0x948>)
 800534e:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005350:	4b31      	ldr	r3, [pc, #196]	; (8005418 <main+0x948>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	b29a      	uxth	r2, r3
 8005356:	23c8      	movs	r3, #200	; 0xc8
 8005358:	492d      	ldr	r1, [pc, #180]	; (8005410 <main+0x940>)
 800535a:	4830      	ldr	r0, [pc, #192]	; (800541c <main+0x94c>)
 800535c:	f003 f91d 	bl	800859a <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8005360:	4b23      	ldr	r3, [pc, #140]	; (80053f0 <main+0x920>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	b2da      	uxtb	r2, r3
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <main+0x920>)
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	4b20      	ldr	r3, [pc, #128]	; (80053f0 <main+0x920>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b1e      	cmp	r3, #30
 8005372:	f67f aec0 	bls.w	80050f6 <main+0x626>
						}
						//break;						
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 8005376:	4b2a      	ldr	r3, [pc, #168]	; (8005420 <main+0x950>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7fb f8e4 	bl	8000548 <__aeabi_f2d>
 8005380:	a319      	add	r3, pc, #100	; (adr r3, 80053e8 <main+0x918>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fb f937 	bl	80005f8 <__aeabi_dmul>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4690      	mov	r8, r2
 8005390:	4699      	mov	r9, r3
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <main+0x934>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b23      	ldr	r3, [pc, #140]	; (8005424 <main+0x954>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f8c1 	bl	8000524 <__aeabi_i2d>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fb f925 	bl	80005f8 <__aeabi_dmul>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4690      	mov	r8, r2
 80053b4:	4699      	mov	r9, r3
 80053b6:	4b1c      	ldr	r3, [pc, #112]	; (8005428 <main+0x958>)
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fb f8b2 	bl	8000524 <__aeabi_i2d>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4640      	mov	r0, r8
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fb fa40 	bl	800084c <__aeabi_ddiv>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	f7fb fc08 	bl	8000be8 <__aeabi_d2f>
 80053d8:	4603      	mov	r3, r0
 80053da:	4a14      	ldr	r2, [pc, #80]	; (800542c <main+0x95c>)
 80053dc:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 80053de:	f7ff bbb2 	b.w	8004b46 <main+0x76>
 80053e2:	bf00      	nop
 80053e4:	f3af 8000 	nop.w
 80053e8:	51eb851f 	.word	0x51eb851f
 80053ec:	40191eb8 	.word	0x40191eb8
 80053f0:	2000042b 	.word	0x2000042b
 80053f4:	200003a8 	.word	0x200003a8
 80053f8:	200004f8 	.word	0x200004f8
 80053fc:	44fa0000 	.word	0x44fa0000
 8005400:	200004f4 	.word	0x200004f4
 8005404:	200004fc 	.word	0x200004fc
 8005408:	20000409 	.word	0x20000409
 800540c:	200002b4 	.word	0x200002b4
 8005410:	2000040c 	.word	0x2000040c
 8005414:	0800de0c 	.word	0x0800de0c
 8005418:	2000042a 	.word	0x2000042a
 800541c:	2000033c 	.word	0x2000033c
 8005420:	20000458 	.word	0x20000458
 8005424:	200004b0 	.word	0x200004b0
 8005428:	2000000a 	.word	0x2000000a
 800542c:	20000548 	.word	0x20000548

08005430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b094      	sub	sp, #80	; 0x50
 8005434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005436:	f107 0320 	add.w	r3, r7, #32
 800543a:	2230      	movs	r2, #48	; 0x30
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f004 f900 	bl	8009644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005444:	f107 030c 	add.w	r3, r7, #12
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	605a      	str	r2, [r3, #4]
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <SystemClock_Config+0xcc>)
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <SystemClock_Config+0xcc>)
 800545e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005462:	6413      	str	r3, [r2, #64]	; 0x40
 8005464:	4b25      	ldr	r3, [pc, #148]	; (80054fc <SystemClock_Config+0xcc>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005470:	2300      	movs	r3, #0
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	4b22      	ldr	r3, [pc, #136]	; (8005500 <SystemClock_Config+0xd0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <SystemClock_Config+0xd0>)
 800547a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <SystemClock_Config+0xd0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800548c:	2301      	movs	r3, #1
 800548e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005496:	2302      	movs	r3, #2
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800549a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800549e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80054a0:	230c      	movs	r3, #12
 80054a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80054a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80054a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054aa:	2302      	movs	r3, #2
 80054ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80054ae:	2304      	movs	r3, #4
 80054b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054b2:	f107 0320 	add.w	r3, r7, #32
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fcfa 	bl	8006eb0 <HAL_RCC_OscConfig>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80054c2:	f000 faff 	bl	8005ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054c6:	230f      	movs	r3, #15
 80054c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054ca:	2302      	movs	r3, #2
 80054cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80054d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80054d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80054d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80054dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80054de:	f107 030c 	add.w	r3, r7, #12
 80054e2:	2105      	movs	r1, #5
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 ff5b 	bl	80073a0 <HAL_RCC_ClockConfig>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80054f0:	f000 fae8 	bl	8005ac4 <Error_Handler>
  }
}
 80054f4:	bf00      	nop
 80054f6:	3750      	adds	r7, #80	; 0x50
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40023800 	.word	0x40023800
 8005500:	40007000 	.word	0x40007000

08005504 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005508:	2200      	movs	r2, #0
 800550a:	2100      	movs	r1, #0
 800550c:	2047      	movs	r0, #71	; 0x47
 800550e:	f000 ff36 	bl	800637e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005512:	2047      	movs	r0, #71	; 0x47
 8005514:	f000 ff4f 	bl	80063b6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005518:	2200      	movs	r2, #0
 800551a:	2101      	movs	r1, #1
 800551c:	2027      	movs	r0, #39	; 0x27
 800551e:	f000 ff2e 	bl	800637e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005522:	2027      	movs	r0, #39	; 0x27
 8005524:	f000 ff47 	bl	80063b6 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8005528:	2200      	movs	r2, #0
 800552a:	2102      	movs	r1, #2
 800552c:	201d      	movs	r0, #29
 800552e:	f000 ff26 	bl	800637e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005532:	201d      	movs	r0, #29
 8005534:	f000 ff3f 	bl	80063b6 <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 4, 0);
 8005538:	2200      	movs	r2, #0
 800553a:	2104      	movs	r1, #4
 800553c:	2035      	movs	r0, #53	; 0x35
 800553e:	f000 ff1e 	bl	800637e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005542:	2035      	movs	r0, #53	; 0x35
 8005544:	f000 ff37 	bl	80063b6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8005548:	2200      	movs	r2, #0
 800554a:	2103      	movs	r1, #3
 800554c:	201c      	movs	r0, #28
 800554e:	f000 ff16 	bl	800637e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005552:	201c      	movs	r0, #28
 8005554:	f000 ff2f 	bl	80063b6 <HAL_NVIC_EnableIRQ>
}
 8005558:	bf00      	nop
 800555a:	bd80      	pop	{r7, pc}

0800555c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005562:	f107 0318 	add.w	r3, r7, #24
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005570:	f107 0310 	add.w	r3, r7, #16
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800557a:	463b      	mov	r3, r7
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005586:	4b31      	ldr	r3, [pc, #196]	; (800564c <MX_TIM2_Init+0xf0>)
 8005588:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800558c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800558e:	4b2f      	ldr	r3, [pc, #188]	; (800564c <MX_TIM2_Init+0xf0>)
 8005590:	220a      	movs	r2, #10
 8005592:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005594:	4b2d      	ldr	r3, [pc, #180]	; (800564c <MX_TIM2_Init+0xf0>)
 8005596:	2200      	movs	r2, #0
 8005598:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 800559a:	4b2c      	ldr	r3, [pc, #176]	; (800564c <MX_TIM2_Init+0xf0>)
 800559c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80055a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055a2:	4b2a      	ldr	r3, [pc, #168]	; (800564c <MX_TIM2_Init+0xf0>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055a8:	4b28      	ldr	r3, [pc, #160]	; (800564c <MX_TIM2_Init+0xf0>)
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055ae:	4827      	ldr	r0, [pc, #156]	; (800564c <MX_TIM2_Init+0xf0>)
 80055b0:	f002 f8d6 	bl	8007760 <HAL_TIM_Base_Init>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80055ba:	f000 fa83 	bl	8005ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80055c4:	f107 0318 	add.w	r3, r7, #24
 80055c8:	4619      	mov	r1, r3
 80055ca:	4820      	ldr	r0, [pc, #128]	; (800564c <MX_TIM2_Init+0xf0>)
 80055cc:	f002 fbb4 	bl	8007d38 <HAL_TIM_ConfigClockSource>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80055d6:	f000 fa75 	bl	8005ac4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80055da:	481c      	ldr	r0, [pc, #112]	; (800564c <MX_TIM2_Init+0xf0>)
 80055dc:	f002 f9af 	bl	800793e <HAL_TIM_IC_Init>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80055e6:	f000 fa6d 	bl	8005ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055ea:	2320      	movs	r3, #32
 80055ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80055f2:	f107 0310 	add.w	r3, r7, #16
 80055f6:	4619      	mov	r1, r3
 80055f8:	4814      	ldr	r0, [pc, #80]	; (800564c <MX_TIM2_Init+0xf0>)
 80055fa:	f002 fef1 	bl	80083e0 <HAL_TIMEx_MasterConfigSynchronization>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8005604:	f000 fa5e 	bl	8005ac4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005608:	2300      	movs	r3, #0
 800560a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800560c:	2301      	movs	r3, #1
 800560e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005610:	2300      	movs	r3, #0
 8005612:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005618:	463b      	mov	r3, r7
 800561a:	2200      	movs	r2, #0
 800561c:	4619      	mov	r1, r3
 800561e:	480b      	ldr	r0, [pc, #44]	; (800564c <MX_TIM2_Init+0xf0>)
 8005620:	f002 faee 	bl	8007c00 <HAL_TIM_IC_ConfigChannel>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800562a:	f000 fa4b 	bl	8005ac4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800562e:	463b      	mov	r3, r7
 8005630:	2204      	movs	r2, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4805      	ldr	r0, [pc, #20]	; (800564c <MX_TIM2_Init+0xf0>)
 8005636:	f002 fae3 	bl	8007c00 <HAL_TIM_IC_ConfigChannel>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8005640:	f000 fa40 	bl	8005ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005644:	bf00      	nop
 8005646:	3728      	adds	r7, #40	; 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000224 	.word	0x20000224

08005650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005664:	463b      	mov	r3, r7
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800566c:	4b1c      	ldr	r3, [pc, #112]	; (80056e0 <MX_TIM3_Init+0x90>)
 800566e:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <MX_TIM3_Init+0x94>)
 8005670:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8005672:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <MX_TIM3_Init+0x90>)
 8005674:	2201      	movs	r2, #1
 8005676:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <MX_TIM3_Init+0x90>)
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 800567e:	4b18      	ldr	r3, [pc, #96]	; (80056e0 <MX_TIM3_Init+0x90>)
 8005680:	22a8      	movs	r2, #168	; 0xa8
 8005682:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <MX_TIM3_Init+0x90>)
 8005686:	2200      	movs	r2, #0
 8005688:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800568a:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <MX_TIM3_Init+0x90>)
 800568c:	2200      	movs	r2, #0
 800568e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005690:	4813      	ldr	r0, [pc, #76]	; (80056e0 <MX_TIM3_Init+0x90>)
 8005692:	f002 f865 	bl	8007760 <HAL_TIM_Base_Init>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800569c:	f000 fa12 	bl	8005ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4619      	mov	r1, r3
 80056ac:	480c      	ldr	r0, [pc, #48]	; (80056e0 <MX_TIM3_Init+0x90>)
 80056ae:	f002 fb43 	bl	8007d38 <HAL_TIM_ConfigClockSource>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80056b8:	f000 fa04 	bl	8005ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056bc:	2300      	movs	r3, #0
 80056be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056c4:	463b      	mov	r3, r7
 80056c6:	4619      	mov	r1, r3
 80056c8:	4805      	ldr	r0, [pc, #20]	; (80056e0 <MX_TIM3_Init+0x90>)
 80056ca:	f002 fe89 	bl	80083e0 <HAL_TIMEx_MasterConfigSynchronization>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80056d4:	f000 f9f6 	bl	8005ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056d8:	bf00      	nop
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	2000026c 	.word	0x2000026c
 80056e4:	40000400 	.word	0x40000400

080056e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80056ec:	4b11      	ldr	r3, [pc, #68]	; (8005734 <MX_UART5_Init+0x4c>)
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <MX_UART5_Init+0x50>)
 80056f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <MX_UART5_Init+0x4c>)
 80056f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80056f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80056fa:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <MX_UART5_Init+0x4c>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <MX_UART5_Init+0x4c>)
 8005702:	2200      	movs	r2, #0
 8005704:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <MX_UART5_Init+0x4c>)
 8005708:	2200      	movs	r2, #0
 800570a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <MX_UART5_Init+0x4c>)
 800570e:	220c      	movs	r2, #12
 8005710:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005712:	4b08      	ldr	r3, [pc, #32]	; (8005734 <MX_UART5_Init+0x4c>)
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005718:	4b06      	ldr	r3, [pc, #24]	; (8005734 <MX_UART5_Init+0x4c>)
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800571e:	4805      	ldr	r0, [pc, #20]	; (8005734 <MX_UART5_Init+0x4c>)
 8005720:	f002 feee 	bl	8008500 <HAL_UART_Init>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800572a:	f000 f9cb 	bl	8005ac4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	200002b4 	.word	0x200002b4
 8005738:	40005000 	.word	0x40005000

0800573c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 8005742:	4a12      	ldr	r2, [pc, #72]	; (800578c <MX_USART3_UART_Init+0x50>)
 8005744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 8005748:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800574c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 8005750:	2200      	movs	r2, #0
 8005752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 8005756:	2200      	movs	r2, #0
 8005758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 800575c:	2200      	movs	r2, #0
 800575e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 8005762:	220c      	movs	r2, #12
 8005764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005766:	4b08      	ldr	r3, [pc, #32]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005772:	4805      	ldr	r0, [pc, #20]	; (8005788 <MX_USART3_UART_Init+0x4c>)
 8005774:	f002 fec4 	bl	8008500 <HAL_UART_Init>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800577e:	f000 f9a1 	bl	8005ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200002f8 	.word	0x200002f8
 800578c:	40004800 	.word	0x40004800

08005790 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005794:	4b11      	ldr	r3, [pc, #68]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <MX_USART6_UART_Init+0x50>)
 8005798:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 800579c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80057a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 80057b6:	220c      	movs	r2, #12
 80057b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80057c6:	4805      	ldr	r0, [pc, #20]	; (80057dc <MX_USART6_UART_Init+0x4c>)
 80057c8:	f002 fe9a 	bl	8008500 <HAL_UART_Init>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80057d2:	f000 f977 	bl	8005ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80057d6:	bf00      	nop
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	2000033c 	.word	0x2000033c
 80057e0:	40011400 	.word	0x40011400

080057e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	; 0x30
 80057e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ea:	f107 031c 	add.w	r3, r7, #28
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	605a      	str	r2, [r3, #4]
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80057fa:	2300      	movs	r3, #0
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	4bab      	ldr	r3, [pc, #684]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	4aaa      	ldr	r2, [pc, #680]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005804:	f043 0310 	orr.w	r3, r3, #16
 8005808:	6313      	str	r3, [r2, #48]	; 0x30
 800580a:	4ba8      	ldr	r3, [pc, #672]	; (8005aac <MX_GPIO_Init+0x2c8>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	4ba4      	ldr	r3, [pc, #656]	; (8005aac <MX_GPIO_Init+0x2c8>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	4aa3      	ldr	r2, [pc, #652]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005820:	f043 0304 	orr.w	r3, r3, #4
 8005824:	6313      	str	r3, [r2, #48]	; 0x30
 8005826:	4ba1      	ldr	r3, [pc, #644]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	4b9d      	ldr	r3, [pc, #628]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	4a9c      	ldr	r2, [pc, #624]	; (8005aac <MX_GPIO_Init+0x2c8>)
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	6313      	str	r3, [r2, #48]	; 0x30
 8005842:	4b9a      	ldr	r3, [pc, #616]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	4b96      	ldr	r3, [pc, #600]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4a95      	ldr	r2, [pc, #596]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6313      	str	r3, [r2, #48]	; 0x30
 800585e:	4b93      	ldr	r3, [pc, #588]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	4b8f      	ldr	r3, [pc, #572]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	4a8e      	ldr	r2, [pc, #568]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	6313      	str	r3, [r2, #48]	; 0x30
 800587a:	4b8c      	ldr	r3, [pc, #560]	; (8005aac <MX_GPIO_Init+0x2c8>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <MX_GPIO_Init+0x2c8>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	4a87      	ldr	r2, [pc, #540]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005890:	f043 0308 	orr.w	r3, r3, #8
 8005894:	6313      	str	r3, [r2, #48]	; 0x30
 8005896:	4b85      	ldr	r3, [pc, #532]	; (8005aac <MX_GPIO_Init+0x2c8>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 80058a2:	2200      	movs	r2, #0
 80058a4:	f24a 3113 	movw	r1, #41747	; 0xa313
 80058a8:	4881      	ldr	r0, [pc, #516]	; (8005ab0 <MX_GPIO_Init+0x2cc>)
 80058aa:	f001 facd 	bl	8006e48 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 80058ae:	2200      	movs	r2, #0
 80058b0:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80058b4:	487f      	ldr	r0, [pc, #508]	; (8005ab4 <MX_GPIO_Init+0x2d0>)
 80058b6:	f001 fac7 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 80058ba:	2200      	movs	r2, #0
 80058bc:	f649 5108 	movw	r1, #40200	; 0x9d08
 80058c0:	487d      	ldr	r0, [pc, #500]	; (8005ab8 <MX_GPIO_Init+0x2d4>)
 80058c2:	f001 fac1 	bl	8006e48 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 80058c6:	2201      	movs	r2, #1
 80058c8:	2130      	movs	r1, #48	; 0x30
 80058ca:	487a      	ldr	r0, [pc, #488]	; (8005ab4 <MX_GPIO_Init+0x2d0>)
 80058cc:	f001 fabc 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 80058d0:	2200      	movs	r2, #0
 80058d2:	f246 0165 	movw	r1, #24677	; 0x6065
 80058d6:	4879      	ldr	r0, [pc, #484]	; (8005abc <MX_GPIO_Init+0x2d8>)
 80058d8:	f001 fab6 	bl	8006e48 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 80058dc:	2201      	movs	r2, #1
 80058de:	f248 0102 	movw	r1, #32770	; 0x8002
 80058e2:	4876      	ldr	r0, [pc, #472]	; (8005abc <MX_GPIO_Init+0x2d8>)
 80058e4:	f001 fab0 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 80058e8:	2201      	movs	r2, #1
 80058ea:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 80058ee:	4870      	ldr	r0, [pc, #448]	; (8005ab0 <MX_GPIO_Init+0x2cc>)
 80058f0:	f001 faaa 	bl	8006e48 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 80058f4:	2201      	movs	r2, #1
 80058f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058fa:	4871      	ldr	r0, [pc, #452]	; (8005ac0 <MX_GPIO_Init+0x2dc>)
 80058fc:	f001 faa4 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8005900:	2200      	movs	r2, #0
 8005902:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8005906:	486e      	ldr	r0, [pc, #440]	; (8005ac0 <MX_GPIO_Init+0x2dc>)
 8005908:	f001 fa9e 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 800590c:	236c      	movs	r3, #108	; 0x6c
 800590e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005910:	2300      	movs	r3, #0
 8005912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005914:	2300      	movs	r3, #0
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005918:	f107 031c 	add.w	r3, r7, #28
 800591c:	4619      	mov	r1, r3
 800591e:	4864      	ldr	r0, [pc, #400]	; (8005ab0 <MX_GPIO_Init+0x2cc>)
 8005920:	f001 f8de 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8005924:	f64f 7393 	movw	r3, #65427	; 0xff93
 8005928:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800592a:	2301      	movs	r3, #1
 800592c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005932:	2300      	movs	r3, #0
 8005934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005936:	f107 031c 	add.w	r3, r7, #28
 800593a:	4619      	mov	r1, r3
 800593c:	485c      	ldr	r0, [pc, #368]	; (8005ab0 <MX_GPIO_Init+0x2cc>)
 800593e:	f001 f8cf 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 8005942:	f242 0307 	movw	r3, #8199	; 0x2007
 8005946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005948:	2300      	movs	r3, #0
 800594a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005950:	f107 031c 	add.w	r3, r7, #28
 8005954:	4619      	mov	r1, r3
 8005956:	4857      	ldr	r0, [pc, #348]	; (8005ab4 <MX_GPIO_Init+0x2d0>)
 8005958:	f001 f8c2 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 800595c:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8005960:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005962:	2301      	movs	r3, #1
 8005964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005966:	2300      	movs	r3, #0
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800596a:	2300      	movs	r3, #0
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800596e:	f107 031c 	add.w	r3, r7, #28
 8005972:	4619      	mov	r1, r3
 8005974:	484f      	ldr	r0, [pc, #316]	; (8005ab4 <MX_GPIO_Init+0x2d0>)
 8005976:	f001 f8b3 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 800597a:	2301      	movs	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800597e:	2302      	movs	r3, #2
 8005980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005982:	2300      	movs	r3, #0
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005986:	2303      	movs	r3, #3
 8005988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800598a:	2308      	movs	r3, #8
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 800598e:	f107 031c 	add.w	r3, r7, #28
 8005992:	4619      	mov	r1, r3
 8005994:	4848      	ldr	r0, [pc, #288]	; (8005ab8 <MX_GPIO_Init+0x2d4>)
 8005996:	f001 f8a3 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 800599a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800599e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059a0:	2300      	movs	r3, #0
 80059a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a8:	f107 031c 	add.w	r3, r7, #28
 80059ac:	4619      	mov	r1, r3
 80059ae:	4842      	ldr	r0, [pc, #264]	; (8005ab8 <MX_GPIO_Init+0x2d4>)
 80059b0:	f001 f896 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 80059b4:	f649 5308 	movw	r3, #40200	; 0x9d08
 80059b8:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ba:	2301      	movs	r3, #1
 80059bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c2:	2300      	movs	r3, #0
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c6:	f107 031c 	add.w	r3, r7, #28
 80059ca:	4619      	mov	r1, r3
 80059cc:	483a      	ldr	r0, [pc, #232]	; (8005ab8 <MX_GPIO_Init+0x2d4>)
 80059ce:	f001 f887 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin Tor1_PB2_16_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin
 80059d2:	f24e 0367 	movw	r3, #57447	; 0xe067
 80059d6:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059d8:	2301      	movs	r3, #1
 80059da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e0:	2300      	movs	r3, #0
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e4:	f107 031c 	add.w	r3, r7, #28
 80059e8:	4619      	mov	r1, r3
 80059ea:	4834      	ldr	r0, [pc, #208]	; (8005abc <MX_GPIO_Init+0x2d8>)
 80059ec:	f001 f878 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 80059f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059f6:	2312      	movs	r3, #18
 80059f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059fa:	2301      	movs	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059fe:	2303      	movs	r3, #3
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005a02:	2304      	movs	r3, #4
 8005a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a06:	f107 031c 	add.w	r3, r7, #28
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	482b      	ldr	r0, [pc, #172]	; (8005abc <MX_GPIO_Init+0x2d8>)
 8005a0e:	f001 f867 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 8005a12:	f241 2318 	movw	r3, #4632	; 0x1218
 8005a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	4619      	mov	r1, r3
 8005a26:	4825      	ldr	r0, [pc, #148]	; (8005abc <MX_GPIO_Init+0x2d8>)
 8005a28:	f001 f85a 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 8005a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005a32:	2311      	movs	r3, #17
 8005a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 8005a3e:	f107 031c 	add.w	r3, r7, #28
 8005a42:	4619      	mov	r1, r3
 8005a44:	481e      	ldr	r0, [pc, #120]	; (8005ac0 <MX_GPIO_Init+0x2dc>)
 8005a46:	f001 f84b 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 8005a4a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8005a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a50:	2301      	movs	r3, #1
 8005a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a5c:	f107 031c 	add.w	r3, r7, #28
 8005a60:	4619      	mov	r1, r3
 8005a62:	4817      	ldr	r0, [pc, #92]	; (8005ac0 <MX_GPIO_Init+0x2dc>)
 8005a64:	f001 f83c 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8005a68:	f245 0383 	movw	r3, #20611	; 0x5083
 8005a6c:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a76:	f107 031c 	add.w	r3, r7, #28
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4810      	ldr	r0, [pc, #64]	; (8005ac0 <MX_GPIO_Init+0x2dc>)
 8005a7e:	f001 f82f 	bl	8006ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 8005a82:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a88:	2312      	movs	r3, #18
 8005a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a90:	2303      	movs	r3, #3
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a94:	2304      	movs	r3, #4
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a98:	f107 031c 	add.w	r3, r7, #28
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4807      	ldr	r0, [pc, #28]	; (8005abc <MX_GPIO_Init+0x2d8>)
 8005aa0:	f001 f81e 	bl	8006ae0 <HAL_GPIO_Init>

}
 8005aa4:	bf00      	nop
 8005aa6:	3730      	adds	r7, #48	; 0x30
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40020800 	.word	0x40020800
 8005ab8:	40020000 	.word	0x40020000
 8005abc:	40020400 	.word	0x40020400
 8005ac0:	40020c00 	.word	0x40020c00

08005ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8005ac8:	e7fe      	b.n	8005ac8 <Error_Handler+0x4>
	...

08005acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <HAL_MspInit+0x4c>)
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	4a0f      	ldr	r2, [pc, #60]	; (8005b18 <HAL_MspInit+0x4c>)
 8005adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <HAL_MspInit+0x4c>)
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <HAL_MspInit+0x4c>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <HAL_MspInit+0x4c>)
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <HAL_MspInit+0x4c>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800

08005b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	; 0x30
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b24:	f107 031c 	add.w	r3, r7, #28
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d12c      	bne.n	8005b98 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	4b30      	ldr	r3, [pc, #192]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a2f      	ldr	r2, [pc, #188]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	4b29      	ldr	r3, [pc, #164]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	6313      	str	r3, [r2, #48]	; 0x30
 8005b6a:	4b26      	ldr	r3, [pc, #152]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 8005b76:	2322      	movs	r3, #34	; 0x22
 8005b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b82:	2300      	movs	r3, #0
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005b86:	2301      	movs	r3, #1
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b8a:	f107 031c 	add.w	r3, r7, #28
 8005b8e:	4619      	mov	r1, r3
 8005b90:	481d      	ldr	r0, [pc, #116]	; (8005c08 <HAL_TIM_Base_MspInit+0xec>)
 8005b92:	f000 ffa5 	bl	8006ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005b96:	e030      	b.n	8005bfa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_TIM_Base_MspInit+0xf0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d12b      	bne.n	8005bfa <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	4b17      	ldr	r3, [pc, #92]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005bac:	f043 0302 	orr.w	r3, r3, #2
 8005bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	4a0f      	ldr	r2, [pc, #60]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bce:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <HAL_TIM_Base_MspInit+0xe8>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 8005bda:	2340      	movs	r3, #64	; 0x40
 8005bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bde:	2302      	movs	r3, #2
 8005be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be6:	2300      	movs	r3, #0
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005bea:	2302      	movs	r3, #2
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 8005bee:	f107 031c 	add.w	r3, r7, #28
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4804      	ldr	r0, [pc, #16]	; (8005c08 <HAL_TIM_Base_MspInit+0xec>)
 8005bf6:	f000 ff73 	bl	8006ae0 <HAL_GPIO_Init>
}
 8005bfa:	bf00      	nop
 8005bfc:	3730      	adds	r7, #48	; 0x30
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40023800 	.word	0x40023800
 8005c08:	40020000 	.word	0x40020000
 8005c0c:	40000400 	.word	0x40000400

08005c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08e      	sub	sp, #56	; 0x38
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5b      	ldr	r2, [pc, #364]	; (8005d9c <HAL_UART_MspInit+0x18c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d14b      	bne.n	8005cca <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005c32:	2300      	movs	r3, #0
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	4b5a      	ldr	r3, [pc, #360]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	4a59      	ldr	r2, [pc, #356]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c40:	6413      	str	r3, [r2, #64]	; 0x40
 8005c42:	4b57      	ldr	r3, [pc, #348]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4a:	623b      	str	r3, [r7, #32]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	4a52      	ldr	r2, [pc, #328]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c58:	f043 0304 	orr.w	r3, r3, #4
 8005c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c5e:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	4b4c      	ldr	r3, [pc, #304]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	4a4b      	ldr	r2, [pc, #300]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c74:	f043 0308 	orr.w	r3, r3, #8
 8005c78:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7a:	4b49      	ldr	r3, [pc, #292]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 8005c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c94:	2303      	movs	r3, #3
 8005c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005c98:	2308      	movs	r3, #8
 8005c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8005c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4840      	ldr	r0, [pc, #256]	; (8005da4 <HAL_UART_MspInit+0x194>)
 8005ca4:	f000 ff1c 	bl	8006ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 8005ca8:	2304      	movs	r3, #4
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cac:	2302      	movs	r3, #2
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005cb8:	2308      	movs	r3, #8
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8005cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4839      	ldr	r0, [pc, #228]	; (8005da8 <HAL_UART_MspInit+0x198>)
 8005cc4:	f000 ff0c 	bl	8006ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005cc8:	e063      	b.n	8005d92 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a37      	ldr	r2, [pc, #220]	; (8005dac <HAL_UART_MspInit+0x19c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d12d      	bne.n	8005d30 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	4a30      	ldr	r2, [pc, #192]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce4:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	4a29      	ldr	r2, [pc, #164]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005cfa:	f043 0308 	orr.w	r3, r3, #8
 8005cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8005d00:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d12:	2302      	movs	r3, #2
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d1e:	2307      	movs	r3, #7
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d26:	4619      	mov	r1, r3
 8005d28:	481f      	ldr	r0, [pc, #124]	; (8005da8 <HAL_UART_MspInit+0x198>)
 8005d2a:	f000 fed9 	bl	8006ae0 <HAL_GPIO_Init>
}
 8005d2e:	e030      	b.n	8005d92 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART6)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <HAL_UART_MspInit+0x1a0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d12b      	bne.n	8005d92 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	4b18      	ldr	r3, [pc, #96]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005d44:	f043 0320 	orr.w	r3, r3, #32
 8005d48:	6453      	str	r3, [r2, #68]	; 0x44
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d56:	2300      	movs	r3, #0
 8005d58:	60bb      	str	r3, [r7, #8]
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	4a10      	ldr	r2, [pc, #64]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005d60:	f043 0304 	orr.w	r3, r3, #4
 8005d64:	6313      	str	r3, [r2, #48]	; 0x30
 8005d66:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <HAL_UART_MspInit+0x190>)
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d72:	23c0      	movs	r3, #192	; 0xc0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d76:	2302      	movs	r3, #2
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005d82:	2308      	movs	r3, #8
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4805      	ldr	r0, [pc, #20]	; (8005da4 <HAL_UART_MspInit+0x194>)
 8005d8e:	f000 fea7 	bl	8006ae0 <HAL_GPIO_Init>
}
 8005d92:	bf00      	nop
 8005d94:	3738      	adds	r7, #56	; 0x38
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40005000 	.word	0x40005000
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40020800 	.word	0x40020800
 8005da8:	40020c00 	.word	0x40020c00
 8005dac:	40004800 	.word	0x40004800
 8005db0:	40011400 	.word	0x40011400

08005db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005db8:	e7fe      	b.n	8005db8 <NMI_Handler+0x4>

08005dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dbe:	e7fe      	b.n	8005dbe <HardFault_Handler+0x4>

08005dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dc4:	e7fe      	b.n	8005dc4 <MemManage_Handler+0x4>

08005dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dca:	e7fe      	b.n	8005dca <BusFault_Handler+0x4>

08005dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dd0:	e7fe      	b.n	8005dd0 <UsageFault_Handler+0x4>

08005dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dd6:	bf00      	nop
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005de4:	bf00      	nop
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e00:	f000 f988 	bl	8006114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e04:	bf00      	nop
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005e0c:	4802      	ldr	r0, [pc, #8]	; (8005e18 <TIM2_IRQHandler+0x10>)
 8005e0e:	f001 fdef 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005e12:	bf00      	nop
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000224 	.word	0x20000224

08005e1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005e20:	4802      	ldr	r0, [pc, #8]	; (8005e2c <TIM3_IRQHandler+0x10>)
 8005e22:	f001 fde5 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	2000026c 	.word	0x2000026c

08005e30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005e34:	4802      	ldr	r0, [pc, #8]	; (8005e40 <USART3_IRQHandler+0x10>)
 8005e36:	f002 fc73 	bl	8008720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005e3a:	bf00      	nop
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	200002f8 	.word	0x200002f8

08005e44 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005e48:	4802      	ldr	r0, [pc, #8]	; (8005e54 <UART5_IRQHandler+0x10>)
 8005e4a:	f002 fc69 	bl	8008720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005e4e:	bf00      	nop
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	200002b4 	.word	0x200002b4

08005e58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005e5c:	4802      	ldr	r0, [pc, #8]	; (8005e68 <USART6_IRQHandler+0x10>)
 8005e5e:	f002 fc5f 	bl	8008720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005e62:	bf00      	nop
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	2000033c 	.word	0x2000033c

08005e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
	return 1;
 8005e70:	2301      	movs	r3, #1
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <_kill>:

int _kill(int pid, int sig)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005e86:	f003 fbb3 	bl	80095f0 <__errno>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2216      	movs	r2, #22
 8005e8e:	601a      	str	r2, [r3, #0]
	return -1;
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <_exit>:

void _exit (int status)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ffe7 	bl	8005e7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8005eae:	e7fe      	b.n	8005eae <_exit+0x12>

08005eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e00a      	b.n	8005ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005ec2:	f3af 8000 	nop.w
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	60ba      	str	r2, [r7, #8]
 8005ece:	b2ca      	uxtb	r2, r1
 8005ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	dbf0      	blt.n	8005ec2 <_read+0x12>
	}

return len;
 8005ee0:	687b      	ldr	r3, [r7, #4]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b086      	sub	sp, #24
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e009      	b.n	8005f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	60ba      	str	r2, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	dbf1      	blt.n	8005efc <_write+0x12>
	}
	return len;
 8005f18:	687b      	ldr	r3, [r7, #4]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <_close>:

int _close(int file)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
	return -1;
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <_isatty>:

int _isatty(int file)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
	return 1;
 8005f62:	2301      	movs	r3, #1
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f94:	4a14      	ldr	r2, [pc, #80]	; (8005fe8 <_sbrk+0x5c>)
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <_sbrk+0x60>)
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005fa0:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <_sbrk+0x64>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <_sbrk+0x64>)
 8005faa:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <_sbrk+0x68>)
 8005fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005fae:	4b10      	ldr	r3, [pc, #64]	; (8005ff0 <_sbrk+0x64>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d207      	bcs.n	8005fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005fbc:	f003 fb18 	bl	80095f0 <__errno>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	220c      	movs	r2, #12
 8005fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fca:	e009      	b.n	8005fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <_sbrk+0x64>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <_sbrk+0x64>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <_sbrk+0x64>)
 8005fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fde:	68fb      	ldr	r3, [r7, #12]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20020000 	.word	0x20020000
 8005fec:	00000400 	.word	0x00000400
 8005ff0:	20000550 	.word	0x20000550
 8005ff4:	20000588 	.word	0x20000588

08005ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <SystemInit+0x20>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	4a05      	ldr	r2, [pc, #20]	; (8006018 <SystemInit+0x20>)
 8006004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	e000ed00 	.word	0xe000ed00

0800601c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800601c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006020:	480d      	ldr	r0, [pc, #52]	; (8006058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006022:	490e      	ldr	r1, [pc, #56]	; (800605c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006024:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006028:	e002      	b.n	8006030 <LoopCopyDataInit>

0800602a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800602a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800602c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800602e:	3304      	adds	r3, #4

08006030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006034:	d3f9      	bcc.n	800602a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006036:	4a0b      	ldr	r2, [pc, #44]	; (8006064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006038:	4c0b      	ldr	r4, [pc, #44]	; (8006068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800603a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800603c:	e001      	b.n	8006042 <LoopFillZerobss>

0800603e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800603e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006040:	3204      	adds	r2, #4

08006042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006044:	d3fb      	bcc.n	800603e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006046:	f7ff ffd7 	bl	8005ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800604a:	f003 fad7 	bl	80095fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800604e:	f7fe fd3f 	bl	8004ad0 <main>
  bx  lr    
 8006052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800605c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8006060:	0800e350 	.word	0x0800e350
  ldr r2, =_sbss
 8006064:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8006068:	20000588 	.word	0x20000588

0800606c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800606c:	e7fe      	b.n	800606c <ADC_IRQHandler>
	...

08006070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <HAL_Init+0x40>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <HAL_Init+0x40>)
 800607a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800607e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <HAL_Init+0x40>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <HAL_Init+0x40>)
 8006086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800608a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <HAL_Init+0x40>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a07      	ldr	r2, [pc, #28]	; (80060b0 <HAL_Init+0x40>)
 8006092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006098:	2003      	movs	r0, #3
 800609a:	f000 f965 	bl	8006368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800609e:	2000      	movs	r0, #0
 80060a0:	f000 f808 	bl	80060b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060a4:	f7ff fd12 	bl	8005acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40023c00 	.word	0x40023c00

080060b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060bc:	4b12      	ldr	r3, [pc, #72]	; (8006108 <HAL_InitTick+0x54>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b12      	ldr	r3, [pc, #72]	; (800610c <HAL_InitTick+0x58>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f981 	bl	80063da <HAL_SYSTICK_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e00e      	b.n	8006100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b0f      	cmp	r3, #15
 80060e6:	d80a      	bhi.n	80060fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060e8:	2200      	movs	r2, #0
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	f000 f945 	bl	800637e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060f4:	4a06      	ldr	r2, [pc, #24]	; (8006110 <HAL_InitTick+0x5c>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e000      	b.n	8006100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20000014 	.word	0x20000014
 800610c:	2000001c 	.word	0x2000001c
 8006110:	20000018 	.word	0x20000018

08006114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <HAL_IncTick+0x20>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <HAL_IncTick+0x24>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4413      	add	r3, r2
 8006124:	4a04      	ldr	r2, [pc, #16]	; (8006138 <HAL_IncTick+0x24>)
 8006126:	6013      	str	r3, [r2, #0]
}
 8006128:	bf00      	nop
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	2000001c 	.word	0x2000001c
 8006138:	20000554 	.word	0x20000554

0800613c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  return uwTick;
 8006140:	4b03      	ldr	r3, [pc, #12]	; (8006150 <HAL_GetTick+0x14>)
 8006142:	681b      	ldr	r3, [r3, #0]
}
 8006144:	4618      	mov	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000554 	.word	0x20000554

08006154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800615c:	f7ff ffee 	bl	800613c <HAL_GetTick>
 8006160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d005      	beq.n	800617a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <HAL_Delay+0x44>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800617a:	bf00      	nop
 800617c:	f7ff ffde 	bl	800613c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	429a      	cmp	r2, r3
 800618a:	d8f7      	bhi.n	800617c <HAL_Delay+0x28>
  {
  }
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	2000001c 	.word	0x2000001c

0800619c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <__NVIC_SetPriorityGrouping+0x44>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061b8:	4013      	ands	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061ce:	4a04      	ldr	r2, [pc, #16]	; (80061e0 <__NVIC_SetPriorityGrouping+0x44>)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	60d3      	str	r3, [r2, #12]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <__NVIC_GetPriorityGrouping+0x18>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	f003 0307 	and.w	r3, r3, #7
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000ed00 	.word	0xe000ed00

08006200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800620a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800620e:	2b00      	cmp	r3, #0
 8006210:	db0b      	blt.n	800622a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	f003 021f 	and.w	r2, r3, #31
 8006218:	4907      	ldr	r1, [pc, #28]	; (8006238 <__NVIC_EnableIRQ+0x38>)
 800621a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	2001      	movs	r0, #1
 8006222:	fa00 f202 	lsl.w	r2, r0, r2
 8006226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	e000e100 	.word	0xe000e100

0800623c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624c:	2b00      	cmp	r3, #0
 800624e:	db0a      	blt.n	8006266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	490c      	ldr	r1, [pc, #48]	; (8006288 <__NVIC_SetPriority+0x4c>)
 8006256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625a:	0112      	lsls	r2, r2, #4
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	440b      	add	r3, r1
 8006260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006264:	e00a      	b.n	800627c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	4908      	ldr	r1, [pc, #32]	; (800628c <__NVIC_SetPriority+0x50>)
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	3b04      	subs	r3, #4
 8006274:	0112      	lsls	r2, r2, #4
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	440b      	add	r3, r1
 800627a:	761a      	strb	r2, [r3, #24]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	e000e100 	.word	0xe000e100
 800628c:	e000ed00 	.word	0xe000ed00

08006290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	; 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f1c3 0307 	rsb	r3, r3, #7
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	bf28      	it	cs
 80062ae:	2304      	movcs	r3, #4
 80062b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3304      	adds	r3, #4
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d902      	bls.n	80062c0 <NVIC_EncodePriority+0x30>
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3b03      	subs	r3, #3
 80062be:	e000      	b.n	80062c2 <NVIC_EncodePriority+0x32>
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43da      	mvns	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	401a      	ands	r2, r3
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062d8:	f04f 31ff 	mov.w	r1, #4294967295
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	43d9      	mvns	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e8:	4313      	orrs	r3, r2
         );
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3724      	adds	r7, #36	; 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
	...

080062f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80062fc:	f3bf 8f4f 	dsb	sy
}
 8006300:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <__NVIC_SystemReset+0x24>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800630a:	4904      	ldr	r1, [pc, #16]	; (800631c <__NVIC_SystemReset+0x24>)
 800630c:	4b04      	ldr	r3, [pc, #16]	; (8006320 <__NVIC_SystemReset+0x28>)
 800630e:	4313      	orrs	r3, r2
 8006310:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006312:	f3bf 8f4f 	dsb	sy
}
 8006316:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <__NVIC_SystemReset+0x20>
 800631c:	e000ed00 	.word	0xe000ed00
 8006320:	05fa0004 	.word	0x05fa0004

08006324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3b01      	subs	r3, #1
 8006330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006334:	d301      	bcc.n	800633a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006336:	2301      	movs	r3, #1
 8006338:	e00f      	b.n	800635a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800633a:	4a0a      	ldr	r2, [pc, #40]	; (8006364 <SysTick_Config+0x40>)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3b01      	subs	r3, #1
 8006340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006342:	210f      	movs	r1, #15
 8006344:	f04f 30ff 	mov.w	r0, #4294967295
 8006348:	f7ff ff78 	bl	800623c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <SysTick_Config+0x40>)
 800634e:	2200      	movs	r2, #0
 8006350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006352:	4b04      	ldr	r3, [pc, #16]	; (8006364 <SysTick_Config+0x40>)
 8006354:	2207      	movs	r2, #7
 8006356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	e000e010 	.word	0xe000e010

08006368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff ff13 	bl	800619c <__NVIC_SetPriorityGrouping>
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800637e:	b580      	push	{r7, lr}
 8006380:	b086      	sub	sp, #24
 8006382:	af00      	add	r7, sp, #0
 8006384:	4603      	mov	r3, r0
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006390:	f7ff ff28 	bl	80061e4 <__NVIC_GetPriorityGrouping>
 8006394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	6978      	ldr	r0, [r7, #20]
 800639c:	f7ff ff78 	bl	8006290 <NVIC_EncodePriority>
 80063a0:	4602      	mov	r2, r0
 80063a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a6:	4611      	mov	r1, r2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff ff47 	bl	800623c <__NVIC_SetPriority>
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	4603      	mov	r3, r0
 80063be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff ff1b 	bl	8006200 <__NVIC_EnableIRQ>
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80063d6:	f7ff ff8f 	bl	80062f8 <__NVIC_SystemReset>

080063da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff ff9e 	bl	8006324 <SysTick_Config>
 80063e8:	4603      	mov	r3, r0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006400:	f7ff fe9c 	bl	800613c <HAL_GetTick>
 8006404:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d008      	beq.n	8006424 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2280      	movs	r2, #128	; 0x80
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e052      	b.n	80064ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0216 	bic.w	r2, r2, #22
 8006432:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006442:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d103      	bne.n	8006454 <HAL_DMA_Abort+0x62>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0208 	bic.w	r2, r2, #8
 8006462:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006474:	e013      	b.n	800649e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006476:	f7ff fe61 	bl	800613c <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b05      	cmp	r3, #5
 8006482:	d90c      	bls.n	800649e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2203      	movs	r2, #3
 800648e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e015      	b.n	80064ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e4      	bne.n	8006476 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b0:	223f      	movs	r2, #63	; 0x3f
 80064b2:	409a      	lsls	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d004      	beq.n	80064f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2280      	movs	r2, #128	; 0x80
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e00c      	b.n	800650a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2205      	movs	r2, #5
 80064f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800652a:	4b23      	ldr	r3, [pc, #140]	; (80065b8 <HAL_FLASH_Program+0xa0>)
 800652c:	7e1b      	ldrb	r3, [r3, #24]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <HAL_FLASH_Program+0x1e>
 8006532:	2302      	movs	r3, #2
 8006534:	e03b      	b.n	80065ae <HAL_FLASH_Program+0x96>
 8006536:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <HAL_FLASH_Program+0xa0>)
 8006538:	2201      	movs	r2, #1
 800653a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800653c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006540:	f000 f87c 	bl	800663c <FLASH_WaitForLastOperation>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d12b      	bne.n	80065a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006554:	783b      	ldrb	r3, [r7, #0]
 8006556:	4619      	mov	r1, r3
 8006558:	68b8      	ldr	r0, [r7, #8]
 800655a:	f000 f927 	bl	80067ac <FLASH_Program_Byte>
 800655e:	e016      	b.n	800658e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d105      	bne.n	8006572 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006566:	883b      	ldrh	r3, [r7, #0]
 8006568:	4619      	mov	r1, r3
 800656a:	68b8      	ldr	r0, [r7, #8]
 800656c:	f000 f8fa 	bl	8006764 <FLASH_Program_HalfWord>
 8006570:	e00d      	b.n	800658e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d105      	bne.n	8006584 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	4619      	mov	r1, r3
 800657c:	68b8      	ldr	r0, [r7, #8]
 800657e:	f000 f8cf 	bl	8006720 <FLASH_Program_Word>
 8006582:	e004      	b.n	800658e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006588:	68b8      	ldr	r0, [r7, #8]
 800658a:	f000 f897 	bl	80066bc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800658e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006592:	f000 f853 	bl	800663c <FLASH_WaitForLastOperation>
 8006596:	4603      	mov	r3, r0
 8006598:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800659a:	4b08      	ldr	r3, [pc, #32]	; (80065bc <HAL_FLASH_Program+0xa4>)
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	4a07      	ldr	r2, [pc, #28]	; (80065bc <HAL_FLASH_Program+0xa4>)
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80065a6:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <HAL_FLASH_Program+0xa0>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000558 	.word	0x20000558
 80065bc:	40023c00 	.word	0x40023c00

080065c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80065ca:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <HAL_FLASH_Unlock+0x38>)
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da0b      	bge.n	80065ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <HAL_FLASH_Unlock+0x38>)
 80065d4:	4a09      	ldr	r2, [pc, #36]	; (80065fc <HAL_FLASH_Unlock+0x3c>)
 80065d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80065d8:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <HAL_FLASH_Unlock+0x38>)
 80065da:	4a09      	ldr	r2, [pc, #36]	; (8006600 <HAL_FLASH_Unlock+0x40>)
 80065dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80065de:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <HAL_FLASH_Unlock+0x38>)
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da01      	bge.n	80065ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80065ea:	79fb      	ldrb	r3, [r7, #7]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40023c00 	.word	0x40023c00
 80065fc:	45670123 	.word	0x45670123
 8006600:	cdef89ab 	.word	0xcdef89ab

08006604 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_FLASH_Lock+0x1c>)
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	4a04      	ldr	r2, [pc, #16]	; (8006620 <HAL_FLASH_Lock+0x1c>)
 800660e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006612:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40023c00 	.word	0x40023c00

08006624 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006628:	4b03      	ldr	r3, [pc, #12]	; (8006638 <HAL_FLASH_GetError+0x14>)
 800662a:	69db      	ldr	r3, [r3, #28]
}  
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000558 	.word	0x20000558

0800663c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <FLASH_WaitForLastOperation+0x78>)
 800664a:	2200      	movs	r2, #0
 800664c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800664e:	f7ff fd75 	bl	800613c <HAL_GetTick>
 8006652:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006654:	e010      	b.n	8006678 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d00c      	beq.n	8006678 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <FLASH_WaitForLastOperation+0x38>
 8006664:	f7ff fd6a 	bl	800613c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d201      	bcs.n	8006678 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e019      	b.n	80066ac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006678:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <FLASH_WaitForLastOperation+0x7c>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e8      	bne.n	8006656 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <FLASH_WaitForLastOperation+0x7c>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <FLASH_WaitForLastOperation+0x7c>)
 8006692:	2201      	movs	r2, #1
 8006694:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <FLASH_WaitForLastOperation+0x7c>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80066a2:	f000 f8a5 	bl	80067f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
  
}  
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000558 	.word	0x20000558
 80066b8:	40023c00 	.word	0x40023c00

080066bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80066c8:	4b14      	ldr	r3, [pc, #80]	; (800671c <FLASH_Program_DoubleWord+0x60>)
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	4a13      	ldr	r2, [pc, #76]	; (800671c <FLASH_Program_DoubleWord+0x60>)
 80066ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80066d4:	4b11      	ldr	r3, [pc, #68]	; (800671c <FLASH_Program_DoubleWord+0x60>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	4a10      	ldr	r2, [pc, #64]	; (800671c <FLASH_Program_DoubleWord+0x60>)
 80066da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <FLASH_Program_DoubleWord+0x60>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	4a0d      	ldr	r2, [pc, #52]	; (800671c <FLASH_Program_DoubleWord+0x60>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80066f2:	f3bf 8f6f 	isb	sy
}
 80066f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80066f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	000a      	movs	r2, r1
 8006706:	2300      	movs	r3, #0
 8006708:	68f9      	ldr	r1, [r7, #12]
 800670a:	3104      	adds	r1, #4
 800670c:	4613      	mov	r3, r2
 800670e:	600b      	str	r3, [r1, #0]
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	40023c00 	.word	0x40023c00

08006720 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800672a:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <FLASH_Program_Word+0x40>)
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <FLASH_Program_Word+0x40>)
 8006730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006736:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <FLASH_Program_Word+0x40>)
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	4a09      	ldr	r2, [pc, #36]	; (8006760 <FLASH_Program_Word+0x40>)
 800673c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006740:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <FLASH_Program_Word+0x40>)
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	4a06      	ldr	r2, [pc, #24]	; (8006760 <FLASH_Program_Word+0x40>)
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40023c00 	.word	0x40023c00

08006764 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006770:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <FLASH_Program_HalfWord+0x44>)
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	4a0c      	ldr	r2, [pc, #48]	; (80067a8 <FLASH_Program_HalfWord+0x44>)
 8006776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <FLASH_Program_HalfWord+0x44>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <FLASH_Program_HalfWord+0x44>)
 8006782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006786:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006788:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <FLASH_Program_HalfWord+0x44>)
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	4a06      	ldr	r2, [pc, #24]	; (80067a8 <FLASH_Program_HalfWord+0x44>)
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	801a      	strh	r2, [r3, #0]
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40023c00 	.word	0x40023c00

080067ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <FLASH_Program_Byte+0x40>)
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	4a0b      	ldr	r2, [pc, #44]	; (80067ec <FLASH_Program_Byte+0x40>)
 80067be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80067c4:	4b09      	ldr	r3, [pc, #36]	; (80067ec <FLASH_Program_Byte+0x40>)
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <FLASH_Program_Byte+0x40>)
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <FLASH_Program_Byte+0x40>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	4a06      	ldr	r2, [pc, #24]	; (80067ec <FLASH_Program_Byte+0x40>)
 80067d2:	f043 0301 	orr.w	r3, r3, #1
 80067d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	701a      	strb	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40023c00 	.word	0x40023c00

080067f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80067f4:	4b27      	ldr	r3, [pc, #156]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f043 0310 	orr.w	r3, r3, #16
 8006808:	4a23      	ldr	r2, [pc, #140]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 800680a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800680c:	4b21      	ldr	r3, [pc, #132]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 800680e:	2210      	movs	r2, #16
 8006810:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006812:	4b20      	ldr	r3, [pc, #128]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d008      	beq.n	8006830 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f043 0308 	orr.w	r3, r3, #8
 8006826:	4a1c      	ldr	r2, [pc, #112]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 8006828:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800682a:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 800682c:	2220      	movs	r2, #32
 800682e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006830:	4b18      	ldr	r3, [pc, #96]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800683c:	4b16      	ldr	r3, [pc, #88]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f043 0304 	orr.w	r3, r3, #4
 8006844:	4a14      	ldr	r2, [pc, #80]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 8006846:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006848:	4b12      	ldr	r3, [pc, #72]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 800684a:	2240      	movs	r2, #64	; 0x40
 800684c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800684e:	4b11      	ldr	r3, [pc, #68]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006856:	2b00      	cmp	r3, #0
 8006858:	d008      	beq.n	800686c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f043 0302 	orr.w	r3, r3, #2
 8006862:	4a0d      	ldr	r2, [pc, #52]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 8006864:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 8006868:	2280      	movs	r2, #128	; 0x80
 800686a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800686c:	4b09      	ldr	r3, [pc, #36]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006878:	4b07      	ldr	r3, [pc, #28]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f043 0320 	orr.w	r3, r3, #32
 8006880:	4a05      	ldr	r2, [pc, #20]	; (8006898 <FLASH_SetErrorCode+0xa8>)
 8006882:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006884:	4b03      	ldr	r3, [pc, #12]	; (8006894 <FLASH_SetErrorCode+0xa4>)
 8006886:	2202      	movs	r2, #2
 8006888:	60da      	str	r2, [r3, #12]
  }
}
 800688a:	bf00      	nop
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	40023c00 	.word	0x40023c00
 8006898:	20000558 	.word	0x20000558

0800689c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80068ae:	4b31      	ldr	r3, [pc, #196]	; (8006974 <HAL_FLASHEx_Erase+0xd8>)
 80068b0:	7e1b      	ldrb	r3, [r3, #24]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_FLASHEx_Erase+0x1e>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e058      	b.n	800696c <HAL_FLASHEx_Erase+0xd0>
 80068ba:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <HAL_FLASHEx_Erase+0xd8>)
 80068bc:	2201      	movs	r2, #1
 80068be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068c4:	f7ff feba 	bl	800663c <FLASH_WaitForLastOperation>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d148      	bne.n	8006964 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d115      	bne.n	800690e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f000 f844 	bl	800697c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80068f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068f8:	f7ff fea0 	bl	800663c <FLASH_WaitForLastOperation>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006900:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <HAL_FLASHEx_Erase+0xdc>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_FLASHEx_Erase+0xdc>)
 8006906:	f023 0304 	bic.w	r3, r3, #4
 800690a:	6113      	str	r3, [r2, #16]
 800690c:	e028      	b.n	8006960 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	e01c      	b.n	8006950 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	4619      	mov	r1, r3
 800691e:	68b8      	ldr	r0, [r7, #8]
 8006920:	f000 f850 	bl	80069c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006928:	f7ff fe88 	bl	800663c <FLASH_WaitForLastOperation>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006930:	4b11      	ldr	r3, [pc, #68]	; (8006978 <HAL_FLASHEx_Erase+0xdc>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	4a10      	ldr	r2, [pc, #64]	; (8006978 <HAL_FLASHEx_Erase+0xdc>)
 8006936:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800693a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	601a      	str	r2, [r3, #0]
          break;
 8006948:	e00a      	b.n	8006960 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	3301      	adds	r3, #1
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	4413      	add	r3, r2
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	429a      	cmp	r2, r3
 800695e:	d3da      	bcc.n	8006916 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006960:	f000 f878 	bl	8006a54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006964:	4b03      	ldr	r3, [pc, #12]	; (8006974 <HAL_FLASHEx_Erase+0xd8>)
 8006966:	2200      	movs	r2, #0
 8006968:	761a      	strb	r2, [r3, #24]

  return status;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000558 	.word	0x20000558
 8006978:	40023c00 	.word	0x40023c00

0800697c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	6039      	str	r1, [r7, #0]
 8006986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <FLASH_MassErase+0x44>)
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <FLASH_MassErase+0x44>)
 800698e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006992:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <FLASH_MassErase+0x44>)
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <FLASH_MassErase+0x44>)
 800699a:	f043 0304 	orr.w	r3, r3, #4
 800699e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <FLASH_MassErase+0x44>)
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	4313      	orrs	r3, r2
 80069aa:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <FLASH_MassErase+0x44>)
 80069ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b0:	6113      	str	r3, [r2, #16]
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40023c00 	.word	0x40023c00

080069c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e010      	b.n	8006a02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d103      	bne.n	80069ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80069e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e009      	b.n	8006a02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d103      	bne.n	80069fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80069f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e002      	b.n	8006a02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80069fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006a02:	4b13      	ldr	r3, [pc, #76]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006a0e:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	490f      	ldr	r1, [pc, #60]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006a26:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	4a07      	ldr	r2, [pc, #28]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <FLASH_Erase_Sector+0x8c>)
 8006a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a42:	6113      	str	r3, [r2, #16]
}
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40023c00 	.word	0x40023c00

08006a54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006a58:	4b20      	ldr	r3, [pc, #128]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d017      	beq.n	8006a94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006a64:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006a70:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a19      	ldr	r2, [pc, #100]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4b17      	ldr	r3, [pc, #92]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a16      	ldr	r2, [pc, #88]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a88:	4b14      	ldr	r3, [pc, #80]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a13      	ldr	r2, [pc, #76]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006a94:	4b11      	ldr	r3, [pc, #68]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d017      	beq.n	8006ad0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a0d      	ldr	r2, [pc, #52]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aaa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4b08      	ldr	r3, [pc, #32]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a07      	ldr	r2, [pc, #28]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a04      	ldr	r2, [pc, #16]	; (8006adc <FLASH_FlushCaches+0x88>)
 8006aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ace:	6013      	str	r3, [r2, #0]
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40023c00 	.word	0x40023c00

08006ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b089      	sub	sp, #36	; 0x24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	e16b      	b.n	8006dd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006afc:	2201      	movs	r2, #1
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	f040 815a 	bne.w	8006dce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d005      	beq.n	8006b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d130      	bne.n	8006b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	4013      	ands	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b68:	2201      	movs	r2, #1
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	43db      	mvns	r3, r3
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	4013      	ands	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 0201 	and.w	r2, r3, #1
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d017      	beq.n	8006bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	2203      	movs	r2, #3
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d123      	bne.n	8006c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	08da      	lsrs	r2, r3, #3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3208      	adds	r2, #8
 8006be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	220f      	movs	r2, #15
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	08da      	lsrs	r2, r3, #3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3208      	adds	r2, #8
 8006c1e:	69b9      	ldr	r1, [r7, #24]
 8006c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	2203      	movs	r2, #3
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 0203 	and.w	r2, r3, #3
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80b4 	beq.w	8006dce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	4b60      	ldr	r3, [pc, #384]	; (8006dec <HAL_GPIO_Init+0x30c>)
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6e:	4a5f      	ldr	r2, [pc, #380]	; (8006dec <HAL_GPIO_Init+0x30c>)
 8006c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c74:	6453      	str	r3, [r2, #68]	; 0x44
 8006c76:	4b5d      	ldr	r3, [pc, #372]	; (8006dec <HAL_GPIO_Init+0x30c>)
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c82:	4a5b      	ldr	r2, [pc, #364]	; (8006df0 <HAL_GPIO_Init+0x310>)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	3302      	adds	r3, #2
 8006c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	220f      	movs	r2, #15
 8006c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a52      	ldr	r2, [pc, #328]	; (8006df4 <HAL_GPIO_Init+0x314>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d02b      	beq.n	8006d06 <HAL_GPIO_Init+0x226>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a51      	ldr	r2, [pc, #324]	; (8006df8 <HAL_GPIO_Init+0x318>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d025      	beq.n	8006d02 <HAL_GPIO_Init+0x222>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a50      	ldr	r2, [pc, #320]	; (8006dfc <HAL_GPIO_Init+0x31c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01f      	beq.n	8006cfe <HAL_GPIO_Init+0x21e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a4f      	ldr	r2, [pc, #316]	; (8006e00 <HAL_GPIO_Init+0x320>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d019      	beq.n	8006cfa <HAL_GPIO_Init+0x21a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a4e      	ldr	r2, [pc, #312]	; (8006e04 <HAL_GPIO_Init+0x324>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <HAL_GPIO_Init+0x216>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a4d      	ldr	r2, [pc, #308]	; (8006e08 <HAL_GPIO_Init+0x328>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00d      	beq.n	8006cf2 <HAL_GPIO_Init+0x212>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a4c      	ldr	r2, [pc, #304]	; (8006e0c <HAL_GPIO_Init+0x32c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d007      	beq.n	8006cee <HAL_GPIO_Init+0x20e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a4b      	ldr	r2, [pc, #300]	; (8006e10 <HAL_GPIO_Init+0x330>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d101      	bne.n	8006cea <HAL_GPIO_Init+0x20a>
 8006ce6:	2307      	movs	r3, #7
 8006ce8:	e00e      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006cea:	2308      	movs	r3, #8
 8006cec:	e00c      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006cee:	2306      	movs	r3, #6
 8006cf0:	e00a      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006cf2:	2305      	movs	r3, #5
 8006cf4:	e008      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006cf6:	2304      	movs	r3, #4
 8006cf8:	e006      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e004      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e002      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <HAL_GPIO_Init+0x228>
 8006d06:	2300      	movs	r3, #0
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	f002 0203 	and.w	r2, r2, #3
 8006d0e:	0092      	lsls	r2, r2, #2
 8006d10:	4093      	lsls	r3, r2
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d18:	4935      	ldr	r1, [pc, #212]	; (8006df0 <HAL_GPIO_Init+0x310>)
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	089b      	lsrs	r3, r3, #2
 8006d1e:	3302      	adds	r3, #2
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d26:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	43db      	mvns	r3, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	4013      	ands	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d4a:	4a32      	ldr	r2, [pc, #200]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d50:	4b30      	ldr	r3, [pc, #192]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d74:	4a27      	ldr	r2, [pc, #156]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d7a:	4b26      	ldr	r3, [pc, #152]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4013      	ands	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d9e:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006da4:	4b1b      	ldr	r3, [pc, #108]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	43db      	mvns	r3, r3
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	4013      	ands	r3, r2
 8006db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d003      	beq.n	8006dc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006dc8:	4a12      	ldr	r2, [pc, #72]	; (8006e14 <HAL_GPIO_Init+0x334>)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	2b0f      	cmp	r3, #15
 8006dd8:	f67f ae90 	bls.w	8006afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	3724      	adds	r7, #36	; 0x24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40023800 	.word	0x40023800
 8006df0:	40013800 	.word	0x40013800
 8006df4:	40020000 	.word	0x40020000
 8006df8:	40020400 	.word	0x40020400
 8006dfc:	40020800 	.word	0x40020800
 8006e00:	40020c00 	.word	0x40020c00
 8006e04:	40021000 	.word	0x40021000
 8006e08:	40021400 	.word	0x40021400
 8006e0c:	40021800 	.word	0x40021800
 8006e10:	40021c00 	.word	0x40021c00
 8006e14:	40013c00 	.word	0x40013c00

08006e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	e001      	b.n	8006e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	807b      	strh	r3, [r7, #2]
 8006e54:	4613      	mov	r3, r2
 8006e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e58:	787b      	ldrb	r3, [r7, #1]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e5e:	887a      	ldrh	r2, [r7, #2]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e64:	e003      	b.n	8006e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	041a      	lsls	r2, r3, #16
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	619a      	str	r2, [r3, #24]
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e8c:	887a      	ldrh	r2, [r7, #2]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4013      	ands	r3, r2
 8006e92:	041a      	lsls	r2, r3, #16
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	43d9      	mvns	r1, r3
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	400b      	ands	r3, r1
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	619a      	str	r2, [r3, #24]
}
 8006ea2:	bf00      	nop
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
	...

08006eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e267      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d075      	beq.n	8006fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ece:	4b88      	ldr	r3, [pc, #544]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d00c      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eda:	4b85      	ldr	r3, [pc, #532]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d112      	bne.n	8006f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ee6:	4b82      	ldr	r3, [pc, #520]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef2:	d10b      	bne.n	8006f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef4:	4b7e      	ldr	r3, [pc, #504]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d05b      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x108>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d157      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e242      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f14:	d106      	bne.n	8006f24 <HAL_RCC_OscConfig+0x74>
 8006f16:	4b76      	ldr	r3, [pc, #472]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a75      	ldr	r2, [pc, #468]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	e01d      	b.n	8006f60 <HAL_RCC_OscConfig+0xb0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCC_OscConfig+0x98>
 8006f2e:	4b70      	ldr	r3, [pc, #448]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6f      	ldr	r2, [pc, #444]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	4b6d      	ldr	r3, [pc, #436]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a6c      	ldr	r2, [pc, #432]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	e00b      	b.n	8006f60 <HAL_RCC_OscConfig+0xb0>
 8006f48:	4b69      	ldr	r3, [pc, #420]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a68      	ldr	r2, [pc, #416]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d013      	beq.n	8006f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f68:	f7ff f8e8 	bl	800613c <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f70:	f7ff f8e4 	bl	800613c <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	; 0x64
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e207      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f82:	4b5b      	ldr	r3, [pc, #364]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <HAL_RCC_OscConfig+0xc0>
 8006f8e:	e014      	b.n	8006fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f90:	f7ff f8d4 	bl	800613c <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f98:	f7ff f8d0 	bl	800613c <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b64      	cmp	r3, #100	; 0x64
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e1f3      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006faa:	4b51      	ldr	r3, [pc, #324]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f0      	bne.n	8006f98 <HAL_RCC_OscConfig+0xe8>
 8006fb6:	e000      	b.n	8006fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d063      	beq.n	800708e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fc6:	4b4a      	ldr	r3, [pc, #296]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 030c 	and.w	r3, r3, #12
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fd2:	4b47      	ldr	r3, [pc, #284]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d11c      	bne.n	8007018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fde:	4b44      	ldr	r3, [pc, #272]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d116      	bne.n	8007018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fea:	4b41      	ldr	r3, [pc, #260]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <HAL_RCC_OscConfig+0x152>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d001      	beq.n	8007002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e1c7      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007002:	4b3b      	ldr	r3, [pc, #236]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4937      	ldr	r1, [pc, #220]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8007012:	4313      	orrs	r3, r2
 8007014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007016:	e03a      	b.n	800708e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d020      	beq.n	8007062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007020:	4b34      	ldr	r3, [pc, #208]	; (80070f4 <HAL_RCC_OscConfig+0x244>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007026:	f7ff f889 	bl	800613c <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800702e:	f7ff f885 	bl	800613c <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e1a8      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007040:	4b2b      	ldr	r3, [pc, #172]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0f0      	beq.n	800702e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800704c:	4b28      	ldr	r3, [pc, #160]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4925      	ldr	r1, [pc, #148]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 800705c:	4313      	orrs	r3, r2
 800705e:	600b      	str	r3, [r1, #0]
 8007060:	e015      	b.n	800708e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007062:	4b24      	ldr	r3, [pc, #144]	; (80070f4 <HAL_RCC_OscConfig+0x244>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007068:	f7ff f868 	bl	800613c <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007070:	f7ff f864 	bl	800613c <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e187      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007082:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b00      	cmp	r3, #0
 8007098:	d036      	beq.n	8007108 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <HAL_RCC_OscConfig+0x248>)
 80070a4:	2201      	movs	r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a8:	f7ff f848 	bl	800613c <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070b0:	f7ff f844 	bl	800613c <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e167      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <HAL_RCC_OscConfig+0x240>)
 80070c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0f0      	beq.n	80070b0 <HAL_RCC_OscConfig+0x200>
 80070ce:	e01b      	b.n	8007108 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070d0:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <HAL_RCC_OscConfig+0x248>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d6:	f7ff f831 	bl	800613c <HAL_GetTick>
 80070da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070dc:	e00e      	b.n	80070fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070de:	f7ff f82d 	bl	800613c <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d907      	bls.n	80070fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e150      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
 80070f0:	40023800 	.word	0x40023800
 80070f4:	42470000 	.word	0x42470000
 80070f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070fc:	4b88      	ldr	r3, [pc, #544]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80070fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1ea      	bne.n	80070de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8097 	beq.w	8007244 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800711a:	4b81      	ldr	r3, [pc, #516]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10f      	bne.n	8007146 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	60bb      	str	r3, [r7, #8]
 800712a:	4b7d      	ldr	r3, [pc, #500]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	4a7c      	ldr	r2, [pc, #496]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 8007130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007134:	6413      	str	r3, [r2, #64]	; 0x40
 8007136:	4b7a      	ldr	r3, [pc, #488]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007146:	4b77      	ldr	r3, [pc, #476]	; (8007324 <HAL_RCC_OscConfig+0x474>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714e:	2b00      	cmp	r3, #0
 8007150:	d118      	bne.n	8007184 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007152:	4b74      	ldr	r3, [pc, #464]	; (8007324 <HAL_RCC_OscConfig+0x474>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a73      	ldr	r2, [pc, #460]	; (8007324 <HAL_RCC_OscConfig+0x474>)
 8007158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800715c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800715e:	f7fe ffed 	bl	800613c <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007166:	f7fe ffe9 	bl	800613c <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e10c      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007178:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <HAL_RCC_OscConfig+0x474>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0f0      	beq.n	8007166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d106      	bne.n	800719a <HAL_RCC_OscConfig+0x2ea>
 800718c:	4b64      	ldr	r3, [pc, #400]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	4a63      	ldr	r2, [pc, #396]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	6713      	str	r3, [r2, #112]	; 0x70
 8007198:	e01c      	b.n	80071d4 <HAL_RCC_OscConfig+0x324>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	2b05      	cmp	r3, #5
 80071a0:	d10c      	bne.n	80071bc <HAL_RCC_OscConfig+0x30c>
 80071a2:	4b5f      	ldr	r3, [pc, #380]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a6:	4a5e      	ldr	r2, [pc, #376]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071a8:	f043 0304 	orr.w	r3, r3, #4
 80071ac:	6713      	str	r3, [r2, #112]	; 0x70
 80071ae:	4b5c      	ldr	r3, [pc, #368]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b2:	4a5b      	ldr	r2, [pc, #364]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	6713      	str	r3, [r2, #112]	; 0x70
 80071ba:	e00b      	b.n	80071d4 <HAL_RCC_OscConfig+0x324>
 80071bc:	4b58      	ldr	r3, [pc, #352]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c0:	4a57      	ldr	r2, [pc, #348]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	6713      	str	r3, [r2, #112]	; 0x70
 80071c8:	4b55      	ldr	r3, [pc, #340]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071cc:	4a54      	ldr	r2, [pc, #336]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071ce:	f023 0304 	bic.w	r3, r3, #4
 80071d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071dc:	f7fe ffae 	bl	800613c <HAL_GetTick>
 80071e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e2:	e00a      	b.n	80071fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071e4:	f7fe ffaa 	bl	800613c <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e0cb      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071fa:	4b49      	ldr	r3, [pc, #292]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0ee      	beq.n	80071e4 <HAL_RCC_OscConfig+0x334>
 8007206:	e014      	b.n	8007232 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007208:	f7fe ff98 	bl	800613c <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800720e:	e00a      	b.n	8007226 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007210:	f7fe ff94 	bl	800613c <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	f241 3288 	movw	r2, #5000	; 0x1388
 800721e:	4293      	cmp	r3, r2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e0b5      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007226:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1ee      	bne.n	8007210 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d105      	bne.n	8007244 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007238:	4b39      	ldr	r3, [pc, #228]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	4a38      	ldr	r2, [pc, #224]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 800723e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007242:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80a1 	beq.w	8007390 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800724e:	4b34      	ldr	r3, [pc, #208]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 030c 	and.w	r3, r3, #12
 8007256:	2b08      	cmp	r3, #8
 8007258:	d05c      	beq.n	8007314 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d141      	bne.n	80072e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007262:	4b31      	ldr	r3, [pc, #196]	; (8007328 <HAL_RCC_OscConfig+0x478>)
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007268:	f7fe ff68 	bl	800613c <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007270:	f7fe ff64 	bl	800613c <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e087      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007282:	4b27      	ldr	r3, [pc, #156]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69da      	ldr	r2, [r3, #28]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	019b      	lsls	r3, r3, #6
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	085b      	lsrs	r3, r3, #1
 80072a6:	3b01      	subs	r3, #1
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	061b      	lsls	r3, r3, #24
 80072b2:	491b      	ldr	r1, [pc, #108]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <HAL_RCC_OscConfig+0x478>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072be:	f7fe ff3d 	bl	800613c <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072c6:	f7fe ff39 	bl	800613c <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e05c      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <HAL_RCC_OscConfig+0x416>
 80072e4:	e054      	b.n	8007390 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <HAL_RCC_OscConfig+0x478>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ec:	f7fe ff26 	bl	800613c <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072f4:	f7fe ff22 	bl	800613c <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e045      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007306:	4b06      	ldr	r3, [pc, #24]	; (8007320 <HAL_RCC_OscConfig+0x470>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x444>
 8007312:	e03d      	b.n	8007390 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d107      	bne.n	800732c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e038      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
 8007320:	40023800 	.word	0x40023800
 8007324:	40007000 	.word	0x40007000
 8007328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <HAL_RCC_OscConfig+0x4ec>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d028      	beq.n	800738c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007344:	429a      	cmp	r2, r3
 8007346:	d121      	bne.n	800738c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007352:	429a      	cmp	r2, r3
 8007354:	d11a      	bne.n	800738c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007364:	4293      	cmp	r3, r2
 8007366:	d111      	bne.n	800738c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	3b01      	subs	r3, #1
 8007376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007378:	429a      	cmp	r2, r3
 800737a:	d107      	bne.n	800738c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007388:	429a      	cmp	r2, r3
 800738a:	d001      	beq.n	8007390 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800

080073a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e0cc      	b.n	800754e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073b4:	4b68      	ldr	r3, [pc, #416]	; (8007558 <HAL_RCC_ClockConfig+0x1b8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d90c      	bls.n	80073dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073c2:	4b65      	ldr	r3, [pc, #404]	; (8007558 <HAL_RCC_ClockConfig+0x1b8>)
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ca:	4b63      	ldr	r3, [pc, #396]	; (8007558 <HAL_RCC_ClockConfig+0x1b8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d001      	beq.n	80073dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e0b8      	b.n	800754e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d020      	beq.n	800742a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073f4:	4b59      	ldr	r3, [pc, #356]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	4a58      	ldr	r2, [pc, #352]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 80073fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800740c:	4b53      	ldr	r3, [pc, #332]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	4a52      	ldr	r2, [pc, #328]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007418:	4b50      	ldr	r3, [pc, #320]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	494d      	ldr	r1, [pc, #308]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007426:	4313      	orrs	r3, r2
 8007428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d044      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d107      	bne.n	800744e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800743e:	4b47      	ldr	r3, [pc, #284]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d119      	bne.n	800747e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e07f      	b.n	800754e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d003      	beq.n	800745e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800745a:	2b03      	cmp	r3, #3
 800745c:	d107      	bne.n	800746e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800745e:	4b3f      	ldr	r3, [pc, #252]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e06f      	b.n	800754e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800746e:	4b3b      	ldr	r3, [pc, #236]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e067      	b.n	800754e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800747e:	4b37      	ldr	r3, [pc, #220]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f023 0203 	bic.w	r2, r3, #3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4934      	ldr	r1, [pc, #208]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 800748c:	4313      	orrs	r3, r2
 800748e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007490:	f7fe fe54 	bl	800613c <HAL_GetTick>
 8007494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007496:	e00a      	b.n	80074ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007498:	f7fe fe50 	bl	800613c <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e04f      	b.n	800754e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ae:	4b2b      	ldr	r3, [pc, #172]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 020c 	and.w	r2, r3, #12
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	429a      	cmp	r2, r3
 80074be:	d1eb      	bne.n	8007498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074c0:	4b25      	ldr	r3, [pc, #148]	; (8007558 <HAL_RCC_ClockConfig+0x1b8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d20c      	bcs.n	80074e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ce:	4b22      	ldr	r3, [pc, #136]	; (8007558 <HAL_RCC_ClockConfig+0x1b8>)
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d6:	4b20      	ldr	r3, [pc, #128]	; (8007558 <HAL_RCC_ClockConfig+0x1b8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d001      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e032      	b.n	800754e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074f4:	4b19      	ldr	r3, [pc, #100]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4916      	ldr	r1, [pc, #88]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007502:	4313      	orrs	r3, r2
 8007504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0308 	and.w	r3, r3, #8
 800750e:	2b00      	cmp	r3, #0
 8007510:	d009      	beq.n	8007526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	490e      	ldr	r1, [pc, #56]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	4313      	orrs	r3, r2
 8007524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007526:	f000 f821 	bl	800756c <HAL_RCC_GetSysClockFreq>
 800752a:	4602      	mov	r2, r0
 800752c:	4b0b      	ldr	r3, [pc, #44]	; (800755c <HAL_RCC_ClockConfig+0x1bc>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	091b      	lsrs	r3, r3, #4
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	490a      	ldr	r1, [pc, #40]	; (8007560 <HAL_RCC_ClockConfig+0x1c0>)
 8007538:	5ccb      	ldrb	r3, [r1, r3]
 800753a:	fa22 f303 	lsr.w	r3, r2, r3
 800753e:	4a09      	ldr	r2, [pc, #36]	; (8007564 <HAL_RCC_ClockConfig+0x1c4>)
 8007540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007542:	4b09      	ldr	r3, [pc, #36]	; (8007568 <HAL_RCC_ClockConfig+0x1c8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe fdb4 	bl	80060b4 <HAL_InitTick>

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	40023c00 	.word	0x40023c00
 800755c:	40023800 	.word	0x40023800
 8007560:	0800de2c 	.word	0x0800de2c
 8007564:	20000014 	.word	0x20000014
 8007568:	20000018 	.word	0x20000018

0800756c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800756c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007570:	b090      	sub	sp, #64	; 0x40
 8007572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
 8007578:	2300      	movs	r3, #0
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800757c:	2300      	movs	r3, #0
 800757e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007584:	4b59      	ldr	r3, [pc, #356]	; (80076ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f003 030c 	and.w	r3, r3, #12
 800758c:	2b08      	cmp	r3, #8
 800758e:	d00d      	beq.n	80075ac <HAL_RCC_GetSysClockFreq+0x40>
 8007590:	2b08      	cmp	r3, #8
 8007592:	f200 80a1 	bhi.w	80076d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_RCC_GetSysClockFreq+0x34>
 800759a:	2b04      	cmp	r3, #4
 800759c:	d003      	beq.n	80075a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800759e:	e09b      	b.n	80076d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075a0:	4b53      	ldr	r3, [pc, #332]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80075a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80075a4:	e09b      	b.n	80076de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075a6:	4b53      	ldr	r3, [pc, #332]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80075a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075aa:	e098      	b.n	80076de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075ac:	4b4f      	ldr	r3, [pc, #316]	; (80076ec <HAL_RCC_GetSysClockFreq+0x180>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075b6:	4b4d      	ldr	r3, [pc, #308]	; (80076ec <HAL_RCC_GetSysClockFreq+0x180>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d028      	beq.n	8007614 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075c2:	4b4a      	ldr	r3, [pc, #296]	; (80076ec <HAL_RCC_GetSysClockFreq+0x180>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	099b      	lsrs	r3, r3, #6
 80075c8:	2200      	movs	r2, #0
 80075ca:	623b      	str	r3, [r7, #32]
 80075cc:	627a      	str	r2, [r7, #36]	; 0x24
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075d4:	2100      	movs	r1, #0
 80075d6:	4b47      	ldr	r3, [pc, #284]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80075d8:	fb03 f201 	mul.w	r2, r3, r1
 80075dc:	2300      	movs	r3, #0
 80075de:	fb00 f303 	mul.w	r3, r0, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	4a43      	ldr	r2, [pc, #268]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80075e6:	fba0 1202 	umull	r1, r2, r0, r2
 80075ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ec:	460a      	mov	r2, r1
 80075ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80075f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f2:	4413      	add	r3, r2
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	2200      	movs	r2, #0
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	61fa      	str	r2, [r7, #28]
 80075fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007602:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007606:	f7f9 fb3f 	bl	8000c88 <__aeabi_uldivmod>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4613      	mov	r3, r2
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007612:	e053      	b.n	80076bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007614:	4b35      	ldr	r3, [pc, #212]	; (80076ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	099b      	lsrs	r3, r3, #6
 800761a:	2200      	movs	r2, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	617a      	str	r2, [r7, #20]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007626:	f04f 0b00 	mov.w	fp, #0
 800762a:	4652      	mov	r2, sl
 800762c:	465b      	mov	r3, fp
 800762e:	f04f 0000 	mov.w	r0, #0
 8007632:	f04f 0100 	mov.w	r1, #0
 8007636:	0159      	lsls	r1, r3, #5
 8007638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800763c:	0150      	lsls	r0, r2, #5
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	ebb2 080a 	subs.w	r8, r2, sl
 8007646:	eb63 090b 	sbc.w	r9, r3, fp
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007656:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800765a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800765e:	ebb2 0408 	subs.w	r4, r2, r8
 8007662:	eb63 0509 	sbc.w	r5, r3, r9
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	00eb      	lsls	r3, r5, #3
 8007670:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007674:	00e2      	lsls	r2, r4, #3
 8007676:	4614      	mov	r4, r2
 8007678:	461d      	mov	r5, r3
 800767a:	eb14 030a 	adds.w	r3, r4, sl
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	eb45 030b 	adc.w	r3, r5, fp
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007692:	4629      	mov	r1, r5
 8007694:	028b      	lsls	r3, r1, #10
 8007696:	4621      	mov	r1, r4
 8007698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800769c:	4621      	mov	r1, r4
 800769e:	028a      	lsls	r2, r1, #10
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a6:	2200      	movs	r2, #0
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	60fa      	str	r2, [r7, #12]
 80076ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076b0:	f7f9 faea 	bl	8000c88 <__aeabi_uldivmod>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4613      	mov	r3, r2
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076bc:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <HAL_RCC_GetSysClockFreq+0x180>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	0c1b      	lsrs	r3, r3, #16
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	3301      	adds	r3, #1
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80076cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076d6:	e002      	b.n	80076de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3740      	adds	r7, #64	; 0x40
 80076e4:	46bd      	mov	sp, r7
 80076e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076ea:	bf00      	nop
 80076ec:	40023800 	.word	0x40023800
 80076f0:	00f42400 	.word	0x00f42400
 80076f4:	00b71b00 	.word	0x00b71b00

080076f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <HAL_RCC_GetHCLKFreq+0x14>)
 80076fe:	681b      	ldr	r3, [r3, #0]
}
 8007700:	4618      	mov	r0, r3
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20000014 	.word	0x20000014

08007710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007714:	f7ff fff0 	bl	80076f8 <HAL_RCC_GetHCLKFreq>
 8007718:	4602      	mov	r2, r0
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	0a9b      	lsrs	r3, r3, #10
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	4903      	ldr	r1, [pc, #12]	; (8007734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007726:	5ccb      	ldrb	r3, [r1, r3]
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800772c:	4618      	mov	r0, r3
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40023800 	.word	0x40023800
 8007734:	0800de3c 	.word	0x0800de3c

08007738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800773c:	f7ff ffdc 	bl	80076f8 <HAL_RCC_GetHCLKFreq>
 8007740:	4602      	mov	r2, r0
 8007742:	4b05      	ldr	r3, [pc, #20]	; (8007758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	0b5b      	lsrs	r3, r3, #13
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	4903      	ldr	r1, [pc, #12]	; (800775c <HAL_RCC_GetPCLK2Freq+0x24>)
 800774e:	5ccb      	ldrb	r3, [r1, r3]
 8007750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007754:	4618      	mov	r0, r3
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40023800 	.word	0x40023800
 800775c:	0800de3c 	.word	0x0800de3c

08007760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e041      	b.n	80077f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fe f9c8 	bl	8005b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f000 fbba 	bl	8007f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	d001      	beq.n	8007818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e04e      	b.n	80078b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f042 0201 	orr.w	r2, r2, #1
 800782e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a23      	ldr	r2, [pc, #140]	; (80078c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d022      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x80>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007842:	d01d      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x80>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1f      	ldr	r2, [pc, #124]	; (80078c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d018      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x80>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1e      	ldr	r2, [pc, #120]	; (80078cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d013      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x80>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a1c      	ldr	r2, [pc, #112]	; (80078d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00e      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x80>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1b      	ldr	r2, [pc, #108]	; (80078d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d009      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x80>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a19      	ldr	r2, [pc, #100]	; (80078d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d004      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x80>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a18      	ldr	r2, [pc, #96]	; (80078dc <HAL_TIM_Base_Start_IT+0xdc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d111      	bne.n	80078a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b06      	cmp	r3, #6
 8007890:	d010      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0201 	orr.w	r2, r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a2:	e007      	b.n	80078b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0201 	orr.w	r2, r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40010000 	.word	0x40010000
 80078c8:	40000400 	.word	0x40000400
 80078cc:	40000800 	.word	0x40000800
 80078d0:	40000c00 	.word	0x40000c00
 80078d4:	40010400 	.word	0x40010400
 80078d8:	40014000 	.word	0x40014000
 80078dc:	40001800 	.word	0x40001800

080078e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0201 	bic.w	r2, r2, #1
 80078f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6a1a      	ldr	r2, [r3, #32]
 80078fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007902:	4013      	ands	r3, r2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10f      	bne.n	8007928 <HAL_TIM_Base_Stop_IT+0x48>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a1a      	ldr	r2, [r3, #32]
 800790e:	f240 4344 	movw	r3, #1092	; 0x444
 8007912:	4013      	ands	r3, r2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d107      	bne.n	8007928 <HAL_TIM_Base_Stop_IT+0x48>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e041      	b.n	80079d4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f839 	bl	80079dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f000 facb 	bl	8007f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d122      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d11b      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0202 	mvn.w	r2, #2
 8007a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa51 	bl	8007eda <HAL_TIM_IC_CaptureCallback>
 8007a38:	e005      	b.n	8007a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa43 	bl	8007ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fa54 	bl	8007eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0204 	mvn.w	r2, #4
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa27 	bl	8007eda <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa19 	bl	8007ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa2a 	bl	8007eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0208 	mvn.w	r2, #8
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9fd 	bl	8007eda <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f9ef 	bl	8007ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fa00 	bl	8007eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d122      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d11b      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0210 	mvn.w	r2, #16
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9d3 	bl	8007eda <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f9c5 	bl	8007ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9d6 	bl	8007eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0201 	mvn.w	r2, #1
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fc ff14 	bl	800499c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fca6 	bl	80084ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d10e      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d107      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f99b 	bl	8007f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d107      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0220 	mvn.w	r2, #32
 8007bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fc70 	bl	80084d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e088      	b.n	8007d30 <HAL_TIM_IC_ConfigChannel+0x130>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d11b      	bne.n	8007c64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f000 fa0c 	bl	8008058 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 020c 	bic.w	r2, r2, #12
 8007c4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6999      	ldr	r1, [r3, #24]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	619a      	str	r2, [r3, #24]
 8007c62:	e060      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d11c      	bne.n	8007ca4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6819      	ldr	r1, [r3, #0]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f000 fa90 	bl	800819e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6999      	ldr	r1, [r3, #24]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	021a      	lsls	r2, r3, #8
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	619a      	str	r2, [r3, #24]
 8007ca2:	e040      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	d11b      	bne.n	8007ce2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f000 fadd 	bl	8008278 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 020c 	bic.w	r2, r2, #12
 8007ccc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69d9      	ldr	r1, [r3, #28]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	61da      	str	r2, [r3, #28]
 8007ce0:	e021      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b0c      	cmp	r3, #12
 8007ce6:	d11c      	bne.n	8007d22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f000 fafa 	bl	80082f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69da      	ldr	r2, [r3, #28]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69d9      	ldr	r1, [r3, #28]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	61da      	str	r2, [r3, #28]
 8007d20:	e001      	b.n	8007d26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e0b4      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x186>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d8c:	d03e      	beq.n	8007e0c <HAL_TIM_ConfigClockSource+0xd4>
 8007d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d92:	f200 8087 	bhi.w	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9a:	f000 8086 	beq.w	8007eaa <HAL_TIM_ConfigClockSource+0x172>
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da2:	d87f      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007da4:	2b70      	cmp	r3, #112	; 0x70
 8007da6:	d01a      	beq.n	8007dde <HAL_TIM_ConfigClockSource+0xa6>
 8007da8:	2b70      	cmp	r3, #112	; 0x70
 8007daa:	d87b      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dac:	2b60      	cmp	r3, #96	; 0x60
 8007dae:	d050      	beq.n	8007e52 <HAL_TIM_ConfigClockSource+0x11a>
 8007db0:	2b60      	cmp	r3, #96	; 0x60
 8007db2:	d877      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007db4:	2b50      	cmp	r3, #80	; 0x50
 8007db6:	d03c      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0xfa>
 8007db8:	2b50      	cmp	r3, #80	; 0x50
 8007dba:	d873      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	d058      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x13a>
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d86f      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc4:	2b30      	cmp	r3, #48	; 0x30
 8007dc6:	d064      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x15a>
 8007dc8:	2b30      	cmp	r3, #48	; 0x30
 8007dca:	d86b      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d060      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x15a>
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	d867      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d05c      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x15a>
 8007dd8:	2b10      	cmp	r3, #16
 8007dda:	d05a      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x15a>
 8007ddc:	e062      	b.n	8007ea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6899      	ldr	r1, [r3, #8]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f000 fad7 	bl	80083a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	609a      	str	r2, [r3, #8]
      break;
 8007e0a:	e04f      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	6899      	ldr	r1, [r3, #8]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f000 fac0 	bl	80083a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e2e:	609a      	str	r2, [r3, #8]
      break;
 8007e30:	e03c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6859      	ldr	r1, [r3, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f000 f97e 	bl	8008140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2150      	movs	r1, #80	; 0x50
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fa8d 	bl	800836a <TIM_ITRx_SetConfig>
      break;
 8007e50:	e02c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6859      	ldr	r1, [r3, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f000 f9da 	bl	8008218 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2160      	movs	r1, #96	; 0x60
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fa7d 	bl	800836a <TIM_ITRx_SetConfig>
      break;
 8007e70:	e01c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	6859      	ldr	r1, [r3, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f000 f95e 	bl	8008140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2140      	movs	r1, #64	; 0x40
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fa6d 	bl	800836a <TIM_ITRx_SetConfig>
      break;
 8007e90:	e00c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f000 fa64 	bl	800836a <TIM_ITRx_SetConfig>
      break;
 8007ea2:	e003      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea8:	e000      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
	...

08007f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a40      	ldr	r2, [pc, #256]	; (800802c <TIM_Base_SetConfig+0x114>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <TIM_Base_SetConfig+0x40>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f36:	d00f      	beq.n	8007f58 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a3d      	ldr	r2, [pc, #244]	; (8008030 <TIM_Base_SetConfig+0x118>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d00b      	beq.n	8007f58 <TIM_Base_SetConfig+0x40>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a3c      	ldr	r2, [pc, #240]	; (8008034 <TIM_Base_SetConfig+0x11c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d007      	beq.n	8007f58 <TIM_Base_SetConfig+0x40>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a3b      	ldr	r2, [pc, #236]	; (8008038 <TIM_Base_SetConfig+0x120>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d003      	beq.n	8007f58 <TIM_Base_SetConfig+0x40>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a3a      	ldr	r2, [pc, #232]	; (800803c <TIM_Base_SetConfig+0x124>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d108      	bne.n	8007f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2f      	ldr	r2, [pc, #188]	; (800802c <TIM_Base_SetConfig+0x114>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d02b      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f78:	d027      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2c      	ldr	r2, [pc, #176]	; (8008030 <TIM_Base_SetConfig+0x118>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d023      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2b      	ldr	r2, [pc, #172]	; (8008034 <TIM_Base_SetConfig+0x11c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01f      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <TIM_Base_SetConfig+0x120>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01b      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a29      	ldr	r2, [pc, #164]	; (800803c <TIM_Base_SetConfig+0x124>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d017      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a28      	ldr	r2, [pc, #160]	; (8008040 <TIM_Base_SetConfig+0x128>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d013      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a27      	ldr	r2, [pc, #156]	; (8008044 <TIM_Base_SetConfig+0x12c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00f      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a26      	ldr	r2, [pc, #152]	; (8008048 <TIM_Base_SetConfig+0x130>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00b      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a25      	ldr	r2, [pc, #148]	; (800804c <TIM_Base_SetConfig+0x134>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d007      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a24      	ldr	r2, [pc, #144]	; (8008050 <TIM_Base_SetConfig+0x138>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a23      	ldr	r2, [pc, #140]	; (8008054 <TIM_Base_SetConfig+0x13c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d108      	bne.n	8007fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a0a      	ldr	r2, [pc, #40]	; (800802c <TIM_Base_SetConfig+0x114>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_Base_SetConfig+0xf8>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a0c      	ldr	r2, [pc, #48]	; (800803c <TIM_Base_SetConfig+0x124>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d103      	bne.n	8008018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	615a      	str	r2, [r3, #20]
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40000400 	.word	0x40000400
 8008034:	40000800 	.word	0x40000800
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40010400 	.word	0x40010400
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800
 800804c:	40001800 	.word	0x40001800
 8008050:	40001c00 	.word	0x40001c00
 8008054:	40002000 	.word	0x40002000

08008058 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f023 0201 	bic.w	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4a28      	ldr	r2, [pc, #160]	; (8008124 <TIM_TI1_SetConfig+0xcc>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d01b      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808c:	d017      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4a25      	ldr	r2, [pc, #148]	; (8008128 <TIM_TI1_SetConfig+0xd0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4a24      	ldr	r2, [pc, #144]	; (800812c <TIM_TI1_SetConfig+0xd4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00f      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4a23      	ldr	r2, [pc, #140]	; (8008130 <TIM_TI1_SetConfig+0xd8>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00b      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a22      	ldr	r2, [pc, #136]	; (8008134 <TIM_TI1_SetConfig+0xdc>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d007      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a21      	ldr	r2, [pc, #132]	; (8008138 <TIM_TI1_SetConfig+0xe0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d003      	beq.n	80080be <TIM_TI1_SetConfig+0x66>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4a20      	ldr	r2, [pc, #128]	; (800813c <TIM_TI1_SetConfig+0xe4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d101      	bne.n	80080c2 <TIM_TI1_SetConfig+0x6a>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <TIM_TI1_SetConfig+0x6c>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e003      	b.n	80080e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f043 0301 	orr.w	r3, r3, #1
 80080e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f023 030a 	bic.w	r3, r3, #10
 80080fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f003 030a 	and.w	r3, r3, #10
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	621a      	str	r2, [r3, #32]
}
 8008116:	bf00      	nop
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	40010000 	.word	0x40010000
 8008128:	40000400 	.word	0x40000400
 800812c:	40000800 	.word	0x40000800
 8008130:	40000c00 	.word	0x40000c00
 8008134:	40010400 	.word	0x40010400
 8008138:	40014000 	.word	0x40014000
 800813c:	40001800 	.word	0x40001800

08008140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0201 	bic.w	r2, r3, #1
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800816a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f023 030a 	bic.w	r3, r3, #10
 800817c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800819e:	b480      	push	{r7}
 80081a0:	b087      	sub	sp, #28
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	f023 0210 	bic.w	r2, r3, #16
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	021b      	lsls	r3, r3, #8
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	031b      	lsls	r3, r3, #12
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	621a      	str	r2, [r3, #32]
}
 800820c:	bf00      	nop
 800820e:	371c      	adds	r7, #28
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f023 0210 	bic.w	r2, r3, #16
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008242:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	031b      	lsls	r3, r3, #12
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008254:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	621a      	str	r2, [r3, #32]
}
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f023 0303 	bic.w	r3, r3, #3
 80082a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80082c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	621a      	str	r2, [r3, #32]
}
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	4313      	orrs	r3, r2
 8008326:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800832e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	031b      	lsls	r3, r3, #12
 8008334:	b29b      	uxth	r3, r3
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008342:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	031b      	lsls	r3, r3, #12
 8008348:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	4313      	orrs	r3, r2
 8008350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	621a      	str	r2, [r3, #32]
}
 800835e:	bf00      	nop
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	f043 0307 	orr.w	r3, r3, #7
 800838c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	609a      	str	r2, [r3, #8]
}
 8008394:	bf00      	nop
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	021a      	lsls	r2, r3, #8
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	609a      	str	r2, [r3, #8]
}
 80083d4:	bf00      	nop
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e05a      	b.n	80084ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a21      	ldr	r2, [pc, #132]	; (80084bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d022      	beq.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008444:	d01d      	beq.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1d      	ldr	r2, [pc, #116]	; (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d018      	beq.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d013      	beq.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a1a      	ldr	r2, [pc, #104]	; (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d00e      	beq.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a18      	ldr	r2, [pc, #96]	; (80084cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d009      	beq.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a17      	ldr	r2, [pc, #92]	; (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d004      	beq.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d10c      	bne.n	800849c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	4313      	orrs	r3, r2
 8008492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40010000 	.word	0x40010000
 80084c0:	40000400 	.word	0x40000400
 80084c4:	40000800 	.word	0x40000800
 80084c8:	40000c00 	.word	0x40000c00
 80084cc:	40010400 	.word	0x40010400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40001800 	.word	0x40001800

080084d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e03f      	b.n	8008592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fd fb72 	bl	8005c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2224      	movs	r2, #36	; 0x24
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fddb 	bl	8009100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	695a      	ldr	r2, [r3, #20]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b08a      	sub	sp, #40	; 0x28
 800859e:	af02      	add	r7, sp, #8
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	4613      	mov	r3, r2
 80085a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d17c      	bne.n	80086b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <HAL_UART_Transmit+0x2c>
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e075      	b.n	80086b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_UART_Transmit+0x3e>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e06e      	b.n	80086b6 <HAL_UART_Transmit+0x11c>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2221      	movs	r2, #33	; 0x21
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085ee:	f7fd fda5 	bl	800613c <HAL_GetTick>
 80085f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	88fa      	ldrh	r2, [r7, #6]
 80085f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	88fa      	ldrh	r2, [r7, #6]
 80085fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008608:	d108      	bne.n	800861c <HAL_UART_Transmit+0x82>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008612:	2300      	movs	r3, #0
 8008614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	61bb      	str	r3, [r7, #24]
 800861a:	e003      	b.n	8008624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800862c:	e02a      	b.n	8008684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2200      	movs	r2, #0
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fb1f 	bl	8008c7c <UART_WaitOnFlagUntilTimeout>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e036      	b.n	80086b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10b      	bne.n	8008666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800865c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	3302      	adds	r3, #2
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	e007      	b.n	8008676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3301      	adds	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800867a:	b29b      	uxth	r3, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1cf      	bne.n	800862e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2200      	movs	r2, #0
 8008696:	2140      	movs	r1, #64	; 0x40
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 faef 	bl	8008c7c <UART_WaitOnFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e006      	b.n	80086b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	e000      	b.n	80086b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80086b4:	2302      	movs	r3, #2
  }
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	4613      	mov	r3, r2
 80086ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d11d      	bne.n	8008714 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <HAL_UART_Receive_IT+0x26>
 80086de:	88fb      	ldrh	r3, [r7, #6]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e016      	b.n	8008716 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_UART_Receive_IT+0x38>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e00f      	b.n	8008716 <HAL_UART_Receive_IT+0x58>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	461a      	mov	r2, r3
 8008708:	68b9      	ldr	r1, [r7, #8]
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 fb24 	bl	8008d58 <UART_Start_Receive_IT>
 8008710:	4603      	mov	r3, r0
 8008712:	e000      	b.n	8008716 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008714:	2302      	movs	r3, #2
  }
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b0ba      	sub	sp, #232	; 0xe8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008746:	2300      	movs	r3, #0
 8008748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800874c:	2300      	movs	r3, #0
 800874e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800875e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10f      	bne.n	8008786 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d009      	beq.n	8008786 <HAL_UART_IRQHandler+0x66>
 8008772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008776:	f003 0320 	and.w	r3, r3, #32
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fc03 	bl	8008f8a <UART_Receive_IT>
      return;
 8008784:	e256      	b.n	8008c34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 80de 	beq.w	800894c <HAL_UART_IRQHandler+0x22c>
 8008790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800879c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 80d1 	beq.w	800894c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00b      	beq.n	80087ce <HAL_UART_IRQHandler+0xae>
 80087b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	f043 0201 	orr.w	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <HAL_UART_IRQHandler+0xd2>
 80087da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f043 0202 	orr.w	r2, r3, #2
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <HAL_UART_IRQHandler+0xf6>
 80087fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f043 0204 	orr.w	r2, r3, #4
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d011      	beq.n	8008846 <HAL_UART_IRQHandler+0x126>
 8008822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b00      	cmp	r3, #0
 800882c:	d105      	bne.n	800883a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800882e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	f043 0208 	orr.w	r2, r3, #8
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 81ed 	beq.w	8008c2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008854:	f003 0320 	and.w	r3, r3, #32
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <HAL_UART_IRQHandler+0x14e>
 800885c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008860:	f003 0320 	and.w	r3, r3, #32
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fb8e 	bl	8008f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008878:	2b40      	cmp	r3, #64	; 0x40
 800887a:	bf0c      	ite	eq
 800887c:	2301      	moveq	r3, #1
 800887e:	2300      	movne	r3, #0
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	f003 0308 	and.w	r3, r3, #8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d103      	bne.n	800889a <HAL_UART_IRQHandler+0x17a>
 8008892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008896:	2b00      	cmp	r3, #0
 8008898:	d04f      	beq.n	800893a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa96 	bl	8008dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b40      	cmp	r3, #64	; 0x40
 80088ac:	d141      	bne.n	8008932 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3314      	adds	r3, #20
 80088b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3314      	adds	r3, #20
 80088d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1d9      	bne.n	80088ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d013      	beq.n	800892a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008906:	4a7d      	ldr	r2, [pc, #500]	; (8008afc <HAL_UART_IRQHandler+0x3dc>)
 8008908:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	4618      	mov	r0, r3
 8008910:	f7fd fddf 	bl	80064d2 <HAL_DMA_Abort_IT>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d016      	beq.n	8008948 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008928:	e00e      	b.n	8008948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f990 	bl	8008c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008930:	e00a      	b.n	8008948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f98c 	bl	8008c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008938:	e006      	b.n	8008948 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f988 	bl	8008c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008946:	e170      	b.n	8008c2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008948:	bf00      	nop
    return;
 800894a:	e16e      	b.n	8008c2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	2b01      	cmp	r3, #1
 8008952:	f040 814a 	bne.w	8008bea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 8143 	beq.w	8008bea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 813c 	beq.w	8008bea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008972:	2300      	movs	r3, #0
 8008974:	60bb      	str	r3, [r7, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60bb      	str	r3, [r7, #8]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	f040 80b4 	bne.w	8008b00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8140 	beq.w	8008c2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089b6:	429a      	cmp	r2, r3
 80089b8:	f080 8139 	bcs.w	8008c2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ce:	f000 8088 	beq.w	8008ae2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1d9      	bne.n	80089d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3314      	adds	r3, #20
 8008a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a30:	f023 0301 	bic.w	r3, r3, #1
 8008a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e1      	bne.n	8008a1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3314      	adds	r3, #20
 8008a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e3      	bne.n	8008a5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ab2:	f023 0310 	bic.w	r3, r3, #16
 8008ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	330c      	adds	r3, #12
 8008ac0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ac6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e3      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fd fc88 	bl	80063f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f8b6 	bl	8008c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008af8:	e099      	b.n	8008c2e <HAL_UART_IRQHandler+0x50e>
 8008afa:	bf00      	nop
 8008afc:	08008e93 	.word	0x08008e93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 808b 	beq.w	8008c32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8086 	beq.w	8008c32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	330c      	adds	r3, #12
 8008b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e3      	bne.n	8008b26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3314      	adds	r3, #20
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3314      	adds	r3, #20
 8008b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b82:	633a      	str	r2, [r7, #48]	; 0x30
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e3      	bne.n	8008b5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0310 	bic.w	r3, r3, #16
 8008bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	330c      	adds	r3, #12
 8008bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008bc8:	61fa      	str	r2, [r7, #28]
 8008bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	69b9      	ldr	r1, [r7, #24]
 8008bce:	69fa      	ldr	r2, [r7, #28]
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e3      	bne.n	8008ba4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f83e 	bl	8008c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008be8:	e023      	b.n	8008c32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <HAL_UART_IRQHandler+0x4ea>
 8008bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f959 	bl	8008eba <UART_Transmit_IT>
    return;
 8008c08:	e014      	b.n	8008c34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00e      	beq.n	8008c34 <HAL_UART_IRQHandler+0x514>
 8008c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d008      	beq.n	8008c34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f999 	bl	8008f5a <UART_EndTransmit_IT>
    return;
 8008c28:	e004      	b.n	8008c34 <HAL_UART_IRQHandler+0x514>
    return;
 8008c2a:	bf00      	nop
 8008c2c:	e002      	b.n	8008c34 <HAL_UART_IRQHandler+0x514>
      return;
 8008c2e:	bf00      	nop
 8008c30:	e000      	b.n	8008c34 <HAL_UART_IRQHandler+0x514>
      return;
 8008c32:	bf00      	nop
  }
}
 8008c34:	37e8      	adds	r7, #232	; 0xe8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop

08008c3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b090      	sub	sp, #64	; 0x40
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c8c:	e050      	b.n	8008d30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d04c      	beq.n	8008d30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d007      	beq.n	8008cac <UART_WaitOnFlagUntilTimeout+0x30>
 8008c9c:	f7fd fa4e 	bl	800613c <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d241      	bcs.n	8008d30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	330c      	adds	r3, #12
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ccc:	637a      	str	r2, [r7, #52]	; 0x34
 8008cce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e5      	bne.n	8008cac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3314      	adds	r3, #20
 8008ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f023 0301 	bic.w	r3, r3, #1
 8008cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3314      	adds	r3, #20
 8008cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d00:	623a      	str	r2, [r7, #32]
 8008d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	69f9      	ldr	r1, [r7, #28]
 8008d06:	6a3a      	ldr	r2, [r7, #32]
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e5      	bne.n	8008ce0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e00f      	b.n	8008d50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	4013      	ands	r3, r2
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	bf0c      	ite	eq
 8008d40:	2301      	moveq	r3, #1
 8008d42:	2300      	movne	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	461a      	mov	r2, r3
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d09f      	beq.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3740      	adds	r7, #64	; 0x40
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	88fa      	ldrh	r2, [r7, #6]
 8008d70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2222      	movs	r2, #34	; 0x22
 8008d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d9c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695a      	ldr	r2, [r3, #20]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
 8008dac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0220 	orr.w	r2, r2, #32
 8008dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b095      	sub	sp, #84	; 0x54
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	330c      	adds	r3, #12
 8008df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008df4:	643a      	str	r2, [r7, #64]	; 0x40
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e5      	bne.n	8008dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3314      	adds	r3, #20
 8008e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e5      	bne.n	8008e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d119      	bne.n	8008e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	330c      	adds	r3, #12
 8008e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f023 0310 	bic.w	r3, r3, #16
 8008e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	330c      	adds	r3, #12
 8008e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e64:	61ba      	str	r2, [r7, #24]
 8008e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	6979      	ldr	r1, [r7, #20]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	613b      	str	r3, [r7, #16]
   return(result);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e5      	bne.n	8008e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e86:	bf00      	nop
 8008e88:	3754      	adds	r7, #84	; 0x54
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f7ff fecf 	bl	8008c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b21      	cmp	r3, #33	; 0x21
 8008ecc:	d13e      	bne.n	8008f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed6:	d114      	bne.n	8008f02 <UART_Transmit_IT+0x48>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d110      	bne.n	8008f02 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a1b      	ldr	r3, [r3, #32]
 8008ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	1c9a      	adds	r2, r3, #2
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	621a      	str	r2, [r3, #32]
 8008f00:	e008      	b.n	8008f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	1c59      	adds	r1, r3, #1
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6211      	str	r1, [r2, #32]
 8008f0c:	781a      	ldrb	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	4619      	mov	r1, r3
 8008f22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10f      	bne.n	8008f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
  }
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68da      	ldr	r2, [r3, #12]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff fe5e 	bl	8008c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b08c      	sub	sp, #48	; 0x30
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b22      	cmp	r3, #34	; 0x22
 8008f9c:	f040 80ab 	bne.w	80090f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa8:	d117      	bne.n	8008fda <UART_Receive_IT+0x50>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d113      	bne.n	8008fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	1c9a      	adds	r2, r3, #2
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8008fd8:	e026      	b.n	8009028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fec:	d007      	beq.n	8008ffe <UART_Receive_IT+0x74>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10a      	bne.n	800900c <UART_Receive_IT+0x82>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d106      	bne.n	800900c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	b2da      	uxtb	r2, r3
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e008      	b.n	800901e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009018:	b2da      	uxtb	r2, r3
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800902c:	b29b      	uxth	r3, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	b29b      	uxth	r3, r3
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	4619      	mov	r1, r3
 8009036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009038:	2b00      	cmp	r3, #0
 800903a:	d15a      	bne.n	80090f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f022 0220 	bic.w	r2, r2, #32
 800904a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800905a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	695a      	ldr	r2, [r3, #20]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0201 	bic.w	r2, r2, #1
 800906a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2220      	movs	r2, #32
 8009070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	2b01      	cmp	r3, #1
 800907a:	d135      	bne.n	80090e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	330c      	adds	r3, #12
 8009088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	613b      	str	r3, [r7, #16]
   return(result);
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f023 0310 	bic.w	r3, r3, #16
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	330c      	adds	r3, #12
 80090a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a2:	623a      	str	r2, [r7, #32]
 80090a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	69f9      	ldr	r1, [r7, #28]
 80090a8:	6a3a      	ldr	r2, [r7, #32]
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e5      	bne.n	8009082 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0310 	and.w	r3, r3, #16
 80090c0:	2b10      	cmp	r3, #16
 80090c2:	d10a      	bne.n	80090da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff fdbf 	bl	8008c64 <HAL_UARTEx_RxEventCallback>
 80090e6:	e002      	b.n	80090ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7fb fba3 	bl	8004834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	e002      	b.n	80090f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	e000      	b.n	80090f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80090f6:	2302      	movs	r3, #2
  }
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3730      	adds	r7, #48	; 0x30
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009104:	b0c0      	sub	sp, #256	; 0x100
 8009106:	af00      	add	r7, sp, #0
 8009108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800910c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911c:	68d9      	ldr	r1, [r3, #12]
 800911e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	ea40 0301 	orr.w	r3, r0, r1
 8009128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800912a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	431a      	orrs	r2, r3
 8009138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	431a      	orrs	r2, r3
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	4313      	orrs	r3, r2
 8009148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009158:	f021 010c 	bic.w	r1, r1, #12
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009166:	430b      	orrs	r3, r1
 8009168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800916a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917a:	6999      	ldr	r1, [r3, #24]
 800917c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	ea40 0301 	orr.w	r3, r0, r1
 8009186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	4b8f      	ldr	r3, [pc, #572]	; (80093cc <UART_SetConfig+0x2cc>)
 8009190:	429a      	cmp	r2, r3
 8009192:	d005      	beq.n	80091a0 <UART_SetConfig+0xa0>
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4b8d      	ldr	r3, [pc, #564]	; (80093d0 <UART_SetConfig+0x2d0>)
 800919c:	429a      	cmp	r2, r3
 800919e:	d104      	bne.n	80091aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091a0:	f7fe faca 	bl	8007738 <HAL_RCC_GetPCLK2Freq>
 80091a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091a8:	e003      	b.n	80091b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091aa:	f7fe fab1 	bl	8007710 <HAL_RCC_GetPCLK1Freq>
 80091ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091bc:	f040 810c 	bne.w	80093d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091d2:	4622      	mov	r2, r4
 80091d4:	462b      	mov	r3, r5
 80091d6:	1891      	adds	r1, r2, r2
 80091d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80091da:	415b      	adcs	r3, r3
 80091dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091e2:	4621      	mov	r1, r4
 80091e4:	eb12 0801 	adds.w	r8, r2, r1
 80091e8:	4629      	mov	r1, r5
 80091ea:	eb43 0901 	adc.w	r9, r3, r1
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009202:	4690      	mov	r8, r2
 8009204:	4699      	mov	r9, r3
 8009206:	4623      	mov	r3, r4
 8009208:	eb18 0303 	adds.w	r3, r8, r3
 800920c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009210:	462b      	mov	r3, r5
 8009212:	eb49 0303 	adc.w	r3, r9, r3
 8009216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800921a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800922a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800922e:	460b      	mov	r3, r1
 8009230:	18db      	adds	r3, r3, r3
 8009232:	653b      	str	r3, [r7, #80]	; 0x50
 8009234:	4613      	mov	r3, r2
 8009236:	eb42 0303 	adc.w	r3, r2, r3
 800923a:	657b      	str	r3, [r7, #84]	; 0x54
 800923c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009244:	f7f7 fd20 	bl	8000c88 <__aeabi_uldivmod>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4b61      	ldr	r3, [pc, #388]	; (80093d4 <UART_SetConfig+0x2d4>)
 800924e:	fba3 2302 	umull	r2, r3, r3, r2
 8009252:	095b      	lsrs	r3, r3, #5
 8009254:	011c      	lsls	r4, r3, #4
 8009256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800925a:	2200      	movs	r2, #0
 800925c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009268:	4642      	mov	r2, r8
 800926a:	464b      	mov	r3, r9
 800926c:	1891      	adds	r1, r2, r2
 800926e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009270:	415b      	adcs	r3, r3
 8009272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009278:	4641      	mov	r1, r8
 800927a:	eb12 0a01 	adds.w	sl, r2, r1
 800927e:	4649      	mov	r1, r9
 8009280:	eb43 0b01 	adc.w	fp, r3, r1
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	f04f 0300 	mov.w	r3, #0
 800928c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009298:	4692      	mov	sl, r2
 800929a:	469b      	mov	fp, r3
 800929c:	4643      	mov	r3, r8
 800929e:	eb1a 0303 	adds.w	r3, sl, r3
 80092a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092a6:	464b      	mov	r3, r9
 80092a8:	eb4b 0303 	adc.w	r3, fp, r3
 80092ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80092c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092c4:	460b      	mov	r3, r1
 80092c6:	18db      	adds	r3, r3, r3
 80092c8:	643b      	str	r3, [r7, #64]	; 0x40
 80092ca:	4613      	mov	r3, r2
 80092cc:	eb42 0303 	adc.w	r3, r2, r3
 80092d0:	647b      	str	r3, [r7, #68]	; 0x44
 80092d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092da:	f7f7 fcd5 	bl	8000c88 <__aeabi_uldivmod>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	4b3b      	ldr	r3, [pc, #236]	; (80093d4 <UART_SetConfig+0x2d4>)
 80092e6:	fba3 2301 	umull	r2, r3, r3, r1
 80092ea:	095b      	lsrs	r3, r3, #5
 80092ec:	2264      	movs	r2, #100	; 0x64
 80092ee:	fb02 f303 	mul.w	r3, r2, r3
 80092f2:	1acb      	subs	r3, r1, r3
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092fa:	4b36      	ldr	r3, [pc, #216]	; (80093d4 <UART_SetConfig+0x2d4>)
 80092fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009300:	095b      	lsrs	r3, r3, #5
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009308:	441c      	add	r4, r3
 800930a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800930e:	2200      	movs	r2, #0
 8009310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800931c:	4642      	mov	r2, r8
 800931e:	464b      	mov	r3, r9
 8009320:	1891      	adds	r1, r2, r2
 8009322:	63b9      	str	r1, [r7, #56]	; 0x38
 8009324:	415b      	adcs	r3, r3
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800932c:	4641      	mov	r1, r8
 800932e:	1851      	adds	r1, r2, r1
 8009330:	6339      	str	r1, [r7, #48]	; 0x30
 8009332:	4649      	mov	r1, r9
 8009334:	414b      	adcs	r3, r1
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009344:	4659      	mov	r1, fp
 8009346:	00cb      	lsls	r3, r1, #3
 8009348:	4651      	mov	r1, sl
 800934a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800934e:	4651      	mov	r1, sl
 8009350:	00ca      	lsls	r2, r1, #3
 8009352:	4610      	mov	r0, r2
 8009354:	4619      	mov	r1, r3
 8009356:	4603      	mov	r3, r0
 8009358:	4642      	mov	r2, r8
 800935a:	189b      	adds	r3, r3, r2
 800935c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009360:	464b      	mov	r3, r9
 8009362:	460a      	mov	r2, r1
 8009364:	eb42 0303 	adc.w	r3, r2, r3
 8009368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800936c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800937c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009380:	460b      	mov	r3, r1
 8009382:	18db      	adds	r3, r3, r3
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
 8009386:	4613      	mov	r3, r2
 8009388:	eb42 0303 	adc.w	r3, r2, r3
 800938c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800938e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009396:	f7f7 fc77 	bl	8000c88 <__aeabi_uldivmod>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <UART_SetConfig+0x2d4>)
 80093a0:	fba3 1302 	umull	r1, r3, r3, r2
 80093a4:	095b      	lsrs	r3, r3, #5
 80093a6:	2164      	movs	r1, #100	; 0x64
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	3332      	adds	r3, #50	; 0x32
 80093b2:	4a08      	ldr	r2, [pc, #32]	; (80093d4 <UART_SetConfig+0x2d4>)
 80093b4:	fba2 2303 	umull	r2, r3, r2, r3
 80093b8:	095b      	lsrs	r3, r3, #5
 80093ba:	f003 0207 	and.w	r2, r3, #7
 80093be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4422      	add	r2, r4
 80093c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093c8:	e105      	b.n	80095d6 <UART_SetConfig+0x4d6>
 80093ca:	bf00      	nop
 80093cc:	40011000 	.word	0x40011000
 80093d0:	40011400 	.word	0x40011400
 80093d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093dc:	2200      	movs	r2, #0
 80093de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093ea:	4642      	mov	r2, r8
 80093ec:	464b      	mov	r3, r9
 80093ee:	1891      	adds	r1, r2, r2
 80093f0:	6239      	str	r1, [r7, #32]
 80093f2:	415b      	adcs	r3, r3
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
 80093f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093fa:	4641      	mov	r1, r8
 80093fc:	1854      	adds	r4, r2, r1
 80093fe:	4649      	mov	r1, r9
 8009400:	eb43 0501 	adc.w	r5, r3, r1
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	00eb      	lsls	r3, r5, #3
 800940e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009412:	00e2      	lsls	r2, r4, #3
 8009414:	4614      	mov	r4, r2
 8009416:	461d      	mov	r5, r3
 8009418:	4643      	mov	r3, r8
 800941a:	18e3      	adds	r3, r4, r3
 800941c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009420:	464b      	mov	r3, r9
 8009422:	eb45 0303 	adc.w	r3, r5, r3
 8009426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800942a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800943a:	f04f 0200 	mov.w	r2, #0
 800943e:	f04f 0300 	mov.w	r3, #0
 8009442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009446:	4629      	mov	r1, r5
 8009448:	008b      	lsls	r3, r1, #2
 800944a:	4621      	mov	r1, r4
 800944c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009450:	4621      	mov	r1, r4
 8009452:	008a      	lsls	r2, r1, #2
 8009454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009458:	f7f7 fc16 	bl	8000c88 <__aeabi_uldivmod>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4b60      	ldr	r3, [pc, #384]	; (80095e4 <UART_SetConfig+0x4e4>)
 8009462:	fba3 2302 	umull	r2, r3, r3, r2
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	011c      	lsls	r4, r3, #4
 800946a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800946e:	2200      	movs	r2, #0
 8009470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800947c:	4642      	mov	r2, r8
 800947e:	464b      	mov	r3, r9
 8009480:	1891      	adds	r1, r2, r2
 8009482:	61b9      	str	r1, [r7, #24]
 8009484:	415b      	adcs	r3, r3
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800948c:	4641      	mov	r1, r8
 800948e:	1851      	adds	r1, r2, r1
 8009490:	6139      	str	r1, [r7, #16]
 8009492:	4649      	mov	r1, r9
 8009494:	414b      	adcs	r3, r1
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094a4:	4659      	mov	r1, fp
 80094a6:	00cb      	lsls	r3, r1, #3
 80094a8:	4651      	mov	r1, sl
 80094aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ae:	4651      	mov	r1, sl
 80094b0:	00ca      	lsls	r2, r1, #3
 80094b2:	4610      	mov	r0, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	4603      	mov	r3, r0
 80094b8:	4642      	mov	r2, r8
 80094ba:	189b      	adds	r3, r3, r2
 80094bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094c0:	464b      	mov	r3, r9
 80094c2:	460a      	mov	r2, r1
 80094c4:	eb42 0303 	adc.w	r3, r2, r3
 80094c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094e4:	4649      	mov	r1, r9
 80094e6:	008b      	lsls	r3, r1, #2
 80094e8:	4641      	mov	r1, r8
 80094ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094ee:	4641      	mov	r1, r8
 80094f0:	008a      	lsls	r2, r1, #2
 80094f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094f6:	f7f7 fbc7 	bl	8000c88 <__aeabi_uldivmod>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	4b39      	ldr	r3, [pc, #228]	; (80095e4 <UART_SetConfig+0x4e4>)
 8009500:	fba3 1302 	umull	r1, r3, r3, r2
 8009504:	095b      	lsrs	r3, r3, #5
 8009506:	2164      	movs	r1, #100	; 0x64
 8009508:	fb01 f303 	mul.w	r3, r1, r3
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	3332      	adds	r3, #50	; 0x32
 8009512:	4a34      	ldr	r2, [pc, #208]	; (80095e4 <UART_SetConfig+0x4e4>)
 8009514:	fba2 2303 	umull	r2, r3, r2, r3
 8009518:	095b      	lsrs	r3, r3, #5
 800951a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800951e:	441c      	add	r4, r3
 8009520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009524:	2200      	movs	r2, #0
 8009526:	673b      	str	r3, [r7, #112]	; 0x70
 8009528:	677a      	str	r2, [r7, #116]	; 0x74
 800952a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800952e:	4642      	mov	r2, r8
 8009530:	464b      	mov	r3, r9
 8009532:	1891      	adds	r1, r2, r2
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	415b      	adcs	r3, r3
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800953e:	4641      	mov	r1, r8
 8009540:	1851      	adds	r1, r2, r1
 8009542:	6039      	str	r1, [r7, #0]
 8009544:	4649      	mov	r1, r9
 8009546:	414b      	adcs	r3, r1
 8009548:	607b      	str	r3, [r7, #4]
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009556:	4659      	mov	r1, fp
 8009558:	00cb      	lsls	r3, r1, #3
 800955a:	4651      	mov	r1, sl
 800955c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009560:	4651      	mov	r1, sl
 8009562:	00ca      	lsls	r2, r1, #3
 8009564:	4610      	mov	r0, r2
 8009566:	4619      	mov	r1, r3
 8009568:	4603      	mov	r3, r0
 800956a:	4642      	mov	r2, r8
 800956c:	189b      	adds	r3, r3, r2
 800956e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009570:	464b      	mov	r3, r9
 8009572:	460a      	mov	r2, r1
 8009574:	eb42 0303 	adc.w	r3, r2, r3
 8009578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800957a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	663b      	str	r3, [r7, #96]	; 0x60
 8009584:	667a      	str	r2, [r7, #100]	; 0x64
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	f04f 0300 	mov.w	r3, #0
 800958e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009592:	4649      	mov	r1, r9
 8009594:	008b      	lsls	r3, r1, #2
 8009596:	4641      	mov	r1, r8
 8009598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800959c:	4641      	mov	r1, r8
 800959e:	008a      	lsls	r2, r1, #2
 80095a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095a4:	f7f7 fb70 	bl	8000c88 <__aeabi_uldivmod>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <UART_SetConfig+0x4e4>)
 80095ae:	fba3 1302 	umull	r1, r3, r3, r2
 80095b2:	095b      	lsrs	r3, r3, #5
 80095b4:	2164      	movs	r1, #100	; 0x64
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	3332      	adds	r3, #50	; 0x32
 80095c0:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <UART_SetConfig+0x4e4>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	f003 020f 	and.w	r2, r3, #15
 80095cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4422      	add	r2, r4
 80095d4:	609a      	str	r2, [r3, #8]
}
 80095d6:	bf00      	nop
 80095d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095dc:	46bd      	mov	sp, r7
 80095de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095e2:	bf00      	nop
 80095e4:	51eb851f 	.word	0x51eb851f

080095e8 <atof>:
 80095e8:	2100      	movs	r1, #0
 80095ea:	f001 badf 	b.w	800abac <strtod>
	...

080095f0 <__errno>:
 80095f0:	4b01      	ldr	r3, [pc, #4]	; (80095f8 <__errno+0x8>)
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	20000020 	.word	0x20000020

080095fc <__libc_init_array>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4d0d      	ldr	r5, [pc, #52]	; (8009634 <__libc_init_array+0x38>)
 8009600:	4c0d      	ldr	r4, [pc, #52]	; (8009638 <__libc_init_array+0x3c>)
 8009602:	1b64      	subs	r4, r4, r5
 8009604:	10a4      	asrs	r4, r4, #2
 8009606:	2600      	movs	r6, #0
 8009608:	42a6      	cmp	r6, r4
 800960a:	d109      	bne.n	8009620 <__libc_init_array+0x24>
 800960c:	4d0b      	ldr	r5, [pc, #44]	; (800963c <__libc_init_array+0x40>)
 800960e:	4c0c      	ldr	r4, [pc, #48]	; (8009640 <__libc_init_array+0x44>)
 8009610:	f004 fb38 	bl	800dc84 <_init>
 8009614:	1b64      	subs	r4, r4, r5
 8009616:	10a4      	asrs	r4, r4, #2
 8009618:	2600      	movs	r6, #0
 800961a:	42a6      	cmp	r6, r4
 800961c:	d105      	bne.n	800962a <__libc_init_array+0x2e>
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	f855 3b04 	ldr.w	r3, [r5], #4
 8009624:	4798      	blx	r3
 8009626:	3601      	adds	r6, #1
 8009628:	e7ee      	b.n	8009608 <__libc_init_array+0xc>
 800962a:	f855 3b04 	ldr.w	r3, [r5], #4
 800962e:	4798      	blx	r3
 8009630:	3601      	adds	r6, #1
 8009632:	e7f2      	b.n	800961a <__libc_init_array+0x1e>
 8009634:	0800e348 	.word	0x0800e348
 8009638:	0800e348 	.word	0x0800e348
 800963c:	0800e348 	.word	0x0800e348
 8009640:	0800e34c 	.word	0x0800e34c

08009644 <memset>:
 8009644:	4402      	add	r2, r0
 8009646:	4603      	mov	r3, r0
 8009648:	4293      	cmp	r3, r2
 800964a:	d100      	bne.n	800964e <memset+0xa>
 800964c:	4770      	bx	lr
 800964e:	f803 1b01 	strb.w	r1, [r3], #1
 8009652:	e7f9      	b.n	8009648 <memset+0x4>

08009654 <__cvt>:
 8009654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	ec55 4b10 	vmov	r4, r5, d0
 800965c:	2d00      	cmp	r5, #0
 800965e:	460e      	mov	r6, r1
 8009660:	4619      	mov	r1, r3
 8009662:	462b      	mov	r3, r5
 8009664:	bfbb      	ittet	lt
 8009666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800966a:	461d      	movlt	r5, r3
 800966c:	2300      	movge	r3, #0
 800966e:	232d      	movlt	r3, #45	; 0x2d
 8009670:	700b      	strb	r3, [r1, #0]
 8009672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009674:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009678:	4691      	mov	r9, r2
 800967a:	f023 0820 	bic.w	r8, r3, #32
 800967e:	bfbc      	itt	lt
 8009680:	4622      	movlt	r2, r4
 8009682:	4614      	movlt	r4, r2
 8009684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009688:	d005      	beq.n	8009696 <__cvt+0x42>
 800968a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800968e:	d100      	bne.n	8009692 <__cvt+0x3e>
 8009690:	3601      	adds	r6, #1
 8009692:	2102      	movs	r1, #2
 8009694:	e000      	b.n	8009698 <__cvt+0x44>
 8009696:	2103      	movs	r1, #3
 8009698:	ab03      	add	r3, sp, #12
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	ab02      	add	r3, sp, #8
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	ec45 4b10 	vmov	d0, r4, r5
 80096a4:	4653      	mov	r3, sl
 80096a6:	4632      	mov	r2, r6
 80096a8:	f001 fb92 	bl	800add0 <_dtoa_r>
 80096ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096b0:	4607      	mov	r7, r0
 80096b2:	d102      	bne.n	80096ba <__cvt+0x66>
 80096b4:	f019 0f01 	tst.w	r9, #1
 80096b8:	d022      	beq.n	8009700 <__cvt+0xac>
 80096ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096be:	eb07 0906 	add.w	r9, r7, r6
 80096c2:	d110      	bne.n	80096e6 <__cvt+0x92>
 80096c4:	783b      	ldrb	r3, [r7, #0]
 80096c6:	2b30      	cmp	r3, #48	; 0x30
 80096c8:	d10a      	bne.n	80096e0 <__cvt+0x8c>
 80096ca:	2200      	movs	r2, #0
 80096cc:	2300      	movs	r3, #0
 80096ce:	4620      	mov	r0, r4
 80096d0:	4629      	mov	r1, r5
 80096d2:	f7f7 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80096d6:	b918      	cbnz	r0, 80096e0 <__cvt+0x8c>
 80096d8:	f1c6 0601 	rsb	r6, r6, #1
 80096dc:	f8ca 6000 	str.w	r6, [sl]
 80096e0:	f8da 3000 	ldr.w	r3, [sl]
 80096e4:	4499      	add	r9, r3
 80096e6:	2200      	movs	r2, #0
 80096e8:	2300      	movs	r3, #0
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7f7 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80096f2:	b108      	cbz	r0, 80096f8 <__cvt+0xa4>
 80096f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80096f8:	2230      	movs	r2, #48	; 0x30
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	454b      	cmp	r3, r9
 80096fe:	d307      	bcc.n	8009710 <__cvt+0xbc>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009704:	1bdb      	subs	r3, r3, r7
 8009706:	4638      	mov	r0, r7
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	b004      	add	sp, #16
 800970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009710:	1c59      	adds	r1, r3, #1
 8009712:	9103      	str	r1, [sp, #12]
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	e7f0      	b.n	80096fa <__cvt+0xa6>

08009718 <__exponent>:
 8009718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971a:	4603      	mov	r3, r0
 800971c:	2900      	cmp	r1, #0
 800971e:	bfb8      	it	lt
 8009720:	4249      	neglt	r1, r1
 8009722:	f803 2b02 	strb.w	r2, [r3], #2
 8009726:	bfb4      	ite	lt
 8009728:	222d      	movlt	r2, #45	; 0x2d
 800972a:	222b      	movge	r2, #43	; 0x2b
 800972c:	2909      	cmp	r1, #9
 800972e:	7042      	strb	r2, [r0, #1]
 8009730:	dd2a      	ble.n	8009788 <__exponent+0x70>
 8009732:	f10d 0407 	add.w	r4, sp, #7
 8009736:	46a4      	mov	ip, r4
 8009738:	270a      	movs	r7, #10
 800973a:	46a6      	mov	lr, r4
 800973c:	460a      	mov	r2, r1
 800973e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009742:	fb07 1516 	mls	r5, r7, r6, r1
 8009746:	3530      	adds	r5, #48	; 0x30
 8009748:	2a63      	cmp	r2, #99	; 0x63
 800974a:	f104 34ff 	add.w	r4, r4, #4294967295
 800974e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009752:	4631      	mov	r1, r6
 8009754:	dcf1      	bgt.n	800973a <__exponent+0x22>
 8009756:	3130      	adds	r1, #48	; 0x30
 8009758:	f1ae 0502 	sub.w	r5, lr, #2
 800975c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009760:	1c44      	adds	r4, r0, #1
 8009762:	4629      	mov	r1, r5
 8009764:	4561      	cmp	r1, ip
 8009766:	d30a      	bcc.n	800977e <__exponent+0x66>
 8009768:	f10d 0209 	add.w	r2, sp, #9
 800976c:	eba2 020e 	sub.w	r2, r2, lr
 8009770:	4565      	cmp	r5, ip
 8009772:	bf88      	it	hi
 8009774:	2200      	movhi	r2, #0
 8009776:	4413      	add	r3, r2
 8009778:	1a18      	subs	r0, r3, r0
 800977a:	b003      	add	sp, #12
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009782:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009786:	e7ed      	b.n	8009764 <__exponent+0x4c>
 8009788:	2330      	movs	r3, #48	; 0x30
 800978a:	3130      	adds	r1, #48	; 0x30
 800978c:	7083      	strb	r3, [r0, #2]
 800978e:	70c1      	strb	r1, [r0, #3]
 8009790:	1d03      	adds	r3, r0, #4
 8009792:	e7f1      	b.n	8009778 <__exponent+0x60>

08009794 <_printf_float>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	ed2d 8b02 	vpush	{d8}
 800979c:	b08d      	sub	sp, #52	; 0x34
 800979e:	460c      	mov	r4, r1
 80097a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097a4:	4616      	mov	r6, r2
 80097a6:	461f      	mov	r7, r3
 80097a8:	4605      	mov	r5, r0
 80097aa:	f002 fc81 	bl	800c0b0 <_localeconv_r>
 80097ae:	f8d0 a000 	ldr.w	sl, [r0]
 80097b2:	4650      	mov	r0, sl
 80097b4:	f7f6 fd0c 	bl	80001d0 <strlen>
 80097b8:	2300      	movs	r3, #0
 80097ba:	930a      	str	r3, [sp, #40]	; 0x28
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	f8d8 3000 	ldr.w	r3, [r8]
 80097c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097c8:	3307      	adds	r3, #7
 80097ca:	f023 0307 	bic.w	r3, r3, #7
 80097ce:	f103 0208 	add.w	r2, r3, #8
 80097d2:	f8c8 2000 	str.w	r2, [r8]
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80097ec:	ee08 0a10 	vmov	s16, r0
 80097f0:	4b9f      	ldr	r3, [pc, #636]	; (8009a70 <_printf_float+0x2dc>)
 80097f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295
 80097fa:	f7f7 f997 	bl	8000b2c <__aeabi_dcmpun>
 80097fe:	bb88      	cbnz	r0, 8009864 <_printf_float+0xd0>
 8009800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009804:	4b9a      	ldr	r3, [pc, #616]	; (8009a70 <_printf_float+0x2dc>)
 8009806:	f04f 32ff 	mov.w	r2, #4294967295
 800980a:	f7f7 f971 	bl	8000af0 <__aeabi_dcmple>
 800980e:	bb48      	cbnz	r0, 8009864 <_printf_float+0xd0>
 8009810:	2200      	movs	r2, #0
 8009812:	2300      	movs	r3, #0
 8009814:	4640      	mov	r0, r8
 8009816:	4649      	mov	r1, r9
 8009818:	f7f7 f960 	bl	8000adc <__aeabi_dcmplt>
 800981c:	b110      	cbz	r0, 8009824 <_printf_float+0x90>
 800981e:	232d      	movs	r3, #45	; 0x2d
 8009820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009824:	4b93      	ldr	r3, [pc, #588]	; (8009a74 <_printf_float+0x2e0>)
 8009826:	4894      	ldr	r0, [pc, #592]	; (8009a78 <_printf_float+0x2e4>)
 8009828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800982c:	bf94      	ite	ls
 800982e:	4698      	movls	r8, r3
 8009830:	4680      	movhi	r8, r0
 8009832:	2303      	movs	r3, #3
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	9b05      	ldr	r3, [sp, #20]
 8009838:	f023 0204 	bic.w	r2, r3, #4
 800983c:	6022      	str	r2, [r4, #0]
 800983e:	f04f 0900 	mov.w	r9, #0
 8009842:	9700      	str	r7, [sp, #0]
 8009844:	4633      	mov	r3, r6
 8009846:	aa0b      	add	r2, sp, #44	; 0x2c
 8009848:	4621      	mov	r1, r4
 800984a:	4628      	mov	r0, r5
 800984c:	f000 f9d8 	bl	8009c00 <_printf_common>
 8009850:	3001      	adds	r0, #1
 8009852:	f040 8090 	bne.w	8009976 <_printf_float+0x1e2>
 8009856:	f04f 30ff 	mov.w	r0, #4294967295
 800985a:	b00d      	add	sp, #52	; 0x34
 800985c:	ecbd 8b02 	vpop	{d8}
 8009860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009864:	4642      	mov	r2, r8
 8009866:	464b      	mov	r3, r9
 8009868:	4640      	mov	r0, r8
 800986a:	4649      	mov	r1, r9
 800986c:	f7f7 f95e 	bl	8000b2c <__aeabi_dcmpun>
 8009870:	b140      	cbz	r0, 8009884 <_printf_float+0xf0>
 8009872:	464b      	mov	r3, r9
 8009874:	2b00      	cmp	r3, #0
 8009876:	bfbc      	itt	lt
 8009878:	232d      	movlt	r3, #45	; 0x2d
 800987a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800987e:	487f      	ldr	r0, [pc, #508]	; (8009a7c <_printf_float+0x2e8>)
 8009880:	4b7f      	ldr	r3, [pc, #508]	; (8009a80 <_printf_float+0x2ec>)
 8009882:	e7d1      	b.n	8009828 <_printf_float+0x94>
 8009884:	6863      	ldr	r3, [r4, #4]
 8009886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800988a:	9206      	str	r2, [sp, #24]
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	d13f      	bne.n	8009910 <_printf_float+0x17c>
 8009890:	2306      	movs	r3, #6
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	9b05      	ldr	r3, [sp, #20]
 8009896:	6861      	ldr	r1, [r4, #4]
 8009898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800989c:	2300      	movs	r3, #0
 800989e:	9303      	str	r3, [sp, #12]
 80098a0:	ab0a      	add	r3, sp, #40	; 0x28
 80098a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098a6:	ab09      	add	r3, sp, #36	; 0x24
 80098a8:	ec49 8b10 	vmov	d0, r8, r9
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098b4:	4628      	mov	r0, r5
 80098b6:	f7ff fecd 	bl	8009654 <__cvt>
 80098ba:	9b06      	ldr	r3, [sp, #24]
 80098bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098be:	2b47      	cmp	r3, #71	; 0x47
 80098c0:	4680      	mov	r8, r0
 80098c2:	d108      	bne.n	80098d6 <_printf_float+0x142>
 80098c4:	1cc8      	adds	r0, r1, #3
 80098c6:	db02      	blt.n	80098ce <_printf_float+0x13a>
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	4299      	cmp	r1, r3
 80098cc:	dd41      	ble.n	8009952 <_printf_float+0x1be>
 80098ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80098d2:	fa5f fb8b 	uxtb.w	fp, fp
 80098d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098da:	d820      	bhi.n	800991e <_printf_float+0x18a>
 80098dc:	3901      	subs	r1, #1
 80098de:	465a      	mov	r2, fp
 80098e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098e4:	9109      	str	r1, [sp, #36]	; 0x24
 80098e6:	f7ff ff17 	bl	8009718 <__exponent>
 80098ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ec:	1813      	adds	r3, r2, r0
 80098ee:	2a01      	cmp	r2, #1
 80098f0:	4681      	mov	r9, r0
 80098f2:	6123      	str	r3, [r4, #16]
 80098f4:	dc02      	bgt.n	80098fc <_printf_float+0x168>
 80098f6:	6822      	ldr	r2, [r4, #0]
 80098f8:	07d2      	lsls	r2, r2, #31
 80098fa:	d501      	bpl.n	8009900 <_printf_float+0x16c>
 80098fc:	3301      	adds	r3, #1
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009904:	2b00      	cmp	r3, #0
 8009906:	d09c      	beq.n	8009842 <_printf_float+0xae>
 8009908:	232d      	movs	r3, #45	; 0x2d
 800990a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800990e:	e798      	b.n	8009842 <_printf_float+0xae>
 8009910:	9a06      	ldr	r2, [sp, #24]
 8009912:	2a47      	cmp	r2, #71	; 0x47
 8009914:	d1be      	bne.n	8009894 <_printf_float+0x100>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1bc      	bne.n	8009894 <_printf_float+0x100>
 800991a:	2301      	movs	r3, #1
 800991c:	e7b9      	b.n	8009892 <_printf_float+0xfe>
 800991e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009922:	d118      	bne.n	8009956 <_printf_float+0x1c2>
 8009924:	2900      	cmp	r1, #0
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	dd0b      	ble.n	8009942 <_printf_float+0x1ae>
 800992a:	6121      	str	r1, [r4, #16]
 800992c:	b913      	cbnz	r3, 8009934 <_printf_float+0x1a0>
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	07d0      	lsls	r0, r2, #31
 8009932:	d502      	bpl.n	800993a <_printf_float+0x1a6>
 8009934:	3301      	adds	r3, #1
 8009936:	440b      	add	r3, r1
 8009938:	6123      	str	r3, [r4, #16]
 800993a:	65a1      	str	r1, [r4, #88]	; 0x58
 800993c:	f04f 0900 	mov.w	r9, #0
 8009940:	e7de      	b.n	8009900 <_printf_float+0x16c>
 8009942:	b913      	cbnz	r3, 800994a <_printf_float+0x1b6>
 8009944:	6822      	ldr	r2, [r4, #0]
 8009946:	07d2      	lsls	r2, r2, #31
 8009948:	d501      	bpl.n	800994e <_printf_float+0x1ba>
 800994a:	3302      	adds	r3, #2
 800994c:	e7f4      	b.n	8009938 <_printf_float+0x1a4>
 800994e:	2301      	movs	r3, #1
 8009950:	e7f2      	b.n	8009938 <_printf_float+0x1a4>
 8009952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009958:	4299      	cmp	r1, r3
 800995a:	db05      	blt.n	8009968 <_printf_float+0x1d4>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	6121      	str	r1, [r4, #16]
 8009960:	07d8      	lsls	r0, r3, #31
 8009962:	d5ea      	bpl.n	800993a <_printf_float+0x1a6>
 8009964:	1c4b      	adds	r3, r1, #1
 8009966:	e7e7      	b.n	8009938 <_printf_float+0x1a4>
 8009968:	2900      	cmp	r1, #0
 800996a:	bfd4      	ite	le
 800996c:	f1c1 0202 	rsble	r2, r1, #2
 8009970:	2201      	movgt	r2, #1
 8009972:	4413      	add	r3, r2
 8009974:	e7e0      	b.n	8009938 <_printf_float+0x1a4>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	055a      	lsls	r2, r3, #21
 800997a:	d407      	bmi.n	800998c <_printf_float+0x1f8>
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	4642      	mov	r2, r8
 8009980:	4631      	mov	r1, r6
 8009982:	4628      	mov	r0, r5
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	d12c      	bne.n	80099e4 <_printf_float+0x250>
 800998a:	e764      	b.n	8009856 <_printf_float+0xc2>
 800998c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009990:	f240 80e0 	bls.w	8009b54 <_printf_float+0x3c0>
 8009994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009998:	2200      	movs	r2, #0
 800999a:	2300      	movs	r3, #0
 800999c:	f7f7 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d034      	beq.n	8009a0e <_printf_float+0x27a>
 80099a4:	4a37      	ldr	r2, [pc, #220]	; (8009a84 <_printf_float+0x2f0>)
 80099a6:	2301      	movs	r3, #1
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	f43f af51 	beq.w	8009856 <_printf_float+0xc2>
 80099b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099b8:	429a      	cmp	r2, r3
 80099ba:	db02      	blt.n	80099c2 <_printf_float+0x22e>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	07d8      	lsls	r0, r3, #31
 80099c0:	d510      	bpl.n	80099e4 <_printf_float+0x250>
 80099c2:	ee18 3a10 	vmov	r3, s16
 80099c6:	4652      	mov	r2, sl
 80099c8:	4631      	mov	r1, r6
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b8      	blx	r7
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af41 	beq.w	8009856 <_printf_float+0xc2>
 80099d4:	f04f 0800 	mov.w	r8, #0
 80099d8:	f104 091a 	add.w	r9, r4, #26
 80099dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099de:	3b01      	subs	r3, #1
 80099e0:	4543      	cmp	r3, r8
 80099e2:	dc09      	bgt.n	80099f8 <_printf_float+0x264>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	079b      	lsls	r3, r3, #30
 80099e8:	f100 8105 	bmi.w	8009bf6 <_printf_float+0x462>
 80099ec:	68e0      	ldr	r0, [r4, #12]
 80099ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f0:	4298      	cmp	r0, r3
 80099f2:	bfb8      	it	lt
 80099f4:	4618      	movlt	r0, r3
 80099f6:	e730      	b.n	800985a <_printf_float+0xc6>
 80099f8:	2301      	movs	r3, #1
 80099fa:	464a      	mov	r2, r9
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b8      	blx	r7
 8009a02:	3001      	adds	r0, #1
 8009a04:	f43f af27 	beq.w	8009856 <_printf_float+0xc2>
 8009a08:	f108 0801 	add.w	r8, r8, #1
 8009a0c:	e7e6      	b.n	80099dc <_printf_float+0x248>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dc39      	bgt.n	8009a88 <_printf_float+0x2f4>
 8009a14:	4a1b      	ldr	r2, [pc, #108]	; (8009a84 <_printf_float+0x2f0>)
 8009a16:	2301      	movs	r3, #1
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b8      	blx	r7
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f43f af19 	beq.w	8009856 <_printf_float+0xc2>
 8009a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	d102      	bne.n	8009a32 <_printf_float+0x29e>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	07d9      	lsls	r1, r3, #31
 8009a30:	d5d8      	bpl.n	80099e4 <_printf_float+0x250>
 8009a32:	ee18 3a10 	vmov	r3, s16
 8009a36:	4652      	mov	r2, sl
 8009a38:	4631      	mov	r1, r6
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	47b8      	blx	r7
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f43f af09 	beq.w	8009856 <_printf_float+0xc2>
 8009a44:	f04f 0900 	mov.w	r9, #0
 8009a48:	f104 0a1a 	add.w	sl, r4, #26
 8009a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4e:	425b      	negs	r3, r3
 8009a50:	454b      	cmp	r3, r9
 8009a52:	dc01      	bgt.n	8009a58 <_printf_float+0x2c4>
 8009a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a56:	e792      	b.n	800997e <_printf_float+0x1ea>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4628      	mov	r0, r5
 8009a60:	47b8      	blx	r7
 8009a62:	3001      	adds	r0, #1
 8009a64:	f43f aef7 	beq.w	8009856 <_printf_float+0xc2>
 8009a68:	f109 0901 	add.w	r9, r9, #1
 8009a6c:	e7ee      	b.n	8009a4c <_printf_float+0x2b8>
 8009a6e:	bf00      	nop
 8009a70:	7fefffff 	.word	0x7fefffff
 8009a74:	0800de48 	.word	0x0800de48
 8009a78:	0800de4c 	.word	0x0800de4c
 8009a7c:	0800de54 	.word	0x0800de54
 8009a80:	0800de50 	.word	0x0800de50
 8009a84:	0800de58 	.word	0x0800de58
 8009a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	bfa8      	it	ge
 8009a90:	461a      	movge	r2, r3
 8009a92:	2a00      	cmp	r2, #0
 8009a94:	4691      	mov	r9, r2
 8009a96:	dc37      	bgt.n	8009b08 <_printf_float+0x374>
 8009a98:	f04f 0b00 	mov.w	fp, #0
 8009a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aa0:	f104 021a 	add.w	r2, r4, #26
 8009aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aa6:	9305      	str	r3, [sp, #20]
 8009aa8:	eba3 0309 	sub.w	r3, r3, r9
 8009aac:	455b      	cmp	r3, fp
 8009aae:	dc33      	bgt.n	8009b18 <_printf_float+0x384>
 8009ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	db3b      	blt.n	8009b30 <_printf_float+0x39c>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	07da      	lsls	r2, r3, #31
 8009abc:	d438      	bmi.n	8009b30 <_printf_float+0x39c>
 8009abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac0:	9a05      	ldr	r2, [sp, #20]
 8009ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ac4:	1a9a      	subs	r2, r3, r2
 8009ac6:	eba3 0901 	sub.w	r9, r3, r1
 8009aca:	4591      	cmp	r9, r2
 8009acc:	bfa8      	it	ge
 8009ace:	4691      	movge	r9, r2
 8009ad0:	f1b9 0f00 	cmp.w	r9, #0
 8009ad4:	dc35      	bgt.n	8009b42 <_printf_float+0x3ae>
 8009ad6:	f04f 0800 	mov.w	r8, #0
 8009ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ade:	f104 0a1a 	add.w	sl, r4, #26
 8009ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae6:	1a9b      	subs	r3, r3, r2
 8009ae8:	eba3 0309 	sub.w	r3, r3, r9
 8009aec:	4543      	cmp	r3, r8
 8009aee:	f77f af79 	ble.w	80099e4 <_printf_float+0x250>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4652      	mov	r2, sl
 8009af6:	4631      	mov	r1, r6
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b8      	blx	r7
 8009afc:	3001      	adds	r0, #1
 8009afe:	f43f aeaa 	beq.w	8009856 <_printf_float+0xc2>
 8009b02:	f108 0801 	add.w	r8, r8, #1
 8009b06:	e7ec      	b.n	8009ae2 <_printf_float+0x34e>
 8009b08:	4613      	mov	r3, r2
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	d1c0      	bne.n	8009a98 <_printf_float+0x304>
 8009b16:	e69e      	b.n	8009856 <_printf_float+0xc2>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	9205      	str	r2, [sp, #20]
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f ae97 	beq.w	8009856 <_printf_float+0xc2>
 8009b28:	9a05      	ldr	r2, [sp, #20]
 8009b2a:	f10b 0b01 	add.w	fp, fp, #1
 8009b2e:	e7b9      	b.n	8009aa4 <_printf_float+0x310>
 8009b30:	ee18 3a10 	vmov	r3, s16
 8009b34:	4652      	mov	r2, sl
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b8      	blx	r7
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d1be      	bne.n	8009abe <_printf_float+0x32a>
 8009b40:	e689      	b.n	8009856 <_printf_float+0xc2>
 8009b42:	9a05      	ldr	r2, [sp, #20]
 8009b44:	464b      	mov	r3, r9
 8009b46:	4442      	add	r2, r8
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d1c1      	bne.n	8009ad6 <_printf_float+0x342>
 8009b52:	e680      	b.n	8009856 <_printf_float+0xc2>
 8009b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b56:	2a01      	cmp	r2, #1
 8009b58:	dc01      	bgt.n	8009b5e <_printf_float+0x3ca>
 8009b5a:	07db      	lsls	r3, r3, #31
 8009b5c:	d538      	bpl.n	8009bd0 <_printf_float+0x43c>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4642      	mov	r2, r8
 8009b62:	4631      	mov	r1, r6
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b8      	blx	r7
 8009b68:	3001      	adds	r0, #1
 8009b6a:	f43f ae74 	beq.w	8009856 <_printf_float+0xc2>
 8009b6e:	ee18 3a10 	vmov	r3, s16
 8009b72:	4652      	mov	r2, sl
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f ae6b 	beq.w	8009856 <_printf_float+0xc2>
 8009b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b84:	2200      	movs	r2, #0
 8009b86:	2300      	movs	r3, #0
 8009b88:	f7f6 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b8c:	b9d8      	cbnz	r0, 8009bc6 <_printf_float+0x432>
 8009b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b90:	f108 0201 	add.w	r2, r8, #1
 8009b94:	3b01      	subs	r3, #1
 8009b96:	4631      	mov	r1, r6
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b8      	blx	r7
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d10e      	bne.n	8009bbe <_printf_float+0x42a>
 8009ba0:	e659      	b.n	8009856 <_printf_float+0xc2>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4652      	mov	r2, sl
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b8      	blx	r7
 8009bac:	3001      	adds	r0, #1
 8009bae:	f43f ae52 	beq.w	8009856 <_printf_float+0xc2>
 8009bb2:	f108 0801 	add.w	r8, r8, #1
 8009bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	4543      	cmp	r3, r8
 8009bbc:	dcf1      	bgt.n	8009ba2 <_printf_float+0x40e>
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bc4:	e6dc      	b.n	8009980 <_printf_float+0x1ec>
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	f104 0a1a 	add.w	sl, r4, #26
 8009bce:	e7f2      	b.n	8009bb6 <_printf_float+0x422>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	4642      	mov	r2, r8
 8009bd4:	e7df      	b.n	8009b96 <_printf_float+0x402>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	464a      	mov	r2, r9
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b8      	blx	r7
 8009be0:	3001      	adds	r0, #1
 8009be2:	f43f ae38 	beq.w	8009856 <_printf_float+0xc2>
 8009be6:	f108 0801 	add.w	r8, r8, #1
 8009bea:	68e3      	ldr	r3, [r4, #12]
 8009bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bee:	1a5b      	subs	r3, r3, r1
 8009bf0:	4543      	cmp	r3, r8
 8009bf2:	dcf0      	bgt.n	8009bd6 <_printf_float+0x442>
 8009bf4:	e6fa      	b.n	80099ec <_printf_float+0x258>
 8009bf6:	f04f 0800 	mov.w	r8, #0
 8009bfa:	f104 0919 	add.w	r9, r4, #25
 8009bfe:	e7f4      	b.n	8009bea <_printf_float+0x456>

08009c00 <_printf_common>:
 8009c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	4616      	mov	r6, r2
 8009c06:	4699      	mov	r9, r3
 8009c08:	688a      	ldr	r2, [r1, #8]
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	bfb8      	it	lt
 8009c14:	4613      	movlt	r3, r2
 8009c16:	6033      	str	r3, [r6, #0]
 8009c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b10a      	cbz	r2, 8009c26 <_printf_common+0x26>
 8009c22:	3301      	adds	r3, #1
 8009c24:	6033      	str	r3, [r6, #0]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	0699      	lsls	r1, r3, #26
 8009c2a:	bf42      	ittt	mi
 8009c2c:	6833      	ldrmi	r3, [r6, #0]
 8009c2e:	3302      	addmi	r3, #2
 8009c30:	6033      	strmi	r3, [r6, #0]
 8009c32:	6825      	ldr	r5, [r4, #0]
 8009c34:	f015 0506 	ands.w	r5, r5, #6
 8009c38:	d106      	bne.n	8009c48 <_printf_common+0x48>
 8009c3a:	f104 0a19 	add.w	sl, r4, #25
 8009c3e:	68e3      	ldr	r3, [r4, #12]
 8009c40:	6832      	ldr	r2, [r6, #0]
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	42ab      	cmp	r3, r5
 8009c46:	dc26      	bgt.n	8009c96 <_printf_common+0x96>
 8009c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c4c:	1e13      	subs	r3, r2, #0
 8009c4e:	6822      	ldr	r2, [r4, #0]
 8009c50:	bf18      	it	ne
 8009c52:	2301      	movne	r3, #1
 8009c54:	0692      	lsls	r2, r2, #26
 8009c56:	d42b      	bmi.n	8009cb0 <_printf_common+0xb0>
 8009c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d01e      	beq.n	8009ca4 <_printf_common+0xa4>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	68e5      	ldr	r5, [r4, #12]
 8009c6a:	6832      	ldr	r2, [r6, #0]
 8009c6c:	f003 0306 	and.w	r3, r3, #6
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	bf08      	it	eq
 8009c74:	1aad      	subeq	r5, r5, r2
 8009c76:	68a3      	ldr	r3, [r4, #8]
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	bf0c      	ite	eq
 8009c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c80:	2500      	movne	r5, #0
 8009c82:	4293      	cmp	r3, r2
 8009c84:	bfc4      	itt	gt
 8009c86:	1a9b      	subgt	r3, r3, r2
 8009c88:	18ed      	addgt	r5, r5, r3
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	341a      	adds	r4, #26
 8009c8e:	42b5      	cmp	r5, r6
 8009c90:	d11a      	bne.n	8009cc8 <_printf_common+0xc8>
 8009c92:	2000      	movs	r0, #0
 8009c94:	e008      	b.n	8009ca8 <_printf_common+0xa8>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4652      	mov	r2, sl
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	47c0      	blx	r8
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d103      	bne.n	8009cac <_printf_common+0xac>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cac:	3501      	adds	r5, #1
 8009cae:	e7c6      	b.n	8009c3e <_printf_common+0x3e>
 8009cb0:	18e1      	adds	r1, r4, r3
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	2030      	movs	r0, #48	; 0x30
 8009cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cba:	4422      	add	r2, r4
 8009cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	e7c7      	b.n	8009c58 <_printf_common+0x58>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4649      	mov	r1, r9
 8009cce:	4638      	mov	r0, r7
 8009cd0:	47c0      	blx	r8
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d0e6      	beq.n	8009ca4 <_printf_common+0xa4>
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	e7d9      	b.n	8009c8e <_printf_common+0x8e>
	...

08009cdc <_printf_i>:
 8009cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	7e0f      	ldrb	r7, [r1, #24]
 8009ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ce4:	2f78      	cmp	r7, #120	; 0x78
 8009ce6:	4691      	mov	r9, r2
 8009ce8:	4680      	mov	r8, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	469a      	mov	sl, r3
 8009cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cf2:	d807      	bhi.n	8009d04 <_printf_i+0x28>
 8009cf4:	2f62      	cmp	r7, #98	; 0x62
 8009cf6:	d80a      	bhi.n	8009d0e <_printf_i+0x32>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	f000 80d8 	beq.w	8009eae <_printf_i+0x1d2>
 8009cfe:	2f58      	cmp	r7, #88	; 0x58
 8009d00:	f000 80a3 	beq.w	8009e4a <_printf_i+0x16e>
 8009d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d0c:	e03a      	b.n	8009d84 <_printf_i+0xa8>
 8009d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d12:	2b15      	cmp	r3, #21
 8009d14:	d8f6      	bhi.n	8009d04 <_printf_i+0x28>
 8009d16:	a101      	add	r1, pc, #4	; (adr r1, 8009d1c <_printf_i+0x40>)
 8009d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d89 	.word	0x08009d89
 8009d24:	08009d05 	.word	0x08009d05
 8009d28:	08009d05 	.word	0x08009d05
 8009d2c:	08009d05 	.word	0x08009d05
 8009d30:	08009d05 	.word	0x08009d05
 8009d34:	08009d89 	.word	0x08009d89
 8009d38:	08009d05 	.word	0x08009d05
 8009d3c:	08009d05 	.word	0x08009d05
 8009d40:	08009d05 	.word	0x08009d05
 8009d44:	08009d05 	.word	0x08009d05
 8009d48:	08009e95 	.word	0x08009e95
 8009d4c:	08009db9 	.word	0x08009db9
 8009d50:	08009e77 	.word	0x08009e77
 8009d54:	08009d05 	.word	0x08009d05
 8009d58:	08009d05 	.word	0x08009d05
 8009d5c:	08009eb7 	.word	0x08009eb7
 8009d60:	08009d05 	.word	0x08009d05
 8009d64:	08009db9 	.word	0x08009db9
 8009d68:	08009d05 	.word	0x08009d05
 8009d6c:	08009d05 	.word	0x08009d05
 8009d70:	08009e7f 	.word	0x08009e7f
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	602a      	str	r2, [r5, #0]
 8009d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0a3      	b.n	8009ed0 <_printf_i+0x1f4>
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	6829      	ldr	r1, [r5, #0]
 8009d8c:	0606      	lsls	r6, r0, #24
 8009d8e:	f101 0304 	add.w	r3, r1, #4
 8009d92:	d50a      	bpl.n	8009daa <_printf_i+0xce>
 8009d94:	680e      	ldr	r6, [r1, #0]
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	da03      	bge.n	8009da4 <_printf_i+0xc8>
 8009d9c:	232d      	movs	r3, #45	; 0x2d
 8009d9e:	4276      	negs	r6, r6
 8009da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da4:	485e      	ldr	r0, [pc, #376]	; (8009f20 <_printf_i+0x244>)
 8009da6:	230a      	movs	r3, #10
 8009da8:	e019      	b.n	8009dde <_printf_i+0x102>
 8009daa:	680e      	ldr	r6, [r1, #0]
 8009dac:	602b      	str	r3, [r5, #0]
 8009dae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009db2:	bf18      	it	ne
 8009db4:	b236      	sxthne	r6, r6
 8009db6:	e7ef      	b.n	8009d98 <_printf_i+0xbc>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	1d19      	adds	r1, r3, #4
 8009dbe:	6029      	str	r1, [r5, #0]
 8009dc0:	0601      	lsls	r1, r0, #24
 8009dc2:	d501      	bpl.n	8009dc8 <_printf_i+0xec>
 8009dc4:	681e      	ldr	r6, [r3, #0]
 8009dc6:	e002      	b.n	8009dce <_printf_i+0xf2>
 8009dc8:	0646      	lsls	r6, r0, #25
 8009dca:	d5fb      	bpl.n	8009dc4 <_printf_i+0xe8>
 8009dcc:	881e      	ldrh	r6, [r3, #0]
 8009dce:	4854      	ldr	r0, [pc, #336]	; (8009f20 <_printf_i+0x244>)
 8009dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2308      	moveq	r3, #8
 8009dd6:	230a      	movne	r3, #10
 8009dd8:	2100      	movs	r1, #0
 8009dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dde:	6865      	ldr	r5, [r4, #4]
 8009de0:	60a5      	str	r5, [r4, #8]
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	bfa2      	ittt	ge
 8009de6:	6821      	ldrge	r1, [r4, #0]
 8009de8:	f021 0104 	bicge.w	r1, r1, #4
 8009dec:	6021      	strge	r1, [r4, #0]
 8009dee:	b90e      	cbnz	r6, 8009df4 <_printf_i+0x118>
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	d04d      	beq.n	8009e90 <_printf_i+0x1b4>
 8009df4:	4615      	mov	r5, r2
 8009df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8009dfe:	5dc7      	ldrb	r7, [r0, r7]
 8009e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e04:	4637      	mov	r7, r6
 8009e06:	42bb      	cmp	r3, r7
 8009e08:	460e      	mov	r6, r1
 8009e0a:	d9f4      	bls.n	8009df6 <_printf_i+0x11a>
 8009e0c:	2b08      	cmp	r3, #8
 8009e0e:	d10b      	bne.n	8009e28 <_printf_i+0x14c>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	07de      	lsls	r6, r3, #31
 8009e14:	d508      	bpl.n	8009e28 <_printf_i+0x14c>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	6861      	ldr	r1, [r4, #4]
 8009e1a:	4299      	cmp	r1, r3
 8009e1c:	bfde      	ittt	le
 8009e1e:	2330      	movle	r3, #48	; 0x30
 8009e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e28:	1b52      	subs	r2, r2, r5
 8009e2a:	6122      	str	r2, [r4, #16]
 8009e2c:	f8cd a000 	str.w	sl, [sp]
 8009e30:	464b      	mov	r3, r9
 8009e32:	aa03      	add	r2, sp, #12
 8009e34:	4621      	mov	r1, r4
 8009e36:	4640      	mov	r0, r8
 8009e38:	f7ff fee2 	bl	8009c00 <_printf_common>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d14c      	bne.n	8009eda <_printf_i+0x1fe>
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	b004      	add	sp, #16
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	4835      	ldr	r0, [pc, #212]	; (8009f20 <_printf_i+0x244>)
 8009e4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e50:	6829      	ldr	r1, [r5, #0]
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e58:	6029      	str	r1, [r5, #0]
 8009e5a:	061d      	lsls	r5, r3, #24
 8009e5c:	d514      	bpl.n	8009e88 <_printf_i+0x1ac>
 8009e5e:	07df      	lsls	r7, r3, #31
 8009e60:	bf44      	itt	mi
 8009e62:	f043 0320 	orrmi.w	r3, r3, #32
 8009e66:	6023      	strmi	r3, [r4, #0]
 8009e68:	b91e      	cbnz	r6, 8009e72 <_printf_i+0x196>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	f023 0320 	bic.w	r3, r3, #32
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	2310      	movs	r3, #16
 8009e74:	e7b0      	b.n	8009dd8 <_printf_i+0xfc>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	f043 0320 	orr.w	r3, r3, #32
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	2378      	movs	r3, #120	; 0x78
 8009e80:	4828      	ldr	r0, [pc, #160]	; (8009f24 <_printf_i+0x248>)
 8009e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e86:	e7e3      	b.n	8009e50 <_printf_i+0x174>
 8009e88:	0659      	lsls	r1, r3, #25
 8009e8a:	bf48      	it	mi
 8009e8c:	b2b6      	uxthmi	r6, r6
 8009e8e:	e7e6      	b.n	8009e5e <_printf_i+0x182>
 8009e90:	4615      	mov	r5, r2
 8009e92:	e7bb      	b.n	8009e0c <_printf_i+0x130>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	6826      	ldr	r6, [r4, #0]
 8009e98:	6961      	ldr	r1, [r4, #20]
 8009e9a:	1d18      	adds	r0, r3, #4
 8009e9c:	6028      	str	r0, [r5, #0]
 8009e9e:	0635      	lsls	r5, r6, #24
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	d501      	bpl.n	8009ea8 <_printf_i+0x1cc>
 8009ea4:	6019      	str	r1, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <_printf_i+0x1d2>
 8009ea8:	0670      	lsls	r0, r6, #25
 8009eaa:	d5fb      	bpl.n	8009ea4 <_printf_i+0x1c8>
 8009eac:	8019      	strh	r1, [r3, #0]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	4615      	mov	r5, r2
 8009eb4:	e7ba      	b.n	8009e2c <_printf_i+0x150>
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	1d1a      	adds	r2, r3, #4
 8009eba:	602a      	str	r2, [r5, #0]
 8009ebc:	681d      	ldr	r5, [r3, #0]
 8009ebe:	6862      	ldr	r2, [r4, #4]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f7f6 f98c 	bl	80001e0 <memchr>
 8009ec8:	b108      	cbz	r0, 8009ece <_printf_i+0x1f2>
 8009eca:	1b40      	subs	r0, r0, r5
 8009ecc:	6060      	str	r0, [r4, #4]
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed8:	e7a8      	b.n	8009e2c <_printf_i+0x150>
 8009eda:	6923      	ldr	r3, [r4, #16]
 8009edc:	462a      	mov	r2, r5
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	47d0      	blx	sl
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d0ab      	beq.n	8009e40 <_printf_i+0x164>
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	079b      	lsls	r3, r3, #30
 8009eec:	d413      	bmi.n	8009f16 <_printf_i+0x23a>
 8009eee:	68e0      	ldr	r0, [r4, #12]
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	4298      	cmp	r0, r3
 8009ef4:	bfb8      	it	lt
 8009ef6:	4618      	movlt	r0, r3
 8009ef8:	e7a4      	b.n	8009e44 <_printf_i+0x168>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4632      	mov	r2, r6
 8009efe:	4649      	mov	r1, r9
 8009f00:	4640      	mov	r0, r8
 8009f02:	47d0      	blx	sl
 8009f04:	3001      	adds	r0, #1
 8009f06:	d09b      	beq.n	8009e40 <_printf_i+0x164>
 8009f08:	3501      	adds	r5, #1
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	9903      	ldr	r1, [sp, #12]
 8009f0e:	1a5b      	subs	r3, r3, r1
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	dcf2      	bgt.n	8009efa <_printf_i+0x21e>
 8009f14:	e7eb      	b.n	8009eee <_printf_i+0x212>
 8009f16:	2500      	movs	r5, #0
 8009f18:	f104 0619 	add.w	r6, r4, #25
 8009f1c:	e7f5      	b.n	8009f0a <_printf_i+0x22e>
 8009f1e:	bf00      	nop
 8009f20:	0800de5a 	.word	0x0800de5a
 8009f24:	0800de6b 	.word	0x0800de6b

08009f28 <siprintf>:
 8009f28:	b40e      	push	{r1, r2, r3}
 8009f2a:	b500      	push	{lr}
 8009f2c:	b09c      	sub	sp, #112	; 0x70
 8009f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f30:	9002      	str	r0, [sp, #8]
 8009f32:	9006      	str	r0, [sp, #24]
 8009f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f38:	4809      	ldr	r0, [pc, #36]	; (8009f60 <siprintf+0x38>)
 8009f3a:	9107      	str	r1, [sp, #28]
 8009f3c:	9104      	str	r1, [sp, #16]
 8009f3e:	4909      	ldr	r1, [pc, #36]	; (8009f64 <siprintf+0x3c>)
 8009f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f44:	9105      	str	r1, [sp, #20]
 8009f46:	6800      	ldr	r0, [r0, #0]
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	a902      	add	r1, sp, #8
 8009f4c:	f002 fef0 	bl	800cd30 <_svfiprintf_r>
 8009f50:	9b02      	ldr	r3, [sp, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	b01c      	add	sp, #112	; 0x70
 8009f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f5c:	b003      	add	sp, #12
 8009f5e:	4770      	bx	lr
 8009f60:	20000020 	.word	0x20000020
 8009f64:	ffff0208 	.word	0xffff0208

08009f68 <sulp>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	460d      	mov	r5, r1
 8009f6e:	ec45 4b10 	vmov	d0, r4, r5
 8009f72:	4616      	mov	r6, r2
 8009f74:	f002 fc3a 	bl	800c7ec <__ulp>
 8009f78:	ec51 0b10 	vmov	r0, r1, d0
 8009f7c:	b17e      	cbz	r6, 8009f9e <sulp+0x36>
 8009f7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd09      	ble.n	8009f9e <sulp+0x36>
 8009f8a:	051b      	lsls	r3, r3, #20
 8009f8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009f90:	2400      	movs	r4, #0
 8009f92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009f96:	4622      	mov	r2, r4
 8009f98:	462b      	mov	r3, r5
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}

08009fa0 <_strtod_l>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	ed2d 8b02 	vpush	{d8}
 8009fa8:	b09d      	sub	sp, #116	; 0x74
 8009faa:	461f      	mov	r7, r3
 8009fac:	2300      	movs	r3, #0
 8009fae:	9318      	str	r3, [sp, #96]	; 0x60
 8009fb0:	4ba2      	ldr	r3, [pc, #648]	; (800a23c <_strtod_l+0x29c>)
 8009fb2:	9213      	str	r2, [sp, #76]	; 0x4c
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	9305      	str	r3, [sp, #20]
 8009fb8:	4604      	mov	r4, r0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	4688      	mov	r8, r1
 8009fbe:	f7f6 f907 	bl	80001d0 <strlen>
 8009fc2:	f04f 0a00 	mov.w	sl, #0
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	f04f 0b00 	mov.w	fp, #0
 8009fcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fd2:	781a      	ldrb	r2, [r3, #0]
 8009fd4:	2a2b      	cmp	r2, #43	; 0x2b
 8009fd6:	d04e      	beq.n	800a076 <_strtod_l+0xd6>
 8009fd8:	d83b      	bhi.n	800a052 <_strtod_l+0xb2>
 8009fda:	2a0d      	cmp	r2, #13
 8009fdc:	d834      	bhi.n	800a048 <_strtod_l+0xa8>
 8009fde:	2a08      	cmp	r2, #8
 8009fe0:	d834      	bhi.n	800a04c <_strtod_l+0xac>
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	d03e      	beq.n	800a064 <_strtod_l+0xc4>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8009fea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009fec:	7833      	ldrb	r3, [r6, #0]
 8009fee:	2b30      	cmp	r3, #48	; 0x30
 8009ff0:	f040 80b0 	bne.w	800a154 <_strtod_l+0x1b4>
 8009ff4:	7873      	ldrb	r3, [r6, #1]
 8009ff6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ffa:	2b58      	cmp	r3, #88	; 0x58
 8009ffc:	d168      	bne.n	800a0d0 <_strtod_l+0x130>
 8009ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	ab18      	add	r3, sp, #96	; 0x60
 800a004:	9702      	str	r7, [sp, #8]
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	4a8d      	ldr	r2, [pc, #564]	; (800a240 <_strtod_l+0x2a0>)
 800a00a:	ab19      	add	r3, sp, #100	; 0x64
 800a00c:	a917      	add	r1, sp, #92	; 0x5c
 800a00e:	4620      	mov	r0, r4
 800a010:	f001 fd46 	bl	800baa0 <__gethex>
 800a014:	f010 0707 	ands.w	r7, r0, #7
 800a018:	4605      	mov	r5, r0
 800a01a:	d005      	beq.n	800a028 <_strtod_l+0x88>
 800a01c:	2f06      	cmp	r7, #6
 800a01e:	d12c      	bne.n	800a07a <_strtod_l+0xda>
 800a020:	3601      	adds	r6, #1
 800a022:	2300      	movs	r3, #0
 800a024:	9617      	str	r6, [sp, #92]	; 0x5c
 800a026:	930a      	str	r3, [sp, #40]	; 0x28
 800a028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f040 8590 	bne.w	800ab50 <_strtod_l+0xbb0>
 800a030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a032:	b1eb      	cbz	r3, 800a070 <_strtod_l+0xd0>
 800a034:	4652      	mov	r2, sl
 800a036:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a03a:	ec43 2b10 	vmov	d0, r2, r3
 800a03e:	b01d      	add	sp, #116	; 0x74
 800a040:	ecbd 8b02 	vpop	{d8}
 800a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a048:	2a20      	cmp	r2, #32
 800a04a:	d1cc      	bne.n	8009fe6 <_strtod_l+0x46>
 800a04c:	3301      	adds	r3, #1
 800a04e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a050:	e7be      	b.n	8009fd0 <_strtod_l+0x30>
 800a052:	2a2d      	cmp	r2, #45	; 0x2d
 800a054:	d1c7      	bne.n	8009fe6 <_strtod_l+0x46>
 800a056:	2201      	movs	r2, #1
 800a058:	920a      	str	r2, [sp, #40]	; 0x28
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a05e:	785b      	ldrb	r3, [r3, #1]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1c2      	bne.n	8009fea <_strtod_l+0x4a>
 800a064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a066:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f040 856e 	bne.w	800ab4c <_strtod_l+0xbac>
 800a070:	4652      	mov	r2, sl
 800a072:	465b      	mov	r3, fp
 800a074:	e7e1      	b.n	800a03a <_strtod_l+0x9a>
 800a076:	2200      	movs	r2, #0
 800a078:	e7ee      	b.n	800a058 <_strtod_l+0xb8>
 800a07a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a07c:	b13a      	cbz	r2, 800a08e <_strtod_l+0xee>
 800a07e:	2135      	movs	r1, #53	; 0x35
 800a080:	a81a      	add	r0, sp, #104	; 0x68
 800a082:	f002 fcbe 	bl	800ca02 <__copybits>
 800a086:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a088:	4620      	mov	r0, r4
 800a08a:	f002 f87d 	bl	800c188 <_Bfree>
 800a08e:	3f01      	subs	r7, #1
 800a090:	2f04      	cmp	r7, #4
 800a092:	d806      	bhi.n	800a0a2 <_strtod_l+0x102>
 800a094:	e8df f007 	tbb	[pc, r7]
 800a098:	1714030a 	.word	0x1714030a
 800a09c:	0a          	.byte	0x0a
 800a09d:	00          	.byte	0x00
 800a09e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a0a2:	0728      	lsls	r0, r5, #28
 800a0a4:	d5c0      	bpl.n	800a028 <_strtod_l+0x88>
 800a0a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a0aa:	e7bd      	b.n	800a028 <_strtod_l+0x88>
 800a0ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a0b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a0b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a0ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a0be:	e7f0      	b.n	800a0a2 <_strtod_l+0x102>
 800a0c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a244 <_strtod_l+0x2a4>
 800a0c4:	e7ed      	b.n	800a0a2 <_strtod_l+0x102>
 800a0c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a0ca:	f04f 3aff 	mov.w	sl, #4294967295
 800a0ce:	e7e8      	b.n	800a0a2 <_strtod_l+0x102>
 800a0d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	2b30      	cmp	r3, #48	; 0x30
 800a0da:	d0f9      	beq.n	800a0d0 <_strtod_l+0x130>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d0a3      	beq.n	800a028 <_strtod_l+0x88>
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f04f 0900 	mov.w	r9, #0
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0ea:	9308      	str	r3, [sp, #32]
 800a0ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800a0f0:	464f      	mov	r7, r9
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a0f6:	7806      	ldrb	r6, [r0, #0]
 800a0f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a0fc:	b2d9      	uxtb	r1, r3
 800a0fe:	2909      	cmp	r1, #9
 800a100:	d92a      	bls.n	800a158 <_strtod_l+0x1b8>
 800a102:	9905      	ldr	r1, [sp, #20]
 800a104:	462a      	mov	r2, r5
 800a106:	f003 f887 	bl	800d218 <strncmp>
 800a10a:	b398      	cbz	r0, 800a174 <_strtod_l+0x1d4>
 800a10c:	2000      	movs	r0, #0
 800a10e:	4632      	mov	r2, r6
 800a110:	463d      	mov	r5, r7
 800a112:	9005      	str	r0, [sp, #20]
 800a114:	4603      	mov	r3, r0
 800a116:	2a65      	cmp	r2, #101	; 0x65
 800a118:	d001      	beq.n	800a11e <_strtod_l+0x17e>
 800a11a:	2a45      	cmp	r2, #69	; 0x45
 800a11c:	d118      	bne.n	800a150 <_strtod_l+0x1b0>
 800a11e:	b91d      	cbnz	r5, 800a128 <_strtod_l+0x188>
 800a120:	9a04      	ldr	r2, [sp, #16]
 800a122:	4302      	orrs	r2, r0
 800a124:	d09e      	beq.n	800a064 <_strtod_l+0xc4>
 800a126:	2500      	movs	r5, #0
 800a128:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a12c:	f108 0201 	add.w	r2, r8, #1
 800a130:	9217      	str	r2, [sp, #92]	; 0x5c
 800a132:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a136:	2a2b      	cmp	r2, #43	; 0x2b
 800a138:	d075      	beq.n	800a226 <_strtod_l+0x286>
 800a13a:	2a2d      	cmp	r2, #45	; 0x2d
 800a13c:	d07b      	beq.n	800a236 <_strtod_l+0x296>
 800a13e:	f04f 0c00 	mov.w	ip, #0
 800a142:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a146:	2909      	cmp	r1, #9
 800a148:	f240 8082 	bls.w	800a250 <_strtod_l+0x2b0>
 800a14c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a150:	2600      	movs	r6, #0
 800a152:	e09d      	b.n	800a290 <_strtod_l+0x2f0>
 800a154:	2300      	movs	r3, #0
 800a156:	e7c4      	b.n	800a0e2 <_strtod_l+0x142>
 800a158:	2f08      	cmp	r7, #8
 800a15a:	bfd8      	it	le
 800a15c:	9907      	ldrle	r1, [sp, #28]
 800a15e:	f100 0001 	add.w	r0, r0, #1
 800a162:	bfda      	itte	le
 800a164:	fb02 3301 	mlale	r3, r2, r1, r3
 800a168:	9307      	strle	r3, [sp, #28]
 800a16a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a16e:	3701      	adds	r7, #1
 800a170:	9017      	str	r0, [sp, #92]	; 0x5c
 800a172:	e7bf      	b.n	800a0f4 <_strtod_l+0x154>
 800a174:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a176:	195a      	adds	r2, r3, r5
 800a178:	9217      	str	r2, [sp, #92]	; 0x5c
 800a17a:	5d5a      	ldrb	r2, [r3, r5]
 800a17c:	2f00      	cmp	r7, #0
 800a17e:	d037      	beq.n	800a1f0 <_strtod_l+0x250>
 800a180:	9005      	str	r0, [sp, #20]
 800a182:	463d      	mov	r5, r7
 800a184:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a188:	2b09      	cmp	r3, #9
 800a18a:	d912      	bls.n	800a1b2 <_strtod_l+0x212>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e7c2      	b.n	800a116 <_strtod_l+0x176>
 800a190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	9217      	str	r2, [sp, #92]	; 0x5c
 800a196:	785a      	ldrb	r2, [r3, #1]
 800a198:	3001      	adds	r0, #1
 800a19a:	2a30      	cmp	r2, #48	; 0x30
 800a19c:	d0f8      	beq.n	800a190 <_strtod_l+0x1f0>
 800a19e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a1a2:	2b08      	cmp	r3, #8
 800a1a4:	f200 84d9 	bhi.w	800ab5a <_strtod_l+0xbba>
 800a1a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1aa:	9005      	str	r0, [sp, #20]
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	9308      	str	r3, [sp, #32]
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	3a30      	subs	r2, #48	; 0x30
 800a1b4:	f100 0301 	add.w	r3, r0, #1
 800a1b8:	d014      	beq.n	800a1e4 <_strtod_l+0x244>
 800a1ba:	9905      	ldr	r1, [sp, #20]
 800a1bc:	4419      	add	r1, r3
 800a1be:	9105      	str	r1, [sp, #20]
 800a1c0:	462b      	mov	r3, r5
 800a1c2:	eb00 0e05 	add.w	lr, r0, r5
 800a1c6:	210a      	movs	r1, #10
 800a1c8:	4573      	cmp	r3, lr
 800a1ca:	d113      	bne.n	800a1f4 <_strtod_l+0x254>
 800a1cc:	182b      	adds	r3, r5, r0
 800a1ce:	2b08      	cmp	r3, #8
 800a1d0:	f105 0501 	add.w	r5, r5, #1
 800a1d4:	4405      	add	r5, r0
 800a1d6:	dc1c      	bgt.n	800a212 <_strtod_l+0x272>
 800a1d8:	9907      	ldr	r1, [sp, #28]
 800a1da:	230a      	movs	r3, #10
 800a1dc:	fb03 2301 	mla	r3, r3, r1, r2
 800a1e0:	9307      	str	r3, [sp, #28]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a1e6:	1c51      	adds	r1, r2, #1
 800a1e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a1ea:	7852      	ldrb	r2, [r2, #1]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	e7c9      	b.n	800a184 <_strtod_l+0x1e4>
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	e7d2      	b.n	800a19a <_strtod_l+0x1fa>
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	dc04      	bgt.n	800a202 <_strtod_l+0x262>
 800a1f8:	9e07      	ldr	r6, [sp, #28]
 800a1fa:	434e      	muls	r6, r1
 800a1fc:	9607      	str	r6, [sp, #28]
 800a1fe:	3301      	adds	r3, #1
 800a200:	e7e2      	b.n	800a1c8 <_strtod_l+0x228>
 800a202:	f103 0c01 	add.w	ip, r3, #1
 800a206:	f1bc 0f10 	cmp.w	ip, #16
 800a20a:	bfd8      	it	le
 800a20c:	fb01 f909 	mulle.w	r9, r1, r9
 800a210:	e7f5      	b.n	800a1fe <_strtod_l+0x25e>
 800a212:	2d10      	cmp	r5, #16
 800a214:	bfdc      	itt	le
 800a216:	230a      	movle	r3, #10
 800a218:	fb03 2909 	mlale	r9, r3, r9, r2
 800a21c:	e7e1      	b.n	800a1e2 <_strtod_l+0x242>
 800a21e:	2300      	movs	r3, #0
 800a220:	9305      	str	r3, [sp, #20]
 800a222:	2301      	movs	r3, #1
 800a224:	e77c      	b.n	800a120 <_strtod_l+0x180>
 800a226:	f04f 0c00 	mov.w	ip, #0
 800a22a:	f108 0202 	add.w	r2, r8, #2
 800a22e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a230:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a234:	e785      	b.n	800a142 <_strtod_l+0x1a2>
 800a236:	f04f 0c01 	mov.w	ip, #1
 800a23a:	e7f6      	b.n	800a22a <_strtod_l+0x28a>
 800a23c:	0800e060 	.word	0x0800e060
 800a240:	0800de7c 	.word	0x0800de7c
 800a244:	7ff00000 	.word	0x7ff00000
 800a248:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a24a:	1c51      	adds	r1, r2, #1
 800a24c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a24e:	7852      	ldrb	r2, [r2, #1]
 800a250:	2a30      	cmp	r2, #48	; 0x30
 800a252:	d0f9      	beq.n	800a248 <_strtod_l+0x2a8>
 800a254:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a258:	2908      	cmp	r1, #8
 800a25a:	f63f af79 	bhi.w	800a150 <_strtod_l+0x1b0>
 800a25e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a262:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a264:	9206      	str	r2, [sp, #24]
 800a266:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a268:	1c51      	adds	r1, r2, #1
 800a26a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a26c:	7852      	ldrb	r2, [r2, #1]
 800a26e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a272:	2e09      	cmp	r6, #9
 800a274:	d937      	bls.n	800a2e6 <_strtod_l+0x346>
 800a276:	9e06      	ldr	r6, [sp, #24]
 800a278:	1b89      	subs	r1, r1, r6
 800a27a:	2908      	cmp	r1, #8
 800a27c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a280:	dc02      	bgt.n	800a288 <_strtod_l+0x2e8>
 800a282:	4576      	cmp	r6, lr
 800a284:	bfa8      	it	ge
 800a286:	4676      	movge	r6, lr
 800a288:	f1bc 0f00 	cmp.w	ip, #0
 800a28c:	d000      	beq.n	800a290 <_strtod_l+0x2f0>
 800a28e:	4276      	negs	r6, r6
 800a290:	2d00      	cmp	r5, #0
 800a292:	d14d      	bne.n	800a330 <_strtod_l+0x390>
 800a294:	9904      	ldr	r1, [sp, #16]
 800a296:	4301      	orrs	r1, r0
 800a298:	f47f aec6 	bne.w	800a028 <_strtod_l+0x88>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f47f aee1 	bne.w	800a064 <_strtod_l+0xc4>
 800a2a2:	2a69      	cmp	r2, #105	; 0x69
 800a2a4:	d027      	beq.n	800a2f6 <_strtod_l+0x356>
 800a2a6:	dc24      	bgt.n	800a2f2 <_strtod_l+0x352>
 800a2a8:	2a49      	cmp	r2, #73	; 0x49
 800a2aa:	d024      	beq.n	800a2f6 <_strtod_l+0x356>
 800a2ac:	2a4e      	cmp	r2, #78	; 0x4e
 800a2ae:	f47f aed9 	bne.w	800a064 <_strtod_l+0xc4>
 800a2b2:	499f      	ldr	r1, [pc, #636]	; (800a530 <_strtod_l+0x590>)
 800a2b4:	a817      	add	r0, sp, #92	; 0x5c
 800a2b6:	f001 fe4b 	bl	800bf50 <__match>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f43f aed2 	beq.w	800a064 <_strtod_l+0xc4>
 800a2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b28      	cmp	r3, #40	; 0x28
 800a2c6:	d12d      	bne.n	800a324 <_strtod_l+0x384>
 800a2c8:	499a      	ldr	r1, [pc, #616]	; (800a534 <_strtod_l+0x594>)
 800a2ca:	aa1a      	add	r2, sp, #104	; 0x68
 800a2cc:	a817      	add	r0, sp, #92	; 0x5c
 800a2ce:	f001 fe53 	bl	800bf78 <__hexnan>
 800a2d2:	2805      	cmp	r0, #5
 800a2d4:	d126      	bne.n	800a324 <_strtod_l+0x384>
 800a2d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a2dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a2e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a2e4:	e6a0      	b.n	800a028 <_strtod_l+0x88>
 800a2e6:	210a      	movs	r1, #10
 800a2e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a2ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a2f0:	e7b9      	b.n	800a266 <_strtod_l+0x2c6>
 800a2f2:	2a6e      	cmp	r2, #110	; 0x6e
 800a2f4:	e7db      	b.n	800a2ae <_strtod_l+0x30e>
 800a2f6:	4990      	ldr	r1, [pc, #576]	; (800a538 <_strtod_l+0x598>)
 800a2f8:	a817      	add	r0, sp, #92	; 0x5c
 800a2fa:	f001 fe29 	bl	800bf50 <__match>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f43f aeb0 	beq.w	800a064 <_strtod_l+0xc4>
 800a304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a306:	498d      	ldr	r1, [pc, #564]	; (800a53c <_strtod_l+0x59c>)
 800a308:	3b01      	subs	r3, #1
 800a30a:	a817      	add	r0, sp, #92	; 0x5c
 800a30c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a30e:	f001 fe1f 	bl	800bf50 <__match>
 800a312:	b910      	cbnz	r0, 800a31a <_strtod_l+0x37a>
 800a314:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a316:	3301      	adds	r3, #1
 800a318:	9317      	str	r3, [sp, #92]	; 0x5c
 800a31a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a54c <_strtod_l+0x5ac>
 800a31e:	f04f 0a00 	mov.w	sl, #0
 800a322:	e681      	b.n	800a028 <_strtod_l+0x88>
 800a324:	4886      	ldr	r0, [pc, #536]	; (800a540 <_strtod_l+0x5a0>)
 800a326:	f002 ff5f 	bl	800d1e8 <nan>
 800a32a:	ec5b ab10 	vmov	sl, fp, d0
 800a32e:	e67b      	b.n	800a028 <_strtod_l+0x88>
 800a330:	9b05      	ldr	r3, [sp, #20]
 800a332:	9807      	ldr	r0, [sp, #28]
 800a334:	1af3      	subs	r3, r6, r3
 800a336:	2f00      	cmp	r7, #0
 800a338:	bf08      	it	eq
 800a33a:	462f      	moveq	r7, r5
 800a33c:	2d10      	cmp	r5, #16
 800a33e:	9306      	str	r3, [sp, #24]
 800a340:	46a8      	mov	r8, r5
 800a342:	bfa8      	it	ge
 800a344:	f04f 0810 	movge.w	r8, #16
 800a348:	f7f6 f8dc 	bl	8000504 <__aeabi_ui2d>
 800a34c:	2d09      	cmp	r5, #9
 800a34e:	4682      	mov	sl, r0
 800a350:	468b      	mov	fp, r1
 800a352:	dd13      	ble.n	800a37c <_strtod_l+0x3dc>
 800a354:	4b7b      	ldr	r3, [pc, #492]	; (800a544 <_strtod_l+0x5a4>)
 800a356:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a35a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a35e:	f7f6 f94b 	bl	80005f8 <__aeabi_dmul>
 800a362:	4682      	mov	sl, r0
 800a364:	4648      	mov	r0, r9
 800a366:	468b      	mov	fp, r1
 800a368:	f7f6 f8cc 	bl	8000504 <__aeabi_ui2d>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	f7f5 ff8a 	bl	800028c <__adddf3>
 800a378:	4682      	mov	sl, r0
 800a37a:	468b      	mov	fp, r1
 800a37c:	2d0f      	cmp	r5, #15
 800a37e:	dc38      	bgt.n	800a3f2 <_strtod_l+0x452>
 800a380:	9b06      	ldr	r3, [sp, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f43f ae50 	beq.w	800a028 <_strtod_l+0x88>
 800a388:	dd24      	ble.n	800a3d4 <_strtod_l+0x434>
 800a38a:	2b16      	cmp	r3, #22
 800a38c:	dc0b      	bgt.n	800a3a6 <_strtod_l+0x406>
 800a38e:	496d      	ldr	r1, [pc, #436]	; (800a544 <_strtod_l+0x5a4>)
 800a390:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a394:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a398:	4652      	mov	r2, sl
 800a39a:	465b      	mov	r3, fp
 800a39c:	f7f6 f92c 	bl	80005f8 <__aeabi_dmul>
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	468b      	mov	fp, r1
 800a3a4:	e640      	b.n	800a028 <_strtod_l+0x88>
 800a3a6:	9a06      	ldr	r2, [sp, #24]
 800a3a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	db20      	blt.n	800a3f2 <_strtod_l+0x452>
 800a3b0:	4c64      	ldr	r4, [pc, #400]	; (800a544 <_strtod_l+0x5a4>)
 800a3b2:	f1c5 050f 	rsb	r5, r5, #15
 800a3b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	465b      	mov	r3, fp
 800a3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3c2:	f7f6 f919 	bl	80005f8 <__aeabi_dmul>
 800a3c6:	9b06      	ldr	r3, [sp, #24]
 800a3c8:	1b5d      	subs	r5, r3, r5
 800a3ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a3ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3d2:	e7e3      	b.n	800a39c <_strtod_l+0x3fc>
 800a3d4:	9b06      	ldr	r3, [sp, #24]
 800a3d6:	3316      	adds	r3, #22
 800a3d8:	db0b      	blt.n	800a3f2 <_strtod_l+0x452>
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	1b9e      	subs	r6, r3, r6
 800a3de:	4b59      	ldr	r3, [pc, #356]	; (800a544 <_strtod_l+0x5a4>)
 800a3e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a3e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	4659      	mov	r1, fp
 800a3ec:	f7f6 fa2e 	bl	800084c <__aeabi_ddiv>
 800a3f0:	e7d6      	b.n	800a3a0 <_strtod_l+0x400>
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	eba5 0808 	sub.w	r8, r5, r8
 800a3f8:	4498      	add	r8, r3
 800a3fa:	f1b8 0f00 	cmp.w	r8, #0
 800a3fe:	dd74      	ble.n	800a4ea <_strtod_l+0x54a>
 800a400:	f018 030f 	ands.w	r3, r8, #15
 800a404:	d00a      	beq.n	800a41c <_strtod_l+0x47c>
 800a406:	494f      	ldr	r1, [pc, #316]	; (800a544 <_strtod_l+0x5a4>)
 800a408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a40c:	4652      	mov	r2, sl
 800a40e:	465b      	mov	r3, fp
 800a410:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a414:	f7f6 f8f0 	bl	80005f8 <__aeabi_dmul>
 800a418:	4682      	mov	sl, r0
 800a41a:	468b      	mov	fp, r1
 800a41c:	f038 080f 	bics.w	r8, r8, #15
 800a420:	d04f      	beq.n	800a4c2 <_strtod_l+0x522>
 800a422:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a426:	dd22      	ble.n	800a46e <_strtod_l+0x4ce>
 800a428:	2500      	movs	r5, #0
 800a42a:	462e      	mov	r6, r5
 800a42c:	9507      	str	r5, [sp, #28]
 800a42e:	9505      	str	r5, [sp, #20]
 800a430:	2322      	movs	r3, #34	; 0x22
 800a432:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a54c <_strtod_l+0x5ac>
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	f04f 0a00 	mov.w	sl, #0
 800a43c:	9b07      	ldr	r3, [sp, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f43f adf2 	beq.w	800a028 <_strtod_l+0x88>
 800a444:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a446:	4620      	mov	r0, r4
 800a448:	f001 fe9e 	bl	800c188 <_Bfree>
 800a44c:	9905      	ldr	r1, [sp, #20]
 800a44e:	4620      	mov	r0, r4
 800a450:	f001 fe9a 	bl	800c188 <_Bfree>
 800a454:	4631      	mov	r1, r6
 800a456:	4620      	mov	r0, r4
 800a458:	f001 fe96 	bl	800c188 <_Bfree>
 800a45c:	9907      	ldr	r1, [sp, #28]
 800a45e:	4620      	mov	r0, r4
 800a460:	f001 fe92 	bl	800c188 <_Bfree>
 800a464:	4629      	mov	r1, r5
 800a466:	4620      	mov	r0, r4
 800a468:	f001 fe8e 	bl	800c188 <_Bfree>
 800a46c:	e5dc      	b.n	800a028 <_strtod_l+0x88>
 800a46e:	4b36      	ldr	r3, [pc, #216]	; (800a548 <_strtod_l+0x5a8>)
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	2300      	movs	r3, #0
 800a474:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a478:	4650      	mov	r0, sl
 800a47a:	4659      	mov	r1, fp
 800a47c:	4699      	mov	r9, r3
 800a47e:	f1b8 0f01 	cmp.w	r8, #1
 800a482:	dc21      	bgt.n	800a4c8 <_strtod_l+0x528>
 800a484:	b10b      	cbz	r3, 800a48a <_strtod_l+0x4ea>
 800a486:	4682      	mov	sl, r0
 800a488:	468b      	mov	fp, r1
 800a48a:	4b2f      	ldr	r3, [pc, #188]	; (800a548 <_strtod_l+0x5a8>)
 800a48c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a490:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a494:	4652      	mov	r2, sl
 800a496:	465b      	mov	r3, fp
 800a498:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a49c:	f7f6 f8ac 	bl	80005f8 <__aeabi_dmul>
 800a4a0:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <_strtod_l+0x5ac>)
 800a4a2:	460a      	mov	r2, r1
 800a4a4:	400b      	ands	r3, r1
 800a4a6:	492a      	ldr	r1, [pc, #168]	; (800a550 <_strtod_l+0x5b0>)
 800a4a8:	428b      	cmp	r3, r1
 800a4aa:	4682      	mov	sl, r0
 800a4ac:	d8bc      	bhi.n	800a428 <_strtod_l+0x488>
 800a4ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a4b2:	428b      	cmp	r3, r1
 800a4b4:	bf86      	itte	hi
 800a4b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a554 <_strtod_l+0x5b4>
 800a4ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800a4be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	e084      	b.n	800a5d2 <_strtod_l+0x632>
 800a4c8:	f018 0f01 	tst.w	r8, #1
 800a4cc:	d005      	beq.n	800a4da <_strtod_l+0x53a>
 800a4ce:	9b04      	ldr	r3, [sp, #16]
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	9a04      	ldr	r2, [sp, #16]
 800a4dc:	3208      	adds	r2, #8
 800a4de:	f109 0901 	add.w	r9, r9, #1
 800a4e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a4e6:	9204      	str	r2, [sp, #16]
 800a4e8:	e7c9      	b.n	800a47e <_strtod_l+0x4de>
 800a4ea:	d0ea      	beq.n	800a4c2 <_strtod_l+0x522>
 800a4ec:	f1c8 0800 	rsb	r8, r8, #0
 800a4f0:	f018 020f 	ands.w	r2, r8, #15
 800a4f4:	d00a      	beq.n	800a50c <_strtod_l+0x56c>
 800a4f6:	4b13      	ldr	r3, [pc, #76]	; (800a544 <_strtod_l+0x5a4>)
 800a4f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	4659      	mov	r1, fp
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f6 f9a2 	bl	800084c <__aeabi_ddiv>
 800a508:	4682      	mov	sl, r0
 800a50a:	468b      	mov	fp, r1
 800a50c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a510:	d0d7      	beq.n	800a4c2 <_strtod_l+0x522>
 800a512:	f1b8 0f1f 	cmp.w	r8, #31
 800a516:	dd1f      	ble.n	800a558 <_strtod_l+0x5b8>
 800a518:	2500      	movs	r5, #0
 800a51a:	462e      	mov	r6, r5
 800a51c:	9507      	str	r5, [sp, #28]
 800a51e:	9505      	str	r5, [sp, #20]
 800a520:	2322      	movs	r3, #34	; 0x22
 800a522:	f04f 0a00 	mov.w	sl, #0
 800a526:	f04f 0b00 	mov.w	fp, #0
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	e786      	b.n	800a43c <_strtod_l+0x49c>
 800a52e:	bf00      	nop
 800a530:	0800de55 	.word	0x0800de55
 800a534:	0800de90 	.word	0x0800de90
 800a538:	0800de4d 	.word	0x0800de4d
 800a53c:	0800df83 	.word	0x0800df83
 800a540:	0800df7f 	.word	0x0800df7f
 800a544:	0800e0f8 	.word	0x0800e0f8
 800a548:	0800e0d0 	.word	0x0800e0d0
 800a54c:	7ff00000 	.word	0x7ff00000
 800a550:	7ca00000 	.word	0x7ca00000
 800a554:	7fefffff 	.word	0x7fefffff
 800a558:	f018 0310 	ands.w	r3, r8, #16
 800a55c:	bf18      	it	ne
 800a55e:	236a      	movne	r3, #106	; 0x6a
 800a560:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a910 <_strtod_l+0x970>
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	4650      	mov	r0, sl
 800a568:	4659      	mov	r1, fp
 800a56a:	2300      	movs	r3, #0
 800a56c:	f018 0f01 	tst.w	r8, #1
 800a570:	d004      	beq.n	800a57c <_strtod_l+0x5dc>
 800a572:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a576:	f7f6 f83f 	bl	80005f8 <__aeabi_dmul>
 800a57a:	2301      	movs	r3, #1
 800a57c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a580:	f109 0908 	add.w	r9, r9, #8
 800a584:	d1f2      	bne.n	800a56c <_strtod_l+0x5cc>
 800a586:	b10b      	cbz	r3, 800a58c <_strtod_l+0x5ec>
 800a588:	4682      	mov	sl, r0
 800a58a:	468b      	mov	fp, r1
 800a58c:	9b04      	ldr	r3, [sp, #16]
 800a58e:	b1c3      	cbz	r3, 800a5c2 <_strtod_l+0x622>
 800a590:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a594:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a598:	2b00      	cmp	r3, #0
 800a59a:	4659      	mov	r1, fp
 800a59c:	dd11      	ble.n	800a5c2 <_strtod_l+0x622>
 800a59e:	2b1f      	cmp	r3, #31
 800a5a0:	f340 8124 	ble.w	800a7ec <_strtod_l+0x84c>
 800a5a4:	2b34      	cmp	r3, #52	; 0x34
 800a5a6:	bfde      	ittt	le
 800a5a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a5ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a5b0:	fa03 f202 	lslle.w	r2, r3, r2
 800a5b4:	f04f 0a00 	mov.w	sl, #0
 800a5b8:	bfcc      	ite	gt
 800a5ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a5be:	ea02 0b01 	andle.w	fp, r2, r1
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4650      	mov	r0, sl
 800a5c8:	4659      	mov	r1, fp
 800a5ca:	f7f6 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d1a2      	bne.n	800a518 <_strtod_l+0x578>
 800a5d2:	9b07      	ldr	r3, [sp, #28]
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	9908      	ldr	r1, [sp, #32]
 800a5d8:	462b      	mov	r3, r5
 800a5da:	463a      	mov	r2, r7
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f001 fe3b 	bl	800c258 <__s2b>
 800a5e2:	9007      	str	r0, [sp, #28]
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f43f af1f 	beq.w	800a428 <_strtod_l+0x488>
 800a5ea:	9b05      	ldr	r3, [sp, #20]
 800a5ec:	1b9e      	subs	r6, r3, r6
 800a5ee:	9b06      	ldr	r3, [sp, #24]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bfb4      	ite	lt
 800a5f4:	4633      	movlt	r3, r6
 800a5f6:	2300      	movge	r3, #0
 800a5f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a5fa:	9b06      	ldr	r3, [sp, #24]
 800a5fc:	2500      	movs	r5, #0
 800a5fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a602:	9312      	str	r3, [sp, #72]	; 0x48
 800a604:	462e      	mov	r6, r5
 800a606:	9b07      	ldr	r3, [sp, #28]
 800a608:	4620      	mov	r0, r4
 800a60a:	6859      	ldr	r1, [r3, #4]
 800a60c:	f001 fd7c 	bl	800c108 <_Balloc>
 800a610:	9005      	str	r0, [sp, #20]
 800a612:	2800      	cmp	r0, #0
 800a614:	f43f af0c 	beq.w	800a430 <_strtod_l+0x490>
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	3202      	adds	r2, #2
 800a61e:	f103 010c 	add.w	r1, r3, #12
 800a622:	0092      	lsls	r2, r2, #2
 800a624:	300c      	adds	r0, #12
 800a626:	f001 fd61 	bl	800c0ec <memcpy>
 800a62a:	ec4b ab10 	vmov	d0, sl, fp
 800a62e:	aa1a      	add	r2, sp, #104	; 0x68
 800a630:	a919      	add	r1, sp, #100	; 0x64
 800a632:	4620      	mov	r0, r4
 800a634:	f002 f956 	bl	800c8e4 <__d2b>
 800a638:	ec4b ab18 	vmov	d8, sl, fp
 800a63c:	9018      	str	r0, [sp, #96]	; 0x60
 800a63e:	2800      	cmp	r0, #0
 800a640:	f43f aef6 	beq.w	800a430 <_strtod_l+0x490>
 800a644:	2101      	movs	r1, #1
 800a646:	4620      	mov	r0, r4
 800a648:	f001 fea0 	bl	800c38c <__i2b>
 800a64c:	4606      	mov	r6, r0
 800a64e:	2800      	cmp	r0, #0
 800a650:	f43f aeee 	beq.w	800a430 <_strtod_l+0x490>
 800a654:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a656:	9904      	ldr	r1, [sp, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bfab      	itete	ge
 800a65c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a65e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a660:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a662:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a666:	bfac      	ite	ge
 800a668:	eb03 0902 	addge.w	r9, r3, r2
 800a66c:	1ad7      	sublt	r7, r2, r3
 800a66e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a670:	eba3 0801 	sub.w	r8, r3, r1
 800a674:	4490      	add	r8, r2
 800a676:	4ba1      	ldr	r3, [pc, #644]	; (800a8fc <_strtod_l+0x95c>)
 800a678:	f108 38ff 	add.w	r8, r8, #4294967295
 800a67c:	4598      	cmp	r8, r3
 800a67e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a682:	f280 80c7 	bge.w	800a814 <_strtod_l+0x874>
 800a686:	eba3 0308 	sub.w	r3, r3, r8
 800a68a:	2b1f      	cmp	r3, #31
 800a68c:	eba2 0203 	sub.w	r2, r2, r3
 800a690:	f04f 0101 	mov.w	r1, #1
 800a694:	f300 80b1 	bgt.w	800a7fa <_strtod_l+0x85a>
 800a698:	fa01 f303 	lsl.w	r3, r1, r3
 800a69c:	930d      	str	r3, [sp, #52]	; 0x34
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9308      	str	r3, [sp, #32]
 800a6a2:	eb09 0802 	add.w	r8, r9, r2
 800a6a6:	9b04      	ldr	r3, [sp, #16]
 800a6a8:	45c1      	cmp	r9, r8
 800a6aa:	4417      	add	r7, r2
 800a6ac:	441f      	add	r7, r3
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	bfa8      	it	ge
 800a6b2:	4643      	movge	r3, r8
 800a6b4:	42bb      	cmp	r3, r7
 800a6b6:	bfa8      	it	ge
 800a6b8:	463b      	movge	r3, r7
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	bfc2      	ittt	gt
 800a6be:	eba8 0803 	subgt.w	r8, r8, r3
 800a6c2:	1aff      	subgt	r7, r7, r3
 800a6c4:	eba9 0903 	subgt.w	r9, r9, r3
 800a6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	dd17      	ble.n	800a6fe <_strtod_l+0x75e>
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f001 ff1a 	bl	800c50c <__pow5mult>
 800a6d8:	4606      	mov	r6, r0
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	f43f aea8 	beq.w	800a430 <_strtod_l+0x490>
 800a6e0:	4601      	mov	r1, r0
 800a6e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f001 fe67 	bl	800c3b8 <__multiply>
 800a6ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	f43f ae9f 	beq.w	800a430 <_strtod_l+0x490>
 800a6f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f001 fd47 	bl	800c188 <_Bfree>
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fc:	9318      	str	r3, [sp, #96]	; 0x60
 800a6fe:	f1b8 0f00 	cmp.w	r8, #0
 800a702:	f300 808c 	bgt.w	800a81e <_strtod_l+0x87e>
 800a706:	9b06      	ldr	r3, [sp, #24]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dd08      	ble.n	800a71e <_strtod_l+0x77e>
 800a70c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a70e:	9905      	ldr	r1, [sp, #20]
 800a710:	4620      	mov	r0, r4
 800a712:	f001 fefb 	bl	800c50c <__pow5mult>
 800a716:	9005      	str	r0, [sp, #20]
 800a718:	2800      	cmp	r0, #0
 800a71a:	f43f ae89 	beq.w	800a430 <_strtod_l+0x490>
 800a71e:	2f00      	cmp	r7, #0
 800a720:	dd08      	ble.n	800a734 <_strtod_l+0x794>
 800a722:	9905      	ldr	r1, [sp, #20]
 800a724:	463a      	mov	r2, r7
 800a726:	4620      	mov	r0, r4
 800a728:	f001 ff4a 	bl	800c5c0 <__lshift>
 800a72c:	9005      	str	r0, [sp, #20]
 800a72e:	2800      	cmp	r0, #0
 800a730:	f43f ae7e 	beq.w	800a430 <_strtod_l+0x490>
 800a734:	f1b9 0f00 	cmp.w	r9, #0
 800a738:	dd08      	ble.n	800a74c <_strtod_l+0x7ac>
 800a73a:	4631      	mov	r1, r6
 800a73c:	464a      	mov	r2, r9
 800a73e:	4620      	mov	r0, r4
 800a740:	f001 ff3e 	bl	800c5c0 <__lshift>
 800a744:	4606      	mov	r6, r0
 800a746:	2800      	cmp	r0, #0
 800a748:	f43f ae72 	beq.w	800a430 <_strtod_l+0x490>
 800a74c:	9a05      	ldr	r2, [sp, #20]
 800a74e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a750:	4620      	mov	r0, r4
 800a752:	f001 ffc1 	bl	800c6d8 <__mdiff>
 800a756:	4605      	mov	r5, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	f43f ae69 	beq.w	800a430 <_strtod_l+0x490>
 800a75e:	68c3      	ldr	r3, [r0, #12]
 800a760:	930b      	str	r3, [sp, #44]	; 0x2c
 800a762:	2300      	movs	r3, #0
 800a764:	60c3      	str	r3, [r0, #12]
 800a766:	4631      	mov	r1, r6
 800a768:	f001 ff9a 	bl	800c6a0 <__mcmp>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	da60      	bge.n	800a832 <_strtod_l+0x892>
 800a770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a772:	ea53 030a 	orrs.w	r3, r3, sl
 800a776:	f040 8082 	bne.w	800a87e <_strtod_l+0x8de>
 800a77a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d17d      	bne.n	800a87e <_strtod_l+0x8de>
 800a782:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a786:	0d1b      	lsrs	r3, r3, #20
 800a788:	051b      	lsls	r3, r3, #20
 800a78a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a78e:	d976      	bls.n	800a87e <_strtod_l+0x8de>
 800a790:	696b      	ldr	r3, [r5, #20]
 800a792:	b913      	cbnz	r3, 800a79a <_strtod_l+0x7fa>
 800a794:	692b      	ldr	r3, [r5, #16]
 800a796:	2b01      	cmp	r3, #1
 800a798:	dd71      	ble.n	800a87e <_strtod_l+0x8de>
 800a79a:	4629      	mov	r1, r5
 800a79c:	2201      	movs	r2, #1
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f001 ff0e 	bl	800c5c0 <__lshift>
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	f001 ff7a 	bl	800c6a0 <__mcmp>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	dd66      	ble.n	800a87e <_strtod_l+0x8de>
 800a7b0:	9904      	ldr	r1, [sp, #16]
 800a7b2:	4a53      	ldr	r2, [pc, #332]	; (800a900 <_strtod_l+0x960>)
 800a7b4:	465b      	mov	r3, fp
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	f000 8081 	beq.w	800a8be <_strtod_l+0x91e>
 800a7bc:	ea02 010b 	and.w	r1, r2, fp
 800a7c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a7c4:	dc7b      	bgt.n	800a8be <_strtod_l+0x91e>
 800a7c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a7ca:	f77f aea9 	ble.w	800a520 <_strtod_l+0x580>
 800a7ce:	4b4d      	ldr	r3, [pc, #308]	; (800a904 <_strtod_l+0x964>)
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	4659      	mov	r1, fp
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f7f5 ff0f 	bl	80005f8 <__aeabi_dmul>
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4303      	orrs	r3, r0
 800a7de:	bf08      	it	eq
 800a7e0:	2322      	moveq	r3, #34	; 0x22
 800a7e2:	4682      	mov	sl, r0
 800a7e4:	468b      	mov	fp, r1
 800a7e6:	bf08      	it	eq
 800a7e8:	6023      	streq	r3, [r4, #0]
 800a7ea:	e62b      	b.n	800a444 <_strtod_l+0x4a4>
 800a7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a7f8:	e6e3      	b.n	800a5c2 <_strtod_l+0x622>
 800a7fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a7fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a802:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a806:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a80a:	fa01 f308 	lsl.w	r3, r1, r8
 800a80e:	9308      	str	r3, [sp, #32]
 800a810:	910d      	str	r1, [sp, #52]	; 0x34
 800a812:	e746      	b.n	800a6a2 <_strtod_l+0x702>
 800a814:	2300      	movs	r3, #0
 800a816:	9308      	str	r3, [sp, #32]
 800a818:	2301      	movs	r3, #1
 800a81a:	930d      	str	r3, [sp, #52]	; 0x34
 800a81c:	e741      	b.n	800a6a2 <_strtod_l+0x702>
 800a81e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a820:	4642      	mov	r2, r8
 800a822:	4620      	mov	r0, r4
 800a824:	f001 fecc 	bl	800c5c0 <__lshift>
 800a828:	9018      	str	r0, [sp, #96]	; 0x60
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f47f af6b 	bne.w	800a706 <_strtod_l+0x766>
 800a830:	e5fe      	b.n	800a430 <_strtod_l+0x490>
 800a832:	465f      	mov	r7, fp
 800a834:	d16e      	bne.n	800a914 <_strtod_l+0x974>
 800a836:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a83c:	b342      	cbz	r2, 800a890 <_strtod_l+0x8f0>
 800a83e:	4a32      	ldr	r2, [pc, #200]	; (800a908 <_strtod_l+0x968>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d128      	bne.n	800a896 <_strtod_l+0x8f6>
 800a844:	9b04      	ldr	r3, [sp, #16]
 800a846:	4651      	mov	r1, sl
 800a848:	b1eb      	cbz	r3, 800a886 <_strtod_l+0x8e6>
 800a84a:	4b2d      	ldr	r3, [pc, #180]	; (800a900 <_strtod_l+0x960>)
 800a84c:	403b      	ands	r3, r7
 800a84e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a852:	f04f 32ff 	mov.w	r2, #4294967295
 800a856:	d819      	bhi.n	800a88c <_strtod_l+0x8ec>
 800a858:	0d1b      	lsrs	r3, r3, #20
 800a85a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	4299      	cmp	r1, r3
 800a864:	d117      	bne.n	800a896 <_strtod_l+0x8f6>
 800a866:	4b29      	ldr	r3, [pc, #164]	; (800a90c <_strtod_l+0x96c>)
 800a868:	429f      	cmp	r7, r3
 800a86a:	d102      	bne.n	800a872 <_strtod_l+0x8d2>
 800a86c:	3101      	adds	r1, #1
 800a86e:	f43f addf 	beq.w	800a430 <_strtod_l+0x490>
 800a872:	4b23      	ldr	r3, [pc, #140]	; (800a900 <_strtod_l+0x960>)
 800a874:	403b      	ands	r3, r7
 800a876:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a87a:	f04f 0a00 	mov.w	sl, #0
 800a87e:	9b04      	ldr	r3, [sp, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1a4      	bne.n	800a7ce <_strtod_l+0x82e>
 800a884:	e5de      	b.n	800a444 <_strtod_l+0x4a4>
 800a886:	f04f 33ff 	mov.w	r3, #4294967295
 800a88a:	e7ea      	b.n	800a862 <_strtod_l+0x8c2>
 800a88c:	4613      	mov	r3, r2
 800a88e:	e7e8      	b.n	800a862 <_strtod_l+0x8c2>
 800a890:	ea53 030a 	orrs.w	r3, r3, sl
 800a894:	d08c      	beq.n	800a7b0 <_strtod_l+0x810>
 800a896:	9b08      	ldr	r3, [sp, #32]
 800a898:	b1db      	cbz	r3, 800a8d2 <_strtod_l+0x932>
 800a89a:	423b      	tst	r3, r7
 800a89c:	d0ef      	beq.n	800a87e <_strtod_l+0x8de>
 800a89e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a0:	9a04      	ldr	r2, [sp, #16]
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	b1c3      	cbz	r3, 800a8da <_strtod_l+0x93a>
 800a8a8:	f7ff fb5e 	bl	8009f68 <sulp>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	ec51 0b18 	vmov	r0, r1, d8
 800a8b4:	f7f5 fcea 	bl	800028c <__adddf3>
 800a8b8:	4682      	mov	sl, r0
 800a8ba:	468b      	mov	fp, r1
 800a8bc:	e7df      	b.n	800a87e <_strtod_l+0x8de>
 800a8be:	4013      	ands	r3, r2
 800a8c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a8c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a8d0:	e7d5      	b.n	800a87e <_strtod_l+0x8de>
 800a8d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8d4:	ea13 0f0a 	tst.w	r3, sl
 800a8d8:	e7e0      	b.n	800a89c <_strtod_l+0x8fc>
 800a8da:	f7ff fb45 	bl	8009f68 <sulp>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	ec51 0b18 	vmov	r0, r1, d8
 800a8e6:	f7f5 fccf 	bl	8000288 <__aeabi_dsub>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4682      	mov	sl, r0
 800a8f0:	468b      	mov	fp, r1
 800a8f2:	f7f6 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d0c1      	beq.n	800a87e <_strtod_l+0x8de>
 800a8fa:	e611      	b.n	800a520 <_strtod_l+0x580>
 800a8fc:	fffffc02 	.word	0xfffffc02
 800a900:	7ff00000 	.word	0x7ff00000
 800a904:	39500000 	.word	0x39500000
 800a908:	000fffff 	.word	0x000fffff
 800a90c:	7fefffff 	.word	0x7fefffff
 800a910:	0800dea8 	.word	0x0800dea8
 800a914:	4631      	mov	r1, r6
 800a916:	4628      	mov	r0, r5
 800a918:	f002 f840 	bl	800c99c <__ratio>
 800a91c:	ec59 8b10 	vmov	r8, r9, d0
 800a920:	ee10 0a10 	vmov	r0, s0
 800a924:	2200      	movs	r2, #0
 800a926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a92a:	4649      	mov	r1, r9
 800a92c:	f7f6 f8e0 	bl	8000af0 <__aeabi_dcmple>
 800a930:	2800      	cmp	r0, #0
 800a932:	d07a      	beq.n	800aa2a <_strtod_l+0xa8a>
 800a934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d04a      	beq.n	800a9d0 <_strtod_l+0xa30>
 800a93a:	4b95      	ldr	r3, [pc, #596]	; (800ab90 <_strtod_l+0xbf0>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a942:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ab90 <_strtod_l+0xbf0>
 800a946:	f04f 0800 	mov.w	r8, #0
 800a94a:	4b92      	ldr	r3, [pc, #584]	; (800ab94 <_strtod_l+0xbf4>)
 800a94c:	403b      	ands	r3, r7
 800a94e:	930d      	str	r3, [sp, #52]	; 0x34
 800a950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a952:	4b91      	ldr	r3, [pc, #580]	; (800ab98 <_strtod_l+0xbf8>)
 800a954:	429a      	cmp	r2, r3
 800a956:	f040 80b0 	bne.w	800aaba <_strtod_l+0xb1a>
 800a95a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a95e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a962:	ec4b ab10 	vmov	d0, sl, fp
 800a966:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a96a:	f001 ff3f 	bl	800c7ec <__ulp>
 800a96e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a972:	ec53 2b10 	vmov	r2, r3, d0
 800a976:	f7f5 fe3f 	bl	80005f8 <__aeabi_dmul>
 800a97a:	4652      	mov	r2, sl
 800a97c:	465b      	mov	r3, fp
 800a97e:	f7f5 fc85 	bl	800028c <__adddf3>
 800a982:	460b      	mov	r3, r1
 800a984:	4983      	ldr	r1, [pc, #524]	; (800ab94 <_strtod_l+0xbf4>)
 800a986:	4a85      	ldr	r2, [pc, #532]	; (800ab9c <_strtod_l+0xbfc>)
 800a988:	4019      	ands	r1, r3
 800a98a:	4291      	cmp	r1, r2
 800a98c:	4682      	mov	sl, r0
 800a98e:	d960      	bls.n	800aa52 <_strtod_l+0xab2>
 800a990:	ee18 3a90 	vmov	r3, s17
 800a994:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a998:	4293      	cmp	r3, r2
 800a99a:	d104      	bne.n	800a9a6 <_strtod_l+0xa06>
 800a99c:	ee18 3a10 	vmov	r3, s16
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	f43f ad45 	beq.w	800a430 <_strtod_l+0x490>
 800a9a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800aba8 <_strtod_l+0xc08>
 800a9aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a9ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f001 fbe9 	bl	800c188 <_Bfree>
 800a9b6:	9905      	ldr	r1, [sp, #20]
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f001 fbe5 	bl	800c188 <_Bfree>
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f001 fbe1 	bl	800c188 <_Bfree>
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f001 fbdd 	bl	800c188 <_Bfree>
 800a9ce:	e61a      	b.n	800a606 <_strtod_l+0x666>
 800a9d0:	f1ba 0f00 	cmp.w	sl, #0
 800a9d4:	d11b      	bne.n	800aa0e <_strtod_l+0xa6e>
 800a9d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9da:	b9f3      	cbnz	r3, 800aa1a <_strtod_l+0xa7a>
 800a9dc:	4b6c      	ldr	r3, [pc, #432]	; (800ab90 <_strtod_l+0xbf0>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f6 f87a 	bl	8000adc <__aeabi_dcmplt>
 800a9e8:	b9d0      	cbnz	r0, 800aa20 <_strtod_l+0xa80>
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	4b6c      	ldr	r3, [pc, #432]	; (800aba0 <_strtod_l+0xc00>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f7f5 fe01 	bl	80005f8 <__aeabi_dmul>
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	4689      	mov	r9, r1
 800a9fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a9fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800aa02:	9315      	str	r3, [sp, #84]	; 0x54
 800aa04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aa08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa0c:	e79d      	b.n	800a94a <_strtod_l+0x9aa>
 800aa0e:	f1ba 0f01 	cmp.w	sl, #1
 800aa12:	d102      	bne.n	800aa1a <_strtod_l+0xa7a>
 800aa14:	2f00      	cmp	r7, #0
 800aa16:	f43f ad83 	beq.w	800a520 <_strtod_l+0x580>
 800aa1a:	4b62      	ldr	r3, [pc, #392]	; (800aba4 <_strtod_l+0xc04>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	e78e      	b.n	800a93e <_strtod_l+0x99e>
 800aa20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800aba0 <_strtod_l+0xc00>
 800aa24:	f04f 0800 	mov.w	r8, #0
 800aa28:	e7e7      	b.n	800a9fa <_strtod_l+0xa5a>
 800aa2a:	4b5d      	ldr	r3, [pc, #372]	; (800aba0 <_strtod_l+0xc00>)
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4649      	mov	r1, r9
 800aa30:	2200      	movs	r2, #0
 800aa32:	f7f5 fde1 	bl	80005f8 <__aeabi_dmul>
 800aa36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4689      	mov	r9, r1
 800aa3c:	b933      	cbnz	r3, 800aa4c <_strtod_l+0xaac>
 800aa3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa42:	900e      	str	r0, [sp, #56]	; 0x38
 800aa44:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aa4a:	e7dd      	b.n	800aa08 <_strtod_l+0xa68>
 800aa4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aa50:	e7f9      	b.n	800aa46 <_strtod_l+0xaa6>
 800aa52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aa56:	9b04      	ldr	r3, [sp, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1a8      	bne.n	800a9ae <_strtod_l+0xa0e>
 800aa5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa62:	0d1b      	lsrs	r3, r3, #20
 800aa64:	051b      	lsls	r3, r3, #20
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d1a1      	bne.n	800a9ae <_strtod_l+0xa0e>
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4649      	mov	r1, r9
 800aa6e:	f7f6 f923 	bl	8000cb8 <__aeabi_d2lz>
 800aa72:	f7f5 fd93 	bl	800059c <__aeabi_l2d>
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	f7f5 fc03 	bl	8000288 <__aeabi_dsub>
 800aa82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa88:	ea43 030a 	orr.w	r3, r3, sl
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	4680      	mov	r8, r0
 800aa90:	4689      	mov	r9, r1
 800aa92:	d055      	beq.n	800ab40 <_strtod_l+0xba0>
 800aa94:	a336      	add	r3, pc, #216	; (adr r3, 800ab70 <_strtod_l+0xbd0>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	f7f6 f81f 	bl	8000adc <__aeabi_dcmplt>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f47f acd0 	bne.w	800a444 <_strtod_l+0x4a4>
 800aaa4:	a334      	add	r3, pc, #208	; (adr r3, 800ab78 <_strtod_l+0xbd8>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f6 f833 	bl	8000b18 <__aeabi_dcmpgt>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	f43f af7b 	beq.w	800a9ae <_strtod_l+0xa0e>
 800aab8:	e4c4      	b.n	800a444 <_strtod_l+0x4a4>
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	b333      	cbz	r3, 800ab0c <_strtod_l+0xb6c>
 800aabe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aac0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aac4:	d822      	bhi.n	800ab0c <_strtod_l+0xb6c>
 800aac6:	a32e      	add	r3, pc, #184	; (adr r3, 800ab80 <_strtod_l+0xbe0>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	4640      	mov	r0, r8
 800aace:	4649      	mov	r1, r9
 800aad0:	f7f6 f80e 	bl	8000af0 <__aeabi_dcmple>
 800aad4:	b1a0      	cbz	r0, 800ab00 <_strtod_l+0xb60>
 800aad6:	4649      	mov	r1, r9
 800aad8:	4640      	mov	r0, r8
 800aada:	f7f6 f865 	bl	8000ba8 <__aeabi_d2uiz>
 800aade:	2801      	cmp	r0, #1
 800aae0:	bf38      	it	cc
 800aae2:	2001      	movcc	r0, #1
 800aae4:	f7f5 fd0e 	bl	8000504 <__aeabi_ui2d>
 800aae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaea:	4680      	mov	r8, r0
 800aaec:	4689      	mov	r9, r1
 800aaee:	bb23      	cbnz	r3, 800ab3a <_strtod_l+0xb9a>
 800aaf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaf4:	9010      	str	r0, [sp, #64]	; 0x40
 800aaf6:	9311      	str	r3, [sp, #68]	; 0x44
 800aaf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aafc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ab08:	1a9b      	subs	r3, r3, r2
 800ab0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab10:	eeb0 0a48 	vmov.f32	s0, s16
 800ab14:	eef0 0a68 	vmov.f32	s1, s17
 800ab18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab1c:	f001 fe66 	bl	800c7ec <__ulp>
 800ab20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab24:	ec53 2b10 	vmov	r2, r3, d0
 800ab28:	f7f5 fd66 	bl	80005f8 <__aeabi_dmul>
 800ab2c:	ec53 2b18 	vmov	r2, r3, d8
 800ab30:	f7f5 fbac 	bl	800028c <__adddf3>
 800ab34:	4682      	mov	sl, r0
 800ab36:	468b      	mov	fp, r1
 800ab38:	e78d      	b.n	800aa56 <_strtod_l+0xab6>
 800ab3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ab3e:	e7db      	b.n	800aaf8 <_strtod_l+0xb58>
 800ab40:	a311      	add	r3, pc, #68	; (adr r3, 800ab88 <_strtod_l+0xbe8>)
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	f7f5 ffc9 	bl	8000adc <__aeabi_dcmplt>
 800ab4a:	e7b2      	b.n	800aab2 <_strtod_l+0xb12>
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	f7ff ba6b 	b.w	800a030 <_strtod_l+0x90>
 800ab5a:	2a65      	cmp	r2, #101	; 0x65
 800ab5c:	f43f ab5f 	beq.w	800a21e <_strtod_l+0x27e>
 800ab60:	2a45      	cmp	r2, #69	; 0x45
 800ab62:	f43f ab5c 	beq.w	800a21e <_strtod_l+0x27e>
 800ab66:	2301      	movs	r3, #1
 800ab68:	f7ff bb94 	b.w	800a294 <_strtod_l+0x2f4>
 800ab6c:	f3af 8000 	nop.w
 800ab70:	94a03595 	.word	0x94a03595
 800ab74:	3fdfffff 	.word	0x3fdfffff
 800ab78:	35afe535 	.word	0x35afe535
 800ab7c:	3fe00000 	.word	0x3fe00000
 800ab80:	ffc00000 	.word	0xffc00000
 800ab84:	41dfffff 	.word	0x41dfffff
 800ab88:	94a03595 	.word	0x94a03595
 800ab8c:	3fcfffff 	.word	0x3fcfffff
 800ab90:	3ff00000 	.word	0x3ff00000
 800ab94:	7ff00000 	.word	0x7ff00000
 800ab98:	7fe00000 	.word	0x7fe00000
 800ab9c:	7c9fffff 	.word	0x7c9fffff
 800aba0:	3fe00000 	.word	0x3fe00000
 800aba4:	bff00000 	.word	0xbff00000
 800aba8:	7fefffff 	.word	0x7fefffff

0800abac <strtod>:
 800abac:	460a      	mov	r2, r1
 800abae:	4601      	mov	r1, r0
 800abb0:	4802      	ldr	r0, [pc, #8]	; (800abbc <strtod+0x10>)
 800abb2:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <strtod+0x14>)
 800abb4:	6800      	ldr	r0, [r0, #0]
 800abb6:	f7ff b9f3 	b.w	8009fa0 <_strtod_l>
 800abba:	bf00      	nop
 800abbc:	20000020 	.word	0x20000020
 800abc0:	20000088 	.word	0x20000088

0800abc4 <strtok>:
 800abc4:	4b16      	ldr	r3, [pc, #88]	; (800ac20 <strtok+0x5c>)
 800abc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abc8:	681e      	ldr	r6, [r3, #0]
 800abca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800abcc:	4605      	mov	r5, r0
 800abce:	b9fc      	cbnz	r4, 800ac10 <strtok+0x4c>
 800abd0:	2050      	movs	r0, #80	; 0x50
 800abd2:	9101      	str	r1, [sp, #4]
 800abd4:	f001 fa70 	bl	800c0b8 <malloc>
 800abd8:	9901      	ldr	r1, [sp, #4]
 800abda:	65b0      	str	r0, [r6, #88]	; 0x58
 800abdc:	4602      	mov	r2, r0
 800abde:	b920      	cbnz	r0, 800abea <strtok+0x26>
 800abe0:	4b10      	ldr	r3, [pc, #64]	; (800ac24 <strtok+0x60>)
 800abe2:	4811      	ldr	r0, [pc, #68]	; (800ac28 <strtok+0x64>)
 800abe4:	2157      	movs	r1, #87	; 0x57
 800abe6:	f000 f849 	bl	800ac7c <__assert_func>
 800abea:	e9c0 4400 	strd	r4, r4, [r0]
 800abee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800abf2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800abf6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800abfa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800abfe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ac02:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ac06:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ac0a:	6184      	str	r4, [r0, #24]
 800ac0c:	7704      	strb	r4, [r0, #28]
 800ac0e:	6244      	str	r4, [r0, #36]	; 0x24
 800ac10:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ac12:	2301      	movs	r3, #1
 800ac14:	4628      	mov	r0, r5
 800ac16:	b002      	add	sp, #8
 800ac18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac1c:	f000 b806 	b.w	800ac2c <__strtok_r>
 800ac20:	20000020 	.word	0x20000020
 800ac24:	0800ded0 	.word	0x0800ded0
 800ac28:	0800dee7 	.word	0x0800dee7

0800ac2c <__strtok_r>:
 800ac2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac2e:	b908      	cbnz	r0, 800ac34 <__strtok_r+0x8>
 800ac30:	6810      	ldr	r0, [r2, #0]
 800ac32:	b188      	cbz	r0, 800ac58 <__strtok_r+0x2c>
 800ac34:	4604      	mov	r4, r0
 800ac36:	4620      	mov	r0, r4
 800ac38:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac42:	b91e      	cbnz	r6, 800ac4c <__strtok_r+0x20>
 800ac44:	b965      	cbnz	r5, 800ac60 <__strtok_r+0x34>
 800ac46:	6015      	str	r5, [r2, #0]
 800ac48:	4628      	mov	r0, r5
 800ac4a:	e005      	b.n	800ac58 <__strtok_r+0x2c>
 800ac4c:	42b5      	cmp	r5, r6
 800ac4e:	d1f6      	bne.n	800ac3e <__strtok_r+0x12>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1f0      	bne.n	800ac36 <__strtok_r+0xa>
 800ac54:	6014      	str	r4, [r2, #0]
 800ac56:	7003      	strb	r3, [r0, #0]
 800ac58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac5a:	461c      	mov	r4, r3
 800ac5c:	e00c      	b.n	800ac78 <__strtok_r+0x4c>
 800ac5e:	b915      	cbnz	r5, 800ac66 <__strtok_r+0x3a>
 800ac60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac64:	460e      	mov	r6, r1
 800ac66:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ac6a:	42ab      	cmp	r3, r5
 800ac6c:	d1f7      	bne.n	800ac5e <__strtok_r+0x32>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0f3      	beq.n	800ac5a <__strtok_r+0x2e>
 800ac72:	2300      	movs	r3, #0
 800ac74:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ac78:	6014      	str	r4, [r2, #0]
 800ac7a:	e7ed      	b.n	800ac58 <__strtok_r+0x2c>

0800ac7c <__assert_func>:
 800ac7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac7e:	4614      	mov	r4, r2
 800ac80:	461a      	mov	r2, r3
 800ac82:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <__assert_func+0x2c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4605      	mov	r5, r0
 800ac88:	68d8      	ldr	r0, [r3, #12]
 800ac8a:	b14c      	cbz	r4, 800aca0 <__assert_func+0x24>
 800ac8c:	4b07      	ldr	r3, [pc, #28]	; (800acac <__assert_func+0x30>)
 800ac8e:	9100      	str	r1, [sp, #0]
 800ac90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac94:	4906      	ldr	r1, [pc, #24]	; (800acb0 <__assert_func+0x34>)
 800ac96:	462b      	mov	r3, r5
 800ac98:	f000 fe88 	bl	800b9ac <fiprintf>
 800ac9c:	f002 fb9e 	bl	800d3dc <abort>
 800aca0:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <__assert_func+0x38>)
 800aca2:	461c      	mov	r4, r3
 800aca4:	e7f3      	b.n	800ac8e <__assert_func+0x12>
 800aca6:	bf00      	nop
 800aca8:	20000020 	.word	0x20000020
 800acac:	0800df44 	.word	0x0800df44
 800acb0:	0800df51 	.word	0x0800df51
 800acb4:	0800df7f 	.word	0x0800df7f

0800acb8 <quorem>:
 800acb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	6903      	ldr	r3, [r0, #16]
 800acbe:	690c      	ldr	r4, [r1, #16]
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	4607      	mov	r7, r0
 800acc4:	f2c0 8081 	blt.w	800adca <quorem+0x112>
 800acc8:	3c01      	subs	r4, #1
 800acca:	f101 0814 	add.w	r8, r1, #20
 800acce:	f100 0514 	add.w	r5, r0, #20
 800acd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ace0:	3301      	adds	r3, #1
 800ace2:	429a      	cmp	r2, r3
 800ace4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ace8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acec:	fbb2 f6f3 	udiv	r6, r2, r3
 800acf0:	d331      	bcc.n	800ad56 <quorem+0x9e>
 800acf2:	f04f 0e00 	mov.w	lr, #0
 800acf6:	4640      	mov	r0, r8
 800acf8:	46ac      	mov	ip, r5
 800acfa:	46f2      	mov	sl, lr
 800acfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad00:	b293      	uxth	r3, r2
 800ad02:	fb06 e303 	mla	r3, r6, r3, lr
 800ad06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	ebaa 0303 	sub.w	r3, sl, r3
 800ad10:	f8dc a000 	ldr.w	sl, [ip]
 800ad14:	0c12      	lsrs	r2, r2, #16
 800ad16:	fa13 f38a 	uxtah	r3, r3, sl
 800ad1a:	fb06 e202 	mla	r2, r6, r2, lr
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad26:	b292      	uxth	r2, r2
 800ad28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad30:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad34:	4581      	cmp	r9, r0
 800ad36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad3a:	f84c 3b04 	str.w	r3, [ip], #4
 800ad3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad42:	d2db      	bcs.n	800acfc <quorem+0x44>
 800ad44:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad48:	b92b      	cbnz	r3, 800ad56 <quorem+0x9e>
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	3b04      	subs	r3, #4
 800ad4e:	429d      	cmp	r5, r3
 800ad50:	461a      	mov	r2, r3
 800ad52:	d32e      	bcc.n	800adb2 <quorem+0xfa>
 800ad54:	613c      	str	r4, [r7, #16]
 800ad56:	4638      	mov	r0, r7
 800ad58:	f001 fca2 	bl	800c6a0 <__mcmp>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	db24      	blt.n	800adaa <quorem+0xf2>
 800ad60:	3601      	adds	r6, #1
 800ad62:	4628      	mov	r0, r5
 800ad64:	f04f 0c00 	mov.w	ip, #0
 800ad68:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad6c:	f8d0 e000 	ldr.w	lr, [r0]
 800ad70:	b293      	uxth	r3, r2
 800ad72:	ebac 0303 	sub.w	r3, ip, r3
 800ad76:	0c12      	lsrs	r2, r2, #16
 800ad78:	fa13 f38e 	uxtah	r3, r3, lr
 800ad7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad8a:	45c1      	cmp	r9, r8
 800ad8c:	f840 3b04 	str.w	r3, [r0], #4
 800ad90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ad94:	d2e8      	bcs.n	800ad68 <quorem+0xb0>
 800ad96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad9e:	b922      	cbnz	r2, 800adaa <quorem+0xf2>
 800ada0:	3b04      	subs	r3, #4
 800ada2:	429d      	cmp	r5, r3
 800ada4:	461a      	mov	r2, r3
 800ada6:	d30a      	bcc.n	800adbe <quorem+0x106>
 800ada8:	613c      	str	r4, [r7, #16]
 800adaa:	4630      	mov	r0, r6
 800adac:	b003      	add	sp, #12
 800adae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb2:	6812      	ldr	r2, [r2, #0]
 800adb4:	3b04      	subs	r3, #4
 800adb6:	2a00      	cmp	r2, #0
 800adb8:	d1cc      	bne.n	800ad54 <quorem+0x9c>
 800adba:	3c01      	subs	r4, #1
 800adbc:	e7c7      	b.n	800ad4e <quorem+0x96>
 800adbe:	6812      	ldr	r2, [r2, #0]
 800adc0:	3b04      	subs	r3, #4
 800adc2:	2a00      	cmp	r2, #0
 800adc4:	d1f0      	bne.n	800ada8 <quorem+0xf0>
 800adc6:	3c01      	subs	r4, #1
 800adc8:	e7eb      	b.n	800ada2 <quorem+0xea>
 800adca:	2000      	movs	r0, #0
 800adcc:	e7ee      	b.n	800adac <quorem+0xf4>
	...

0800add0 <_dtoa_r>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	ed2d 8b04 	vpush	{d8-d9}
 800add8:	ec57 6b10 	vmov	r6, r7, d0
 800addc:	b093      	sub	sp, #76	; 0x4c
 800adde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ade0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ade4:	9106      	str	r1, [sp, #24]
 800ade6:	ee10 aa10 	vmov	sl, s0
 800adea:	4604      	mov	r4, r0
 800adec:	9209      	str	r2, [sp, #36]	; 0x24
 800adee:	930c      	str	r3, [sp, #48]	; 0x30
 800adf0:	46bb      	mov	fp, r7
 800adf2:	b975      	cbnz	r5, 800ae12 <_dtoa_r+0x42>
 800adf4:	2010      	movs	r0, #16
 800adf6:	f001 f95f 	bl	800c0b8 <malloc>
 800adfa:	4602      	mov	r2, r0
 800adfc:	6260      	str	r0, [r4, #36]	; 0x24
 800adfe:	b920      	cbnz	r0, 800ae0a <_dtoa_r+0x3a>
 800ae00:	4ba7      	ldr	r3, [pc, #668]	; (800b0a0 <_dtoa_r+0x2d0>)
 800ae02:	21ea      	movs	r1, #234	; 0xea
 800ae04:	48a7      	ldr	r0, [pc, #668]	; (800b0a4 <_dtoa_r+0x2d4>)
 800ae06:	f7ff ff39 	bl	800ac7c <__assert_func>
 800ae0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae0e:	6005      	str	r5, [r0, #0]
 800ae10:	60c5      	str	r5, [r0, #12]
 800ae12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae14:	6819      	ldr	r1, [r3, #0]
 800ae16:	b151      	cbz	r1, 800ae2e <_dtoa_r+0x5e>
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	604a      	str	r2, [r1, #4]
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	4093      	lsls	r3, r2
 800ae20:	608b      	str	r3, [r1, #8]
 800ae22:	4620      	mov	r0, r4
 800ae24:	f001 f9b0 	bl	800c188 <_Bfree>
 800ae28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	1e3b      	subs	r3, r7, #0
 800ae30:	bfaa      	itet	ge
 800ae32:	2300      	movge	r3, #0
 800ae34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae38:	f8c8 3000 	strge.w	r3, [r8]
 800ae3c:	4b9a      	ldr	r3, [pc, #616]	; (800b0a8 <_dtoa_r+0x2d8>)
 800ae3e:	bfbc      	itt	lt
 800ae40:	2201      	movlt	r2, #1
 800ae42:	f8c8 2000 	strlt.w	r2, [r8]
 800ae46:	ea33 030b 	bics.w	r3, r3, fp
 800ae4a:	d11b      	bne.n	800ae84 <_dtoa_r+0xb4>
 800ae4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae58:	4333      	orrs	r3, r6
 800ae5a:	f000 8592 	beq.w	800b982 <_dtoa_r+0xbb2>
 800ae5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae60:	b963      	cbnz	r3, 800ae7c <_dtoa_r+0xac>
 800ae62:	4b92      	ldr	r3, [pc, #584]	; (800b0ac <_dtoa_r+0x2dc>)
 800ae64:	e022      	b.n	800aeac <_dtoa_r+0xdc>
 800ae66:	4b92      	ldr	r3, [pc, #584]	; (800b0b0 <_dtoa_r+0x2e0>)
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	9801      	ldr	r0, [sp, #4]
 800ae72:	b013      	add	sp, #76	; 0x4c
 800ae74:	ecbd 8b04 	vpop	{d8-d9}
 800ae78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7c:	4b8b      	ldr	r3, [pc, #556]	; (800b0ac <_dtoa_r+0x2dc>)
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	3303      	adds	r3, #3
 800ae82:	e7f3      	b.n	800ae6c <_dtoa_r+0x9c>
 800ae84:	2200      	movs	r2, #0
 800ae86:	2300      	movs	r3, #0
 800ae88:	4650      	mov	r0, sl
 800ae8a:	4659      	mov	r1, fp
 800ae8c:	f7f5 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae90:	ec4b ab19 	vmov	d9, sl, fp
 800ae94:	4680      	mov	r8, r0
 800ae96:	b158      	cbz	r0, 800aeb0 <_dtoa_r+0xe0>
 800ae98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 856b 	beq.w	800b97c <_dtoa_r+0xbac>
 800aea6:	4883      	ldr	r0, [pc, #524]	; (800b0b4 <_dtoa_r+0x2e4>)
 800aea8:	6018      	str	r0, [r3, #0]
 800aeaa:	1e43      	subs	r3, r0, #1
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	e7df      	b.n	800ae70 <_dtoa_r+0xa0>
 800aeb0:	ec4b ab10 	vmov	d0, sl, fp
 800aeb4:	aa10      	add	r2, sp, #64	; 0x40
 800aeb6:	a911      	add	r1, sp, #68	; 0x44
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f001 fd13 	bl	800c8e4 <__d2b>
 800aebe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aec2:	ee08 0a10 	vmov	s16, r0
 800aec6:	2d00      	cmp	r5, #0
 800aec8:	f000 8084 	beq.w	800afd4 <_dtoa_r+0x204>
 800aecc:	ee19 3a90 	vmov	r3, s19
 800aed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aed4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aed8:	4656      	mov	r6, sl
 800aeda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aee6:	4b74      	ldr	r3, [pc, #464]	; (800b0b8 <_dtoa_r+0x2e8>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	4630      	mov	r0, r6
 800aeec:	4639      	mov	r1, r7
 800aeee:	f7f5 f9cb 	bl	8000288 <__aeabi_dsub>
 800aef2:	a365      	add	r3, pc, #404	; (adr r3, 800b088 <_dtoa_r+0x2b8>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f7f5 fb7e 	bl	80005f8 <__aeabi_dmul>
 800aefc:	a364      	add	r3, pc, #400	; (adr r3, 800b090 <_dtoa_r+0x2c0>)
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	4606      	mov	r6, r0
 800af08:	4628      	mov	r0, r5
 800af0a:	460f      	mov	r7, r1
 800af0c:	f7f5 fb0a 	bl	8000524 <__aeabi_i2d>
 800af10:	a361      	add	r3, pc, #388	; (adr r3, 800b098 <_dtoa_r+0x2c8>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	f7f5 fb6f 	bl	80005f8 <__aeabi_dmul>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4630      	mov	r0, r6
 800af20:	4639      	mov	r1, r7
 800af22:	f7f5 f9b3 	bl	800028c <__adddf3>
 800af26:	4606      	mov	r6, r0
 800af28:	460f      	mov	r7, r1
 800af2a:	f7f5 fe15 	bl	8000b58 <__aeabi_d2iz>
 800af2e:	2200      	movs	r2, #0
 800af30:	9000      	str	r0, [sp, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	4630      	mov	r0, r6
 800af36:	4639      	mov	r1, r7
 800af38:	f7f5 fdd0 	bl	8000adc <__aeabi_dcmplt>
 800af3c:	b150      	cbz	r0, 800af54 <_dtoa_r+0x184>
 800af3e:	9800      	ldr	r0, [sp, #0]
 800af40:	f7f5 faf0 	bl	8000524 <__aeabi_i2d>
 800af44:	4632      	mov	r2, r6
 800af46:	463b      	mov	r3, r7
 800af48:	f7f5 fdbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800af4c:	b910      	cbnz	r0, 800af54 <_dtoa_r+0x184>
 800af4e:	9b00      	ldr	r3, [sp, #0]
 800af50:	3b01      	subs	r3, #1
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	9b00      	ldr	r3, [sp, #0]
 800af56:	2b16      	cmp	r3, #22
 800af58:	d85a      	bhi.n	800b010 <_dtoa_r+0x240>
 800af5a:	9a00      	ldr	r2, [sp, #0]
 800af5c:	4b57      	ldr	r3, [pc, #348]	; (800b0bc <_dtoa_r+0x2ec>)
 800af5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	ec51 0b19 	vmov	r0, r1, d9
 800af6a:	f7f5 fdb7 	bl	8000adc <__aeabi_dcmplt>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d050      	beq.n	800b014 <_dtoa_r+0x244>
 800af72:	9b00      	ldr	r3, [sp, #0]
 800af74:	3b01      	subs	r3, #1
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	2300      	movs	r3, #0
 800af7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af7e:	1b5d      	subs	r5, r3, r5
 800af80:	1e6b      	subs	r3, r5, #1
 800af82:	9305      	str	r3, [sp, #20]
 800af84:	bf45      	ittet	mi
 800af86:	f1c5 0301 	rsbmi	r3, r5, #1
 800af8a:	9304      	strmi	r3, [sp, #16]
 800af8c:	2300      	movpl	r3, #0
 800af8e:	2300      	movmi	r3, #0
 800af90:	bf4c      	ite	mi
 800af92:	9305      	strmi	r3, [sp, #20]
 800af94:	9304      	strpl	r3, [sp, #16]
 800af96:	9b00      	ldr	r3, [sp, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	db3d      	blt.n	800b018 <_dtoa_r+0x248>
 800af9c:	9b05      	ldr	r3, [sp, #20]
 800af9e:	9a00      	ldr	r2, [sp, #0]
 800afa0:	920a      	str	r2, [sp, #40]	; 0x28
 800afa2:	4413      	add	r3, r2
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	2300      	movs	r3, #0
 800afa8:	9307      	str	r3, [sp, #28]
 800afaa:	9b06      	ldr	r3, [sp, #24]
 800afac:	2b09      	cmp	r3, #9
 800afae:	f200 8089 	bhi.w	800b0c4 <_dtoa_r+0x2f4>
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	bfc4      	itt	gt
 800afb6:	3b04      	subgt	r3, #4
 800afb8:	9306      	strgt	r3, [sp, #24]
 800afba:	9b06      	ldr	r3, [sp, #24]
 800afbc:	f1a3 0302 	sub.w	r3, r3, #2
 800afc0:	bfcc      	ite	gt
 800afc2:	2500      	movgt	r5, #0
 800afc4:	2501      	movle	r5, #1
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	f200 8087 	bhi.w	800b0da <_dtoa_r+0x30a>
 800afcc:	e8df f003 	tbb	[pc, r3]
 800afd0:	59383a2d 	.word	0x59383a2d
 800afd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afd8:	441d      	add	r5, r3
 800afda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afde:	2b20      	cmp	r3, #32
 800afe0:	bfc1      	itttt	gt
 800afe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800afe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800afea:	fa0b f303 	lslgt.w	r3, fp, r3
 800afee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aff2:	bfda      	itte	le
 800aff4:	f1c3 0320 	rsble	r3, r3, #32
 800aff8:	fa06 f003 	lslle.w	r0, r6, r3
 800affc:	4318      	orrgt	r0, r3
 800affe:	f7f5 fa81 	bl	8000504 <__aeabi_ui2d>
 800b002:	2301      	movs	r3, #1
 800b004:	4606      	mov	r6, r0
 800b006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b00a:	3d01      	subs	r5, #1
 800b00c:	930e      	str	r3, [sp, #56]	; 0x38
 800b00e:	e76a      	b.n	800aee6 <_dtoa_r+0x116>
 800b010:	2301      	movs	r3, #1
 800b012:	e7b2      	b.n	800af7a <_dtoa_r+0x1aa>
 800b014:	900b      	str	r0, [sp, #44]	; 0x2c
 800b016:	e7b1      	b.n	800af7c <_dtoa_r+0x1ac>
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	9a00      	ldr	r2, [sp, #0]
 800b01c:	1a9b      	subs	r3, r3, r2
 800b01e:	9304      	str	r3, [sp, #16]
 800b020:	4253      	negs	r3, r2
 800b022:	9307      	str	r3, [sp, #28]
 800b024:	2300      	movs	r3, #0
 800b026:	930a      	str	r3, [sp, #40]	; 0x28
 800b028:	e7bf      	b.n	800afaa <_dtoa_r+0x1da>
 800b02a:	2300      	movs	r3, #0
 800b02c:	9308      	str	r3, [sp, #32]
 800b02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b030:	2b00      	cmp	r3, #0
 800b032:	dc55      	bgt.n	800b0e0 <_dtoa_r+0x310>
 800b034:	2301      	movs	r3, #1
 800b036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b03a:	461a      	mov	r2, r3
 800b03c:	9209      	str	r2, [sp, #36]	; 0x24
 800b03e:	e00c      	b.n	800b05a <_dtoa_r+0x28a>
 800b040:	2301      	movs	r3, #1
 800b042:	e7f3      	b.n	800b02c <_dtoa_r+0x25c>
 800b044:	2300      	movs	r3, #0
 800b046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b048:	9308      	str	r3, [sp, #32]
 800b04a:	9b00      	ldr	r3, [sp, #0]
 800b04c:	4413      	add	r3, r2
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	3301      	adds	r3, #1
 800b052:	2b01      	cmp	r3, #1
 800b054:	9303      	str	r3, [sp, #12]
 800b056:	bfb8      	it	lt
 800b058:	2301      	movlt	r3, #1
 800b05a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b05c:	2200      	movs	r2, #0
 800b05e:	6042      	str	r2, [r0, #4]
 800b060:	2204      	movs	r2, #4
 800b062:	f102 0614 	add.w	r6, r2, #20
 800b066:	429e      	cmp	r6, r3
 800b068:	6841      	ldr	r1, [r0, #4]
 800b06a:	d93d      	bls.n	800b0e8 <_dtoa_r+0x318>
 800b06c:	4620      	mov	r0, r4
 800b06e:	f001 f84b 	bl	800c108 <_Balloc>
 800b072:	9001      	str	r0, [sp, #4]
 800b074:	2800      	cmp	r0, #0
 800b076:	d13b      	bne.n	800b0f0 <_dtoa_r+0x320>
 800b078:	4b11      	ldr	r3, [pc, #68]	; (800b0c0 <_dtoa_r+0x2f0>)
 800b07a:	4602      	mov	r2, r0
 800b07c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b080:	e6c0      	b.n	800ae04 <_dtoa_r+0x34>
 800b082:	2301      	movs	r3, #1
 800b084:	e7df      	b.n	800b046 <_dtoa_r+0x276>
 800b086:	bf00      	nop
 800b088:	636f4361 	.word	0x636f4361
 800b08c:	3fd287a7 	.word	0x3fd287a7
 800b090:	8b60c8b3 	.word	0x8b60c8b3
 800b094:	3fc68a28 	.word	0x3fc68a28
 800b098:	509f79fb 	.word	0x509f79fb
 800b09c:	3fd34413 	.word	0x3fd34413
 800b0a0:	0800ded0 	.word	0x0800ded0
 800b0a4:	0800df8d 	.word	0x0800df8d
 800b0a8:	7ff00000 	.word	0x7ff00000
 800b0ac:	0800df89 	.word	0x0800df89
 800b0b0:	0800df80 	.word	0x0800df80
 800b0b4:	0800de59 	.word	0x0800de59
 800b0b8:	3ff80000 	.word	0x3ff80000
 800b0bc:	0800e0f8 	.word	0x0800e0f8
 800b0c0:	0800dfe8 	.word	0x0800dfe8
 800b0c4:	2501      	movs	r5, #1
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	9306      	str	r3, [sp, #24]
 800b0ca:	9508      	str	r5, [sp, #32]
 800b0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2312      	movs	r3, #18
 800b0d8:	e7b0      	b.n	800b03c <_dtoa_r+0x26c>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	9308      	str	r3, [sp, #32]
 800b0de:	e7f5      	b.n	800b0cc <_dtoa_r+0x2fc>
 800b0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0e6:	e7b8      	b.n	800b05a <_dtoa_r+0x28a>
 800b0e8:	3101      	adds	r1, #1
 800b0ea:	6041      	str	r1, [r0, #4]
 800b0ec:	0052      	lsls	r2, r2, #1
 800b0ee:	e7b8      	b.n	800b062 <_dtoa_r+0x292>
 800b0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0f2:	9a01      	ldr	r2, [sp, #4]
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	2b0e      	cmp	r3, #14
 800b0fa:	f200 809d 	bhi.w	800b238 <_dtoa_r+0x468>
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	f000 809a 	beq.w	800b238 <_dtoa_r+0x468>
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	dd32      	ble.n	800b170 <_dtoa_r+0x3a0>
 800b10a:	4ab7      	ldr	r2, [pc, #732]	; (800b3e8 <_dtoa_r+0x618>)
 800b10c:	f003 030f 	and.w	r3, r3, #15
 800b110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b114:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	05d8      	lsls	r0, r3, #23
 800b11c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b120:	d516      	bpl.n	800b150 <_dtoa_r+0x380>
 800b122:	4bb2      	ldr	r3, [pc, #712]	; (800b3ec <_dtoa_r+0x61c>)
 800b124:	ec51 0b19 	vmov	r0, r1, d9
 800b128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b12c:	f7f5 fb8e 	bl	800084c <__aeabi_ddiv>
 800b130:	f007 070f 	and.w	r7, r7, #15
 800b134:	4682      	mov	sl, r0
 800b136:	468b      	mov	fp, r1
 800b138:	2503      	movs	r5, #3
 800b13a:	4eac      	ldr	r6, [pc, #688]	; (800b3ec <_dtoa_r+0x61c>)
 800b13c:	b957      	cbnz	r7, 800b154 <_dtoa_r+0x384>
 800b13e:	4642      	mov	r2, r8
 800b140:	464b      	mov	r3, r9
 800b142:	4650      	mov	r0, sl
 800b144:	4659      	mov	r1, fp
 800b146:	f7f5 fb81 	bl	800084c <__aeabi_ddiv>
 800b14a:	4682      	mov	sl, r0
 800b14c:	468b      	mov	fp, r1
 800b14e:	e028      	b.n	800b1a2 <_dtoa_r+0x3d2>
 800b150:	2502      	movs	r5, #2
 800b152:	e7f2      	b.n	800b13a <_dtoa_r+0x36a>
 800b154:	07f9      	lsls	r1, r7, #31
 800b156:	d508      	bpl.n	800b16a <_dtoa_r+0x39a>
 800b158:	4640      	mov	r0, r8
 800b15a:	4649      	mov	r1, r9
 800b15c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b160:	f7f5 fa4a 	bl	80005f8 <__aeabi_dmul>
 800b164:	3501      	adds	r5, #1
 800b166:	4680      	mov	r8, r0
 800b168:	4689      	mov	r9, r1
 800b16a:	107f      	asrs	r7, r7, #1
 800b16c:	3608      	adds	r6, #8
 800b16e:	e7e5      	b.n	800b13c <_dtoa_r+0x36c>
 800b170:	f000 809b 	beq.w	800b2aa <_dtoa_r+0x4da>
 800b174:	9b00      	ldr	r3, [sp, #0]
 800b176:	4f9d      	ldr	r7, [pc, #628]	; (800b3ec <_dtoa_r+0x61c>)
 800b178:	425e      	negs	r6, r3
 800b17a:	4b9b      	ldr	r3, [pc, #620]	; (800b3e8 <_dtoa_r+0x618>)
 800b17c:	f006 020f 	and.w	r2, r6, #15
 800b180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	ec51 0b19 	vmov	r0, r1, d9
 800b18c:	f7f5 fa34 	bl	80005f8 <__aeabi_dmul>
 800b190:	1136      	asrs	r6, r6, #4
 800b192:	4682      	mov	sl, r0
 800b194:	468b      	mov	fp, r1
 800b196:	2300      	movs	r3, #0
 800b198:	2502      	movs	r5, #2
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	d17a      	bne.n	800b294 <_dtoa_r+0x4c4>
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1d3      	bne.n	800b14a <_dtoa_r+0x37a>
 800b1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8082 	beq.w	800b2ae <_dtoa_r+0x4de>
 800b1aa:	4b91      	ldr	r3, [pc, #580]	; (800b3f0 <_dtoa_r+0x620>)
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	4659      	mov	r1, fp
 800b1b2:	f7f5 fc93 	bl	8000adc <__aeabi_dcmplt>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d079      	beq.n	800b2ae <_dtoa_r+0x4de>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d076      	beq.n	800b2ae <_dtoa_r+0x4de>
 800b1c0:	9b02      	ldr	r3, [sp, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dd36      	ble.n	800b234 <_dtoa_r+0x464>
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	4659      	mov	r1, fp
 800b1cc:	1e5f      	subs	r7, r3, #1
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	4b88      	ldr	r3, [pc, #544]	; (800b3f4 <_dtoa_r+0x624>)
 800b1d2:	f7f5 fa11 	bl	80005f8 <__aeabi_dmul>
 800b1d6:	9e02      	ldr	r6, [sp, #8]
 800b1d8:	4682      	mov	sl, r0
 800b1da:	468b      	mov	fp, r1
 800b1dc:	3501      	adds	r5, #1
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7f5 f9a0 	bl	8000524 <__aeabi_i2d>
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	465b      	mov	r3, fp
 800b1e8:	f7f5 fa06 	bl	80005f8 <__aeabi_dmul>
 800b1ec:	4b82      	ldr	r3, [pc, #520]	; (800b3f8 <_dtoa_r+0x628>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f7f5 f84c 	bl	800028c <__adddf3>
 800b1f4:	46d0      	mov	r8, sl
 800b1f6:	46d9      	mov	r9, fp
 800b1f8:	4682      	mov	sl, r0
 800b1fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b1fe:	2e00      	cmp	r6, #0
 800b200:	d158      	bne.n	800b2b4 <_dtoa_r+0x4e4>
 800b202:	4b7e      	ldr	r3, [pc, #504]	; (800b3fc <_dtoa_r+0x62c>)
 800b204:	2200      	movs	r2, #0
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 f83d 	bl	8000288 <__aeabi_dsub>
 800b20e:	4652      	mov	r2, sl
 800b210:	465b      	mov	r3, fp
 800b212:	4680      	mov	r8, r0
 800b214:	4689      	mov	r9, r1
 800b216:	f7f5 fc7f 	bl	8000b18 <__aeabi_dcmpgt>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	f040 8295 	bne.w	800b74a <_dtoa_r+0x97a>
 800b220:	4652      	mov	r2, sl
 800b222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b226:	4640      	mov	r0, r8
 800b228:	4649      	mov	r1, r9
 800b22a:	f7f5 fc57 	bl	8000adc <__aeabi_dcmplt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f040 8289 	bne.w	800b746 <_dtoa_r+0x976>
 800b234:	ec5b ab19 	vmov	sl, fp, d9
 800b238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f2c0 8148 	blt.w	800b4d0 <_dtoa_r+0x700>
 800b240:	9a00      	ldr	r2, [sp, #0]
 800b242:	2a0e      	cmp	r2, #14
 800b244:	f300 8144 	bgt.w	800b4d0 <_dtoa_r+0x700>
 800b248:	4b67      	ldr	r3, [pc, #412]	; (800b3e8 <_dtoa_r+0x618>)
 800b24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b24e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b254:	2b00      	cmp	r3, #0
 800b256:	f280 80d5 	bge.w	800b404 <_dtoa_r+0x634>
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f300 80d1 	bgt.w	800b404 <_dtoa_r+0x634>
 800b262:	f040 826f 	bne.w	800b744 <_dtoa_r+0x974>
 800b266:	4b65      	ldr	r3, [pc, #404]	; (800b3fc <_dtoa_r+0x62c>)
 800b268:	2200      	movs	r2, #0
 800b26a:	4640      	mov	r0, r8
 800b26c:	4649      	mov	r1, r9
 800b26e:	f7f5 f9c3 	bl	80005f8 <__aeabi_dmul>
 800b272:	4652      	mov	r2, sl
 800b274:	465b      	mov	r3, fp
 800b276:	f7f5 fc45 	bl	8000b04 <__aeabi_dcmpge>
 800b27a:	9e03      	ldr	r6, [sp, #12]
 800b27c:	4637      	mov	r7, r6
 800b27e:	2800      	cmp	r0, #0
 800b280:	f040 8245 	bne.w	800b70e <_dtoa_r+0x93e>
 800b284:	9d01      	ldr	r5, [sp, #4]
 800b286:	2331      	movs	r3, #49	; 0x31
 800b288:	f805 3b01 	strb.w	r3, [r5], #1
 800b28c:	9b00      	ldr	r3, [sp, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	e240      	b.n	800b716 <_dtoa_r+0x946>
 800b294:	07f2      	lsls	r2, r6, #31
 800b296:	d505      	bpl.n	800b2a4 <_dtoa_r+0x4d4>
 800b298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b29c:	f7f5 f9ac 	bl	80005f8 <__aeabi_dmul>
 800b2a0:	3501      	adds	r5, #1
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	1076      	asrs	r6, r6, #1
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	e777      	b.n	800b19a <_dtoa_r+0x3ca>
 800b2aa:	2502      	movs	r5, #2
 800b2ac:	e779      	b.n	800b1a2 <_dtoa_r+0x3d2>
 800b2ae:	9f00      	ldr	r7, [sp, #0]
 800b2b0:	9e03      	ldr	r6, [sp, #12]
 800b2b2:	e794      	b.n	800b1de <_dtoa_r+0x40e>
 800b2b4:	9901      	ldr	r1, [sp, #4]
 800b2b6:	4b4c      	ldr	r3, [pc, #304]	; (800b3e8 <_dtoa_r+0x618>)
 800b2b8:	4431      	add	r1, r6
 800b2ba:	910d      	str	r1, [sp, #52]	; 0x34
 800b2bc:	9908      	ldr	r1, [sp, #32]
 800b2be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	d043      	beq.n	800b352 <_dtoa_r+0x582>
 800b2ca:	494d      	ldr	r1, [pc, #308]	; (800b400 <_dtoa_r+0x630>)
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	f7f5 fabd 	bl	800084c <__aeabi_ddiv>
 800b2d2:	4652      	mov	r2, sl
 800b2d4:	465b      	mov	r3, fp
 800b2d6:	f7f4 ffd7 	bl	8000288 <__aeabi_dsub>
 800b2da:	9d01      	ldr	r5, [sp, #4]
 800b2dc:	4682      	mov	sl, r0
 800b2de:	468b      	mov	fp, r1
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	f7f5 fc38 	bl	8000b58 <__aeabi_d2iz>
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	f7f5 f91b 	bl	8000524 <__aeabi_i2d>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	f7f4 ffc7 	bl	8000288 <__aeabi_dsub>
 800b2fa:	3630      	adds	r6, #48	; 0x30
 800b2fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b300:	4652      	mov	r2, sl
 800b302:	465b      	mov	r3, fp
 800b304:	4680      	mov	r8, r0
 800b306:	4689      	mov	r9, r1
 800b308:	f7f5 fbe8 	bl	8000adc <__aeabi_dcmplt>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d163      	bne.n	800b3d8 <_dtoa_r+0x608>
 800b310:	4642      	mov	r2, r8
 800b312:	464b      	mov	r3, r9
 800b314:	4936      	ldr	r1, [pc, #216]	; (800b3f0 <_dtoa_r+0x620>)
 800b316:	2000      	movs	r0, #0
 800b318:	f7f4 ffb6 	bl	8000288 <__aeabi_dsub>
 800b31c:	4652      	mov	r2, sl
 800b31e:	465b      	mov	r3, fp
 800b320:	f7f5 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800b324:	2800      	cmp	r0, #0
 800b326:	f040 80b5 	bne.w	800b494 <_dtoa_r+0x6c4>
 800b32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b32c:	429d      	cmp	r5, r3
 800b32e:	d081      	beq.n	800b234 <_dtoa_r+0x464>
 800b330:	4b30      	ldr	r3, [pc, #192]	; (800b3f4 <_dtoa_r+0x624>)
 800b332:	2200      	movs	r2, #0
 800b334:	4650      	mov	r0, sl
 800b336:	4659      	mov	r1, fp
 800b338:	f7f5 f95e 	bl	80005f8 <__aeabi_dmul>
 800b33c:	4b2d      	ldr	r3, [pc, #180]	; (800b3f4 <_dtoa_r+0x624>)
 800b33e:	4682      	mov	sl, r0
 800b340:	468b      	mov	fp, r1
 800b342:	4640      	mov	r0, r8
 800b344:	4649      	mov	r1, r9
 800b346:	2200      	movs	r2, #0
 800b348:	f7f5 f956 	bl	80005f8 <__aeabi_dmul>
 800b34c:	4680      	mov	r8, r0
 800b34e:	4689      	mov	r9, r1
 800b350:	e7c6      	b.n	800b2e0 <_dtoa_r+0x510>
 800b352:	4650      	mov	r0, sl
 800b354:	4659      	mov	r1, fp
 800b356:	f7f5 f94f 	bl	80005f8 <__aeabi_dmul>
 800b35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b35c:	9d01      	ldr	r5, [sp, #4]
 800b35e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b360:	4682      	mov	sl, r0
 800b362:	468b      	mov	fp, r1
 800b364:	4649      	mov	r1, r9
 800b366:	4640      	mov	r0, r8
 800b368:	f7f5 fbf6 	bl	8000b58 <__aeabi_d2iz>
 800b36c:	4606      	mov	r6, r0
 800b36e:	f7f5 f8d9 	bl	8000524 <__aeabi_i2d>
 800b372:	3630      	adds	r6, #48	; 0x30
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4640      	mov	r0, r8
 800b37a:	4649      	mov	r1, r9
 800b37c:	f7f4 ff84 	bl	8000288 <__aeabi_dsub>
 800b380:	f805 6b01 	strb.w	r6, [r5], #1
 800b384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b386:	429d      	cmp	r5, r3
 800b388:	4680      	mov	r8, r0
 800b38a:	4689      	mov	r9, r1
 800b38c:	f04f 0200 	mov.w	r2, #0
 800b390:	d124      	bne.n	800b3dc <_dtoa_r+0x60c>
 800b392:	4b1b      	ldr	r3, [pc, #108]	; (800b400 <_dtoa_r+0x630>)
 800b394:	4650      	mov	r0, sl
 800b396:	4659      	mov	r1, fp
 800b398:	f7f4 ff78 	bl	800028c <__adddf3>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	f7f5 fbb8 	bl	8000b18 <__aeabi_dcmpgt>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d173      	bne.n	800b494 <_dtoa_r+0x6c4>
 800b3ac:	4652      	mov	r2, sl
 800b3ae:	465b      	mov	r3, fp
 800b3b0:	4913      	ldr	r1, [pc, #76]	; (800b400 <_dtoa_r+0x630>)
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	f7f4 ff68 	bl	8000288 <__aeabi_dsub>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4640      	mov	r0, r8
 800b3be:	4649      	mov	r1, r9
 800b3c0:	f7f5 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	f43f af35 	beq.w	800b234 <_dtoa_r+0x464>
 800b3ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3cc:	1e6b      	subs	r3, r5, #1
 800b3ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3d4:	2b30      	cmp	r3, #48	; 0x30
 800b3d6:	d0f8      	beq.n	800b3ca <_dtoa_r+0x5fa>
 800b3d8:	9700      	str	r7, [sp, #0]
 800b3da:	e049      	b.n	800b470 <_dtoa_r+0x6a0>
 800b3dc:	4b05      	ldr	r3, [pc, #20]	; (800b3f4 <_dtoa_r+0x624>)
 800b3de:	f7f5 f90b 	bl	80005f8 <__aeabi_dmul>
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	4689      	mov	r9, r1
 800b3e6:	e7bd      	b.n	800b364 <_dtoa_r+0x594>
 800b3e8:	0800e0f8 	.word	0x0800e0f8
 800b3ec:	0800e0d0 	.word	0x0800e0d0
 800b3f0:	3ff00000 	.word	0x3ff00000
 800b3f4:	40240000 	.word	0x40240000
 800b3f8:	401c0000 	.word	0x401c0000
 800b3fc:	40140000 	.word	0x40140000
 800b400:	3fe00000 	.word	0x3fe00000
 800b404:	9d01      	ldr	r5, [sp, #4]
 800b406:	4656      	mov	r6, sl
 800b408:	465f      	mov	r7, fp
 800b40a:	4642      	mov	r2, r8
 800b40c:	464b      	mov	r3, r9
 800b40e:	4630      	mov	r0, r6
 800b410:	4639      	mov	r1, r7
 800b412:	f7f5 fa1b 	bl	800084c <__aeabi_ddiv>
 800b416:	f7f5 fb9f 	bl	8000b58 <__aeabi_d2iz>
 800b41a:	4682      	mov	sl, r0
 800b41c:	f7f5 f882 	bl	8000524 <__aeabi_i2d>
 800b420:	4642      	mov	r2, r8
 800b422:	464b      	mov	r3, r9
 800b424:	f7f5 f8e8 	bl	80005f8 <__aeabi_dmul>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4630      	mov	r0, r6
 800b42e:	4639      	mov	r1, r7
 800b430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b434:	f7f4 ff28 	bl	8000288 <__aeabi_dsub>
 800b438:	f805 6b01 	strb.w	r6, [r5], #1
 800b43c:	9e01      	ldr	r6, [sp, #4]
 800b43e:	9f03      	ldr	r7, [sp, #12]
 800b440:	1bae      	subs	r6, r5, r6
 800b442:	42b7      	cmp	r7, r6
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	d135      	bne.n	800b4b6 <_dtoa_r+0x6e6>
 800b44a:	f7f4 ff1f 	bl	800028c <__adddf3>
 800b44e:	4642      	mov	r2, r8
 800b450:	464b      	mov	r3, r9
 800b452:	4606      	mov	r6, r0
 800b454:	460f      	mov	r7, r1
 800b456:	f7f5 fb5f 	bl	8000b18 <__aeabi_dcmpgt>
 800b45a:	b9d0      	cbnz	r0, 800b492 <_dtoa_r+0x6c2>
 800b45c:	4642      	mov	r2, r8
 800b45e:	464b      	mov	r3, r9
 800b460:	4630      	mov	r0, r6
 800b462:	4639      	mov	r1, r7
 800b464:	f7f5 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 800b468:	b110      	cbz	r0, 800b470 <_dtoa_r+0x6a0>
 800b46a:	f01a 0f01 	tst.w	sl, #1
 800b46e:	d110      	bne.n	800b492 <_dtoa_r+0x6c2>
 800b470:	4620      	mov	r0, r4
 800b472:	ee18 1a10 	vmov	r1, s16
 800b476:	f000 fe87 	bl	800c188 <_Bfree>
 800b47a:	2300      	movs	r3, #0
 800b47c:	9800      	ldr	r0, [sp, #0]
 800b47e:	702b      	strb	r3, [r5, #0]
 800b480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b482:	3001      	adds	r0, #1
 800b484:	6018      	str	r0, [r3, #0]
 800b486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f43f acf1 	beq.w	800ae70 <_dtoa_r+0xa0>
 800b48e:	601d      	str	r5, [r3, #0]
 800b490:	e4ee      	b.n	800ae70 <_dtoa_r+0xa0>
 800b492:	9f00      	ldr	r7, [sp, #0]
 800b494:	462b      	mov	r3, r5
 800b496:	461d      	mov	r5, r3
 800b498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b49c:	2a39      	cmp	r2, #57	; 0x39
 800b49e:	d106      	bne.n	800b4ae <_dtoa_r+0x6de>
 800b4a0:	9a01      	ldr	r2, [sp, #4]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d1f7      	bne.n	800b496 <_dtoa_r+0x6c6>
 800b4a6:	9901      	ldr	r1, [sp, #4]
 800b4a8:	2230      	movs	r2, #48	; 0x30
 800b4aa:	3701      	adds	r7, #1
 800b4ac:	700a      	strb	r2, [r1, #0]
 800b4ae:	781a      	ldrb	r2, [r3, #0]
 800b4b0:	3201      	adds	r2, #1
 800b4b2:	701a      	strb	r2, [r3, #0]
 800b4b4:	e790      	b.n	800b3d8 <_dtoa_r+0x608>
 800b4b6:	4ba6      	ldr	r3, [pc, #664]	; (800b750 <_dtoa_r+0x980>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f7f5 f89d 	bl	80005f8 <__aeabi_dmul>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	f7f5 faff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d09d      	beq.n	800b40a <_dtoa_r+0x63a>
 800b4ce:	e7cf      	b.n	800b470 <_dtoa_r+0x6a0>
 800b4d0:	9a08      	ldr	r2, [sp, #32]
 800b4d2:	2a00      	cmp	r2, #0
 800b4d4:	f000 80d7 	beq.w	800b686 <_dtoa_r+0x8b6>
 800b4d8:	9a06      	ldr	r2, [sp, #24]
 800b4da:	2a01      	cmp	r2, #1
 800b4dc:	f300 80ba 	bgt.w	800b654 <_dtoa_r+0x884>
 800b4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	f000 80b2 	beq.w	800b64c <_dtoa_r+0x87c>
 800b4e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4ec:	9e07      	ldr	r6, [sp, #28]
 800b4ee:	9d04      	ldr	r5, [sp, #16]
 800b4f0:	9a04      	ldr	r2, [sp, #16]
 800b4f2:	441a      	add	r2, r3
 800b4f4:	9204      	str	r2, [sp, #16]
 800b4f6:	9a05      	ldr	r2, [sp, #20]
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	441a      	add	r2, r3
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	9205      	str	r2, [sp, #20]
 800b500:	f000 ff44 	bl	800c38c <__i2b>
 800b504:	4607      	mov	r7, r0
 800b506:	2d00      	cmp	r5, #0
 800b508:	dd0c      	ble.n	800b524 <_dtoa_r+0x754>
 800b50a:	9b05      	ldr	r3, [sp, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	dd09      	ble.n	800b524 <_dtoa_r+0x754>
 800b510:	42ab      	cmp	r3, r5
 800b512:	9a04      	ldr	r2, [sp, #16]
 800b514:	bfa8      	it	ge
 800b516:	462b      	movge	r3, r5
 800b518:	1ad2      	subs	r2, r2, r3
 800b51a:	9204      	str	r2, [sp, #16]
 800b51c:	9a05      	ldr	r2, [sp, #20]
 800b51e:	1aed      	subs	r5, r5, r3
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	9b07      	ldr	r3, [sp, #28]
 800b526:	b31b      	cbz	r3, 800b570 <_dtoa_r+0x7a0>
 800b528:	9b08      	ldr	r3, [sp, #32]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 80af 	beq.w	800b68e <_dtoa_r+0x8be>
 800b530:	2e00      	cmp	r6, #0
 800b532:	dd13      	ble.n	800b55c <_dtoa_r+0x78c>
 800b534:	4639      	mov	r1, r7
 800b536:	4632      	mov	r2, r6
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 ffe7 	bl	800c50c <__pow5mult>
 800b53e:	ee18 2a10 	vmov	r2, s16
 800b542:	4601      	mov	r1, r0
 800b544:	4607      	mov	r7, r0
 800b546:	4620      	mov	r0, r4
 800b548:	f000 ff36 	bl	800c3b8 <__multiply>
 800b54c:	ee18 1a10 	vmov	r1, s16
 800b550:	4680      	mov	r8, r0
 800b552:	4620      	mov	r0, r4
 800b554:	f000 fe18 	bl	800c188 <_Bfree>
 800b558:	ee08 8a10 	vmov	s16, r8
 800b55c:	9b07      	ldr	r3, [sp, #28]
 800b55e:	1b9a      	subs	r2, r3, r6
 800b560:	d006      	beq.n	800b570 <_dtoa_r+0x7a0>
 800b562:	ee18 1a10 	vmov	r1, s16
 800b566:	4620      	mov	r0, r4
 800b568:	f000 ffd0 	bl	800c50c <__pow5mult>
 800b56c:	ee08 0a10 	vmov	s16, r0
 800b570:	2101      	movs	r1, #1
 800b572:	4620      	mov	r0, r4
 800b574:	f000 ff0a 	bl	800c38c <__i2b>
 800b578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	4606      	mov	r6, r0
 800b57e:	f340 8088 	ble.w	800b692 <_dtoa_r+0x8c2>
 800b582:	461a      	mov	r2, r3
 800b584:	4601      	mov	r1, r0
 800b586:	4620      	mov	r0, r4
 800b588:	f000 ffc0 	bl	800c50c <__pow5mult>
 800b58c:	9b06      	ldr	r3, [sp, #24]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	4606      	mov	r6, r0
 800b592:	f340 8081 	ble.w	800b698 <_dtoa_r+0x8c8>
 800b596:	f04f 0800 	mov.w	r8, #0
 800b59a:	6933      	ldr	r3, [r6, #16]
 800b59c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5a0:	6918      	ldr	r0, [r3, #16]
 800b5a2:	f000 fea3 	bl	800c2ec <__hi0bits>
 800b5a6:	f1c0 0020 	rsb	r0, r0, #32
 800b5aa:	9b05      	ldr	r3, [sp, #20]
 800b5ac:	4418      	add	r0, r3
 800b5ae:	f010 001f 	ands.w	r0, r0, #31
 800b5b2:	f000 8092 	beq.w	800b6da <_dtoa_r+0x90a>
 800b5b6:	f1c0 0320 	rsb	r3, r0, #32
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	f340 808a 	ble.w	800b6d4 <_dtoa_r+0x904>
 800b5c0:	f1c0 001c 	rsb	r0, r0, #28
 800b5c4:	9b04      	ldr	r3, [sp, #16]
 800b5c6:	4403      	add	r3, r0
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	9b05      	ldr	r3, [sp, #20]
 800b5cc:	4403      	add	r3, r0
 800b5ce:	4405      	add	r5, r0
 800b5d0:	9305      	str	r3, [sp, #20]
 800b5d2:	9b04      	ldr	r3, [sp, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	dd07      	ble.n	800b5e8 <_dtoa_r+0x818>
 800b5d8:	ee18 1a10 	vmov	r1, s16
 800b5dc:	461a      	mov	r2, r3
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 ffee 	bl	800c5c0 <__lshift>
 800b5e4:	ee08 0a10 	vmov	s16, r0
 800b5e8:	9b05      	ldr	r3, [sp, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	dd05      	ble.n	800b5fa <_dtoa_r+0x82a>
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 ffe4 	bl	800c5c0 <__lshift>
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d06e      	beq.n	800b6de <_dtoa_r+0x90e>
 800b600:	ee18 0a10 	vmov	r0, s16
 800b604:	4631      	mov	r1, r6
 800b606:	f001 f84b 	bl	800c6a0 <__mcmp>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	da67      	bge.n	800b6de <_dtoa_r+0x90e>
 800b60e:	9b00      	ldr	r3, [sp, #0]
 800b610:	3b01      	subs	r3, #1
 800b612:	ee18 1a10 	vmov	r1, s16
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	220a      	movs	r2, #10
 800b61a:	2300      	movs	r3, #0
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fdd5 	bl	800c1cc <__multadd>
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	ee08 0a10 	vmov	s16, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 81b1 	beq.w	800b990 <_dtoa_r+0xbc0>
 800b62e:	2300      	movs	r3, #0
 800b630:	4639      	mov	r1, r7
 800b632:	220a      	movs	r2, #10
 800b634:	4620      	mov	r0, r4
 800b636:	f000 fdc9 	bl	800c1cc <__multadd>
 800b63a:	9b02      	ldr	r3, [sp, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	4607      	mov	r7, r0
 800b640:	f300 808e 	bgt.w	800b760 <_dtoa_r+0x990>
 800b644:	9b06      	ldr	r3, [sp, #24]
 800b646:	2b02      	cmp	r3, #2
 800b648:	dc51      	bgt.n	800b6ee <_dtoa_r+0x91e>
 800b64a:	e089      	b.n	800b760 <_dtoa_r+0x990>
 800b64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b64e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b652:	e74b      	b.n	800b4ec <_dtoa_r+0x71c>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	1e5e      	subs	r6, r3, #1
 800b658:	9b07      	ldr	r3, [sp, #28]
 800b65a:	42b3      	cmp	r3, r6
 800b65c:	bfbf      	itttt	lt
 800b65e:	9b07      	ldrlt	r3, [sp, #28]
 800b660:	9607      	strlt	r6, [sp, #28]
 800b662:	1af2      	sublt	r2, r6, r3
 800b664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b666:	bfb6      	itet	lt
 800b668:	189b      	addlt	r3, r3, r2
 800b66a:	1b9e      	subge	r6, r3, r6
 800b66c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	bfb8      	it	lt
 800b672:	2600      	movlt	r6, #0
 800b674:	2b00      	cmp	r3, #0
 800b676:	bfb7      	itett	lt
 800b678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b67c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b680:	1a9d      	sublt	r5, r3, r2
 800b682:	2300      	movlt	r3, #0
 800b684:	e734      	b.n	800b4f0 <_dtoa_r+0x720>
 800b686:	9e07      	ldr	r6, [sp, #28]
 800b688:	9d04      	ldr	r5, [sp, #16]
 800b68a:	9f08      	ldr	r7, [sp, #32]
 800b68c:	e73b      	b.n	800b506 <_dtoa_r+0x736>
 800b68e:	9a07      	ldr	r2, [sp, #28]
 800b690:	e767      	b.n	800b562 <_dtoa_r+0x792>
 800b692:	9b06      	ldr	r3, [sp, #24]
 800b694:	2b01      	cmp	r3, #1
 800b696:	dc18      	bgt.n	800b6ca <_dtoa_r+0x8fa>
 800b698:	f1ba 0f00 	cmp.w	sl, #0
 800b69c:	d115      	bne.n	800b6ca <_dtoa_r+0x8fa>
 800b69e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6a2:	b993      	cbnz	r3, 800b6ca <_dtoa_r+0x8fa>
 800b6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6a8:	0d1b      	lsrs	r3, r3, #20
 800b6aa:	051b      	lsls	r3, r3, #20
 800b6ac:	b183      	cbz	r3, 800b6d0 <_dtoa_r+0x900>
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	9304      	str	r3, [sp, #16]
 800b6b4:	9b05      	ldr	r3, [sp, #20]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	9305      	str	r3, [sp, #20]
 800b6ba:	f04f 0801 	mov.w	r8, #1
 800b6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	f47f af6a 	bne.w	800b59a <_dtoa_r+0x7ca>
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	e76f      	b.n	800b5aa <_dtoa_r+0x7da>
 800b6ca:	f04f 0800 	mov.w	r8, #0
 800b6ce:	e7f6      	b.n	800b6be <_dtoa_r+0x8ee>
 800b6d0:	4698      	mov	r8, r3
 800b6d2:	e7f4      	b.n	800b6be <_dtoa_r+0x8ee>
 800b6d4:	f43f af7d 	beq.w	800b5d2 <_dtoa_r+0x802>
 800b6d8:	4618      	mov	r0, r3
 800b6da:	301c      	adds	r0, #28
 800b6dc:	e772      	b.n	800b5c4 <_dtoa_r+0x7f4>
 800b6de:	9b03      	ldr	r3, [sp, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dc37      	bgt.n	800b754 <_dtoa_r+0x984>
 800b6e4:	9b06      	ldr	r3, [sp, #24]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	dd34      	ble.n	800b754 <_dtoa_r+0x984>
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	9302      	str	r3, [sp, #8]
 800b6ee:	9b02      	ldr	r3, [sp, #8]
 800b6f0:	b96b      	cbnz	r3, 800b70e <_dtoa_r+0x93e>
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	2205      	movs	r2, #5
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 fd68 	bl	800c1cc <__multadd>
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	4606      	mov	r6, r0
 800b700:	ee18 0a10 	vmov	r0, s16
 800b704:	f000 ffcc 	bl	800c6a0 <__mcmp>
 800b708:	2800      	cmp	r0, #0
 800b70a:	f73f adbb 	bgt.w	800b284 <_dtoa_r+0x4b4>
 800b70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b710:	9d01      	ldr	r5, [sp, #4]
 800b712:	43db      	mvns	r3, r3
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	f04f 0800 	mov.w	r8, #0
 800b71a:	4631      	mov	r1, r6
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fd33 	bl	800c188 <_Bfree>
 800b722:	2f00      	cmp	r7, #0
 800b724:	f43f aea4 	beq.w	800b470 <_dtoa_r+0x6a0>
 800b728:	f1b8 0f00 	cmp.w	r8, #0
 800b72c:	d005      	beq.n	800b73a <_dtoa_r+0x96a>
 800b72e:	45b8      	cmp	r8, r7
 800b730:	d003      	beq.n	800b73a <_dtoa_r+0x96a>
 800b732:	4641      	mov	r1, r8
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fd27 	bl	800c188 <_Bfree>
 800b73a:	4639      	mov	r1, r7
 800b73c:	4620      	mov	r0, r4
 800b73e:	f000 fd23 	bl	800c188 <_Bfree>
 800b742:	e695      	b.n	800b470 <_dtoa_r+0x6a0>
 800b744:	2600      	movs	r6, #0
 800b746:	4637      	mov	r7, r6
 800b748:	e7e1      	b.n	800b70e <_dtoa_r+0x93e>
 800b74a:	9700      	str	r7, [sp, #0]
 800b74c:	4637      	mov	r7, r6
 800b74e:	e599      	b.n	800b284 <_dtoa_r+0x4b4>
 800b750:	40240000 	.word	0x40240000
 800b754:	9b08      	ldr	r3, [sp, #32]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 80ca 	beq.w	800b8f0 <_dtoa_r+0xb20>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	9302      	str	r3, [sp, #8]
 800b760:	2d00      	cmp	r5, #0
 800b762:	dd05      	ble.n	800b770 <_dtoa_r+0x9a0>
 800b764:	4639      	mov	r1, r7
 800b766:	462a      	mov	r2, r5
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 ff29 	bl	800c5c0 <__lshift>
 800b76e:	4607      	mov	r7, r0
 800b770:	f1b8 0f00 	cmp.w	r8, #0
 800b774:	d05b      	beq.n	800b82e <_dtoa_r+0xa5e>
 800b776:	6879      	ldr	r1, [r7, #4]
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 fcc5 	bl	800c108 <_Balloc>
 800b77e:	4605      	mov	r5, r0
 800b780:	b928      	cbnz	r0, 800b78e <_dtoa_r+0x9be>
 800b782:	4b87      	ldr	r3, [pc, #540]	; (800b9a0 <_dtoa_r+0xbd0>)
 800b784:	4602      	mov	r2, r0
 800b786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b78a:	f7ff bb3b 	b.w	800ae04 <_dtoa_r+0x34>
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	3202      	adds	r2, #2
 800b792:	0092      	lsls	r2, r2, #2
 800b794:	f107 010c 	add.w	r1, r7, #12
 800b798:	300c      	adds	r0, #12
 800b79a:	f000 fca7 	bl	800c0ec <memcpy>
 800b79e:	2201      	movs	r2, #1
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 ff0c 	bl	800c5c0 <__lshift>
 800b7a8:	9b01      	ldr	r3, [sp, #4]
 800b7aa:	f103 0901 	add.w	r9, r3, #1
 800b7ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	9305      	str	r3, [sp, #20]
 800b7b6:	f00a 0301 	and.w	r3, sl, #1
 800b7ba:	46b8      	mov	r8, r7
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	4607      	mov	r7, r0
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	ee18 0a10 	vmov	r0, s16
 800b7c6:	f7ff fa77 	bl	800acb8 <quorem>
 800b7ca:	4641      	mov	r1, r8
 800b7cc:	9002      	str	r0, [sp, #8]
 800b7ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7d2:	ee18 0a10 	vmov	r0, s16
 800b7d6:	f000 ff63 	bl	800c6a0 <__mcmp>
 800b7da:	463a      	mov	r2, r7
 800b7dc:	9003      	str	r0, [sp, #12]
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f000 ff79 	bl	800c6d8 <__mdiff>
 800b7e6:	68c2      	ldr	r2, [r0, #12]
 800b7e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	bb02      	cbnz	r2, 800b832 <_dtoa_r+0xa62>
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	ee18 0a10 	vmov	r0, s16
 800b7f6:	f000 ff53 	bl	800c6a0 <__mcmp>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	4620      	mov	r0, r4
 800b800:	9207      	str	r2, [sp, #28]
 800b802:	f000 fcc1 	bl	800c188 <_Bfree>
 800b806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b80a:	ea43 0102 	orr.w	r1, r3, r2
 800b80e:	9b04      	ldr	r3, [sp, #16]
 800b810:	430b      	orrs	r3, r1
 800b812:	464d      	mov	r5, r9
 800b814:	d10f      	bne.n	800b836 <_dtoa_r+0xa66>
 800b816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b81a:	d02a      	beq.n	800b872 <_dtoa_r+0xaa2>
 800b81c:	9b03      	ldr	r3, [sp, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dd02      	ble.n	800b828 <_dtoa_r+0xa58>
 800b822:	9b02      	ldr	r3, [sp, #8]
 800b824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b828:	f88b a000 	strb.w	sl, [fp]
 800b82c:	e775      	b.n	800b71a <_dtoa_r+0x94a>
 800b82e:	4638      	mov	r0, r7
 800b830:	e7ba      	b.n	800b7a8 <_dtoa_r+0x9d8>
 800b832:	2201      	movs	r2, #1
 800b834:	e7e2      	b.n	800b7fc <_dtoa_r+0xa2c>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	db04      	blt.n	800b846 <_dtoa_r+0xa76>
 800b83c:	9906      	ldr	r1, [sp, #24]
 800b83e:	430b      	orrs	r3, r1
 800b840:	9904      	ldr	r1, [sp, #16]
 800b842:	430b      	orrs	r3, r1
 800b844:	d122      	bne.n	800b88c <_dtoa_r+0xabc>
 800b846:	2a00      	cmp	r2, #0
 800b848:	ddee      	ble.n	800b828 <_dtoa_r+0xa58>
 800b84a:	ee18 1a10 	vmov	r1, s16
 800b84e:	2201      	movs	r2, #1
 800b850:	4620      	mov	r0, r4
 800b852:	f000 feb5 	bl	800c5c0 <__lshift>
 800b856:	4631      	mov	r1, r6
 800b858:	ee08 0a10 	vmov	s16, r0
 800b85c:	f000 ff20 	bl	800c6a0 <__mcmp>
 800b860:	2800      	cmp	r0, #0
 800b862:	dc03      	bgt.n	800b86c <_dtoa_r+0xa9c>
 800b864:	d1e0      	bne.n	800b828 <_dtoa_r+0xa58>
 800b866:	f01a 0f01 	tst.w	sl, #1
 800b86a:	d0dd      	beq.n	800b828 <_dtoa_r+0xa58>
 800b86c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b870:	d1d7      	bne.n	800b822 <_dtoa_r+0xa52>
 800b872:	2339      	movs	r3, #57	; 0x39
 800b874:	f88b 3000 	strb.w	r3, [fp]
 800b878:	462b      	mov	r3, r5
 800b87a:	461d      	mov	r5, r3
 800b87c:	3b01      	subs	r3, #1
 800b87e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b882:	2a39      	cmp	r2, #57	; 0x39
 800b884:	d071      	beq.n	800b96a <_dtoa_r+0xb9a>
 800b886:	3201      	adds	r2, #1
 800b888:	701a      	strb	r2, [r3, #0]
 800b88a:	e746      	b.n	800b71a <_dtoa_r+0x94a>
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	dd07      	ble.n	800b8a0 <_dtoa_r+0xad0>
 800b890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b894:	d0ed      	beq.n	800b872 <_dtoa_r+0xaa2>
 800b896:	f10a 0301 	add.w	r3, sl, #1
 800b89a:	f88b 3000 	strb.w	r3, [fp]
 800b89e:	e73c      	b.n	800b71a <_dtoa_r+0x94a>
 800b8a0:	9b05      	ldr	r3, [sp, #20]
 800b8a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b8a6:	4599      	cmp	r9, r3
 800b8a8:	d047      	beq.n	800b93a <_dtoa_r+0xb6a>
 800b8aa:	ee18 1a10 	vmov	r1, s16
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 fc8a 	bl	800c1cc <__multadd>
 800b8b8:	45b8      	cmp	r8, r7
 800b8ba:	ee08 0a10 	vmov	s16, r0
 800b8be:	f04f 0300 	mov.w	r3, #0
 800b8c2:	f04f 020a 	mov.w	r2, #10
 800b8c6:	4641      	mov	r1, r8
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	d106      	bne.n	800b8da <_dtoa_r+0xb0a>
 800b8cc:	f000 fc7e 	bl	800c1cc <__multadd>
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	f109 0901 	add.w	r9, r9, #1
 800b8d8:	e772      	b.n	800b7c0 <_dtoa_r+0x9f0>
 800b8da:	f000 fc77 	bl	800c1cc <__multadd>
 800b8de:	4639      	mov	r1, r7
 800b8e0:	4680      	mov	r8, r0
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 fc70 	bl	800c1cc <__multadd>
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	e7f1      	b.n	800b8d4 <_dtoa_r+0xb04>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	9302      	str	r3, [sp, #8]
 800b8f4:	9d01      	ldr	r5, [sp, #4]
 800b8f6:	ee18 0a10 	vmov	r0, s16
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	f7ff f9dc 	bl	800acb8 <quorem>
 800b900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b904:	9b01      	ldr	r3, [sp, #4]
 800b906:	f805 ab01 	strb.w	sl, [r5], #1
 800b90a:	1aea      	subs	r2, r5, r3
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	4293      	cmp	r3, r2
 800b910:	dd09      	ble.n	800b926 <_dtoa_r+0xb56>
 800b912:	ee18 1a10 	vmov	r1, s16
 800b916:	2300      	movs	r3, #0
 800b918:	220a      	movs	r2, #10
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 fc56 	bl	800c1cc <__multadd>
 800b920:	ee08 0a10 	vmov	s16, r0
 800b924:	e7e7      	b.n	800b8f6 <_dtoa_r+0xb26>
 800b926:	9b02      	ldr	r3, [sp, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfc8      	it	gt
 800b92c:	461d      	movgt	r5, r3
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	bfd8      	it	le
 800b932:	2501      	movle	r5, #1
 800b934:	441d      	add	r5, r3
 800b936:	f04f 0800 	mov.w	r8, #0
 800b93a:	ee18 1a10 	vmov	r1, s16
 800b93e:	2201      	movs	r2, #1
 800b940:	4620      	mov	r0, r4
 800b942:	f000 fe3d 	bl	800c5c0 <__lshift>
 800b946:	4631      	mov	r1, r6
 800b948:	ee08 0a10 	vmov	s16, r0
 800b94c:	f000 fea8 	bl	800c6a0 <__mcmp>
 800b950:	2800      	cmp	r0, #0
 800b952:	dc91      	bgt.n	800b878 <_dtoa_r+0xaa8>
 800b954:	d102      	bne.n	800b95c <_dtoa_r+0xb8c>
 800b956:	f01a 0f01 	tst.w	sl, #1
 800b95a:	d18d      	bne.n	800b878 <_dtoa_r+0xaa8>
 800b95c:	462b      	mov	r3, r5
 800b95e:	461d      	mov	r5, r3
 800b960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b964:	2a30      	cmp	r2, #48	; 0x30
 800b966:	d0fa      	beq.n	800b95e <_dtoa_r+0xb8e>
 800b968:	e6d7      	b.n	800b71a <_dtoa_r+0x94a>
 800b96a:	9a01      	ldr	r2, [sp, #4]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d184      	bne.n	800b87a <_dtoa_r+0xaaa>
 800b970:	9b00      	ldr	r3, [sp, #0]
 800b972:	3301      	adds	r3, #1
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	2331      	movs	r3, #49	; 0x31
 800b978:	7013      	strb	r3, [r2, #0]
 800b97a:	e6ce      	b.n	800b71a <_dtoa_r+0x94a>
 800b97c:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <_dtoa_r+0xbd4>)
 800b97e:	f7ff ba95 	b.w	800aeac <_dtoa_r+0xdc>
 800b982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b984:	2b00      	cmp	r3, #0
 800b986:	f47f aa6e 	bne.w	800ae66 <_dtoa_r+0x96>
 800b98a:	4b07      	ldr	r3, [pc, #28]	; (800b9a8 <_dtoa_r+0xbd8>)
 800b98c:	f7ff ba8e 	b.w	800aeac <_dtoa_r+0xdc>
 800b990:	9b02      	ldr	r3, [sp, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	dcae      	bgt.n	800b8f4 <_dtoa_r+0xb24>
 800b996:	9b06      	ldr	r3, [sp, #24]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	f73f aea8 	bgt.w	800b6ee <_dtoa_r+0x91e>
 800b99e:	e7a9      	b.n	800b8f4 <_dtoa_r+0xb24>
 800b9a0:	0800dfe8 	.word	0x0800dfe8
 800b9a4:	0800de58 	.word	0x0800de58
 800b9a8:	0800df80 	.word	0x0800df80

0800b9ac <fiprintf>:
 800b9ac:	b40e      	push	{r1, r2, r3}
 800b9ae:	b503      	push	{r0, r1, lr}
 800b9b0:	4601      	mov	r1, r0
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	4805      	ldr	r0, [pc, #20]	; (800b9cc <fiprintf+0x20>)
 800b9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ba:	6800      	ldr	r0, [r0, #0]
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	f001 fae1 	bl	800cf84 <_vfiprintf_r>
 800b9c2:	b002      	add	sp, #8
 800b9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c8:	b003      	add	sp, #12
 800b9ca:	4770      	bx	lr
 800b9cc:	20000020 	.word	0x20000020

0800b9d0 <rshift>:
 800b9d0:	6903      	ldr	r3, [r0, #16]
 800b9d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9de:	f100 0414 	add.w	r4, r0, #20
 800b9e2:	dd45      	ble.n	800ba70 <rshift+0xa0>
 800b9e4:	f011 011f 	ands.w	r1, r1, #31
 800b9e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9f0:	d10c      	bne.n	800ba0c <rshift+0x3c>
 800b9f2:	f100 0710 	add.w	r7, r0, #16
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	42b1      	cmp	r1, r6
 800b9fa:	d334      	bcc.n	800ba66 <rshift+0x96>
 800b9fc:	1a9b      	subs	r3, r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	1eea      	subs	r2, r5, #3
 800ba02:	4296      	cmp	r6, r2
 800ba04:	bf38      	it	cc
 800ba06:	2300      	movcc	r3, #0
 800ba08:	4423      	add	r3, r4
 800ba0a:	e015      	b.n	800ba38 <rshift+0x68>
 800ba0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba10:	f1c1 0820 	rsb	r8, r1, #32
 800ba14:	40cf      	lsrs	r7, r1
 800ba16:	f105 0e04 	add.w	lr, r5, #4
 800ba1a:	46a1      	mov	r9, r4
 800ba1c:	4576      	cmp	r6, lr
 800ba1e:	46f4      	mov	ip, lr
 800ba20:	d815      	bhi.n	800ba4e <rshift+0x7e>
 800ba22:	1a9a      	subs	r2, r3, r2
 800ba24:	0092      	lsls	r2, r2, #2
 800ba26:	3a04      	subs	r2, #4
 800ba28:	3501      	adds	r5, #1
 800ba2a:	42ae      	cmp	r6, r5
 800ba2c:	bf38      	it	cc
 800ba2e:	2200      	movcc	r2, #0
 800ba30:	18a3      	adds	r3, r4, r2
 800ba32:	50a7      	str	r7, [r4, r2]
 800ba34:	b107      	cbz	r7, 800ba38 <rshift+0x68>
 800ba36:	3304      	adds	r3, #4
 800ba38:	1b1a      	subs	r2, r3, r4
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba40:	bf08      	it	eq
 800ba42:	2300      	moveq	r3, #0
 800ba44:	6102      	str	r2, [r0, #16]
 800ba46:	bf08      	it	eq
 800ba48:	6143      	streq	r3, [r0, #20]
 800ba4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba4e:	f8dc c000 	ldr.w	ip, [ip]
 800ba52:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba56:	ea4c 0707 	orr.w	r7, ip, r7
 800ba5a:	f849 7b04 	str.w	r7, [r9], #4
 800ba5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba62:	40cf      	lsrs	r7, r1
 800ba64:	e7da      	b.n	800ba1c <rshift+0x4c>
 800ba66:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba6e:	e7c3      	b.n	800b9f8 <rshift+0x28>
 800ba70:	4623      	mov	r3, r4
 800ba72:	e7e1      	b.n	800ba38 <rshift+0x68>

0800ba74 <__hexdig_fun>:
 800ba74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba78:	2b09      	cmp	r3, #9
 800ba7a:	d802      	bhi.n	800ba82 <__hexdig_fun+0xe>
 800ba7c:	3820      	subs	r0, #32
 800ba7e:	b2c0      	uxtb	r0, r0
 800ba80:	4770      	bx	lr
 800ba82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba86:	2b05      	cmp	r3, #5
 800ba88:	d801      	bhi.n	800ba8e <__hexdig_fun+0x1a>
 800ba8a:	3847      	subs	r0, #71	; 0x47
 800ba8c:	e7f7      	b.n	800ba7e <__hexdig_fun+0xa>
 800ba8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba92:	2b05      	cmp	r3, #5
 800ba94:	d801      	bhi.n	800ba9a <__hexdig_fun+0x26>
 800ba96:	3827      	subs	r0, #39	; 0x27
 800ba98:	e7f1      	b.n	800ba7e <__hexdig_fun+0xa>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	4770      	bx	lr
	...

0800baa0 <__gethex>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	ed2d 8b02 	vpush	{d8}
 800baa8:	b089      	sub	sp, #36	; 0x24
 800baaa:	ee08 0a10 	vmov	s16, r0
 800baae:	9304      	str	r3, [sp, #16]
 800bab0:	4bb4      	ldr	r3, [pc, #720]	; (800bd84 <__gethex+0x2e4>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	9301      	str	r3, [sp, #4]
 800bab6:	4618      	mov	r0, r3
 800bab8:	468b      	mov	fp, r1
 800baba:	4690      	mov	r8, r2
 800babc:	f7f4 fb88 	bl	80001d0 <strlen>
 800bac0:	9b01      	ldr	r3, [sp, #4]
 800bac2:	f8db 2000 	ldr.w	r2, [fp]
 800bac6:	4403      	add	r3, r0
 800bac8:	4682      	mov	sl, r0
 800baca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bace:	9305      	str	r3, [sp, #20]
 800bad0:	1c93      	adds	r3, r2, #2
 800bad2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bad6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bada:	32fe      	adds	r2, #254	; 0xfe
 800badc:	18d1      	adds	r1, r2, r3
 800bade:	461f      	mov	r7, r3
 800bae0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bae4:	9100      	str	r1, [sp, #0]
 800bae6:	2830      	cmp	r0, #48	; 0x30
 800bae8:	d0f8      	beq.n	800badc <__gethex+0x3c>
 800baea:	f7ff ffc3 	bl	800ba74 <__hexdig_fun>
 800baee:	4604      	mov	r4, r0
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d13a      	bne.n	800bb6a <__gethex+0xca>
 800baf4:	9901      	ldr	r1, [sp, #4]
 800baf6:	4652      	mov	r2, sl
 800baf8:	4638      	mov	r0, r7
 800bafa:	f001 fb8d 	bl	800d218 <strncmp>
 800bafe:	4605      	mov	r5, r0
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d168      	bne.n	800bbd6 <__gethex+0x136>
 800bb04:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bb08:	eb07 060a 	add.w	r6, r7, sl
 800bb0c:	f7ff ffb2 	bl	800ba74 <__hexdig_fun>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d062      	beq.n	800bbda <__gethex+0x13a>
 800bb14:	4633      	mov	r3, r6
 800bb16:	7818      	ldrb	r0, [r3, #0]
 800bb18:	2830      	cmp	r0, #48	; 0x30
 800bb1a:	461f      	mov	r7, r3
 800bb1c:	f103 0301 	add.w	r3, r3, #1
 800bb20:	d0f9      	beq.n	800bb16 <__gethex+0x76>
 800bb22:	f7ff ffa7 	bl	800ba74 <__hexdig_fun>
 800bb26:	2301      	movs	r3, #1
 800bb28:	fab0 f480 	clz	r4, r0
 800bb2c:	0964      	lsrs	r4, r4, #5
 800bb2e:	4635      	mov	r5, r6
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	463a      	mov	r2, r7
 800bb34:	4616      	mov	r6, r2
 800bb36:	3201      	adds	r2, #1
 800bb38:	7830      	ldrb	r0, [r6, #0]
 800bb3a:	f7ff ff9b 	bl	800ba74 <__hexdig_fun>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d1f8      	bne.n	800bb34 <__gethex+0x94>
 800bb42:	9901      	ldr	r1, [sp, #4]
 800bb44:	4652      	mov	r2, sl
 800bb46:	4630      	mov	r0, r6
 800bb48:	f001 fb66 	bl	800d218 <strncmp>
 800bb4c:	b980      	cbnz	r0, 800bb70 <__gethex+0xd0>
 800bb4e:	b94d      	cbnz	r5, 800bb64 <__gethex+0xc4>
 800bb50:	eb06 050a 	add.w	r5, r6, sl
 800bb54:	462a      	mov	r2, r5
 800bb56:	4616      	mov	r6, r2
 800bb58:	3201      	adds	r2, #1
 800bb5a:	7830      	ldrb	r0, [r6, #0]
 800bb5c:	f7ff ff8a 	bl	800ba74 <__hexdig_fun>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d1f8      	bne.n	800bb56 <__gethex+0xb6>
 800bb64:	1bad      	subs	r5, r5, r6
 800bb66:	00ad      	lsls	r5, r5, #2
 800bb68:	e004      	b.n	800bb74 <__gethex+0xd4>
 800bb6a:	2400      	movs	r4, #0
 800bb6c:	4625      	mov	r5, r4
 800bb6e:	e7e0      	b.n	800bb32 <__gethex+0x92>
 800bb70:	2d00      	cmp	r5, #0
 800bb72:	d1f7      	bne.n	800bb64 <__gethex+0xc4>
 800bb74:	7833      	ldrb	r3, [r6, #0]
 800bb76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb7a:	2b50      	cmp	r3, #80	; 0x50
 800bb7c:	d13b      	bne.n	800bbf6 <__gethex+0x156>
 800bb7e:	7873      	ldrb	r3, [r6, #1]
 800bb80:	2b2b      	cmp	r3, #43	; 0x2b
 800bb82:	d02c      	beq.n	800bbde <__gethex+0x13e>
 800bb84:	2b2d      	cmp	r3, #45	; 0x2d
 800bb86:	d02e      	beq.n	800bbe6 <__gethex+0x146>
 800bb88:	1c71      	adds	r1, r6, #1
 800bb8a:	f04f 0900 	mov.w	r9, #0
 800bb8e:	7808      	ldrb	r0, [r1, #0]
 800bb90:	f7ff ff70 	bl	800ba74 <__hexdig_fun>
 800bb94:	1e43      	subs	r3, r0, #1
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b18      	cmp	r3, #24
 800bb9a:	d82c      	bhi.n	800bbf6 <__gethex+0x156>
 800bb9c:	f1a0 0210 	sub.w	r2, r0, #16
 800bba0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bba4:	f7ff ff66 	bl	800ba74 <__hexdig_fun>
 800bba8:	1e43      	subs	r3, r0, #1
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b18      	cmp	r3, #24
 800bbae:	d91d      	bls.n	800bbec <__gethex+0x14c>
 800bbb0:	f1b9 0f00 	cmp.w	r9, #0
 800bbb4:	d000      	beq.n	800bbb8 <__gethex+0x118>
 800bbb6:	4252      	negs	r2, r2
 800bbb8:	4415      	add	r5, r2
 800bbba:	f8cb 1000 	str.w	r1, [fp]
 800bbbe:	b1e4      	cbz	r4, 800bbfa <__gethex+0x15a>
 800bbc0:	9b00      	ldr	r3, [sp, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	bf14      	ite	ne
 800bbc6:	2700      	movne	r7, #0
 800bbc8:	2706      	moveq	r7, #6
 800bbca:	4638      	mov	r0, r7
 800bbcc:	b009      	add	sp, #36	; 0x24
 800bbce:	ecbd 8b02 	vpop	{d8}
 800bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd6:	463e      	mov	r6, r7
 800bbd8:	4625      	mov	r5, r4
 800bbda:	2401      	movs	r4, #1
 800bbdc:	e7ca      	b.n	800bb74 <__gethex+0xd4>
 800bbde:	f04f 0900 	mov.w	r9, #0
 800bbe2:	1cb1      	adds	r1, r6, #2
 800bbe4:	e7d3      	b.n	800bb8e <__gethex+0xee>
 800bbe6:	f04f 0901 	mov.w	r9, #1
 800bbea:	e7fa      	b.n	800bbe2 <__gethex+0x142>
 800bbec:	230a      	movs	r3, #10
 800bbee:	fb03 0202 	mla	r2, r3, r2, r0
 800bbf2:	3a10      	subs	r2, #16
 800bbf4:	e7d4      	b.n	800bba0 <__gethex+0x100>
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	e7df      	b.n	800bbba <__gethex+0x11a>
 800bbfa:	1bf3      	subs	r3, r6, r7
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	4621      	mov	r1, r4
 800bc00:	2b07      	cmp	r3, #7
 800bc02:	dc0b      	bgt.n	800bc1c <__gethex+0x17c>
 800bc04:	ee18 0a10 	vmov	r0, s16
 800bc08:	f000 fa7e 	bl	800c108 <_Balloc>
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	b940      	cbnz	r0, 800bc22 <__gethex+0x182>
 800bc10:	4b5d      	ldr	r3, [pc, #372]	; (800bd88 <__gethex+0x2e8>)
 800bc12:	4602      	mov	r2, r0
 800bc14:	21de      	movs	r1, #222	; 0xde
 800bc16:	485d      	ldr	r0, [pc, #372]	; (800bd8c <__gethex+0x2ec>)
 800bc18:	f7ff f830 	bl	800ac7c <__assert_func>
 800bc1c:	3101      	adds	r1, #1
 800bc1e:	105b      	asrs	r3, r3, #1
 800bc20:	e7ee      	b.n	800bc00 <__gethex+0x160>
 800bc22:	f100 0914 	add.w	r9, r0, #20
 800bc26:	f04f 0b00 	mov.w	fp, #0
 800bc2a:	f1ca 0301 	rsb	r3, sl, #1
 800bc2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc32:	f8cd b000 	str.w	fp, [sp]
 800bc36:	9306      	str	r3, [sp, #24]
 800bc38:	42b7      	cmp	r7, r6
 800bc3a:	d340      	bcc.n	800bcbe <__gethex+0x21e>
 800bc3c:	9802      	ldr	r0, [sp, #8]
 800bc3e:	9b00      	ldr	r3, [sp, #0]
 800bc40:	f840 3b04 	str.w	r3, [r0], #4
 800bc44:	eba0 0009 	sub.w	r0, r0, r9
 800bc48:	1080      	asrs	r0, r0, #2
 800bc4a:	0146      	lsls	r6, r0, #5
 800bc4c:	6120      	str	r0, [r4, #16]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 fb4c 	bl	800c2ec <__hi0bits>
 800bc54:	1a30      	subs	r0, r6, r0
 800bc56:	f8d8 6000 	ldr.w	r6, [r8]
 800bc5a:	42b0      	cmp	r0, r6
 800bc5c:	dd63      	ble.n	800bd26 <__gethex+0x286>
 800bc5e:	1b87      	subs	r7, r0, r6
 800bc60:	4639      	mov	r1, r7
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 fef0 	bl	800ca48 <__any_on>
 800bc68:	4682      	mov	sl, r0
 800bc6a:	b1a8      	cbz	r0, 800bc98 <__gethex+0x1f8>
 800bc6c:	1e7b      	subs	r3, r7, #1
 800bc6e:	1159      	asrs	r1, r3, #5
 800bc70:	f003 021f 	and.w	r2, r3, #31
 800bc74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bc78:	f04f 0a01 	mov.w	sl, #1
 800bc7c:	fa0a f202 	lsl.w	r2, sl, r2
 800bc80:	420a      	tst	r2, r1
 800bc82:	d009      	beq.n	800bc98 <__gethex+0x1f8>
 800bc84:	4553      	cmp	r3, sl
 800bc86:	dd05      	ble.n	800bc94 <__gethex+0x1f4>
 800bc88:	1eb9      	subs	r1, r7, #2
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 fedc 	bl	800ca48 <__any_on>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d145      	bne.n	800bd20 <__gethex+0x280>
 800bc94:	f04f 0a02 	mov.w	sl, #2
 800bc98:	4639      	mov	r1, r7
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f7ff fe98 	bl	800b9d0 <rshift>
 800bca0:	443d      	add	r5, r7
 800bca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bca6:	42ab      	cmp	r3, r5
 800bca8:	da4c      	bge.n	800bd44 <__gethex+0x2a4>
 800bcaa:	ee18 0a10 	vmov	r0, s16
 800bcae:	4621      	mov	r1, r4
 800bcb0:	f000 fa6a 	bl	800c188 <_Bfree>
 800bcb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	27a3      	movs	r7, #163	; 0xa3
 800bcbc:	e785      	b.n	800bbca <__gethex+0x12a>
 800bcbe:	1e73      	subs	r3, r6, #1
 800bcc0:	9a05      	ldr	r2, [sp, #20]
 800bcc2:	9303      	str	r3, [sp, #12]
 800bcc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d019      	beq.n	800bd00 <__gethex+0x260>
 800bccc:	f1bb 0f20 	cmp.w	fp, #32
 800bcd0:	d107      	bne.n	800bce2 <__gethex+0x242>
 800bcd2:	9b02      	ldr	r3, [sp, #8]
 800bcd4:	9a00      	ldr	r2, [sp, #0]
 800bcd6:	f843 2b04 	str.w	r2, [r3], #4
 800bcda:	9302      	str	r3, [sp, #8]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	469b      	mov	fp, r3
 800bce2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bce6:	f7ff fec5 	bl	800ba74 <__hexdig_fun>
 800bcea:	9b00      	ldr	r3, [sp, #0]
 800bcec:	f000 000f 	and.w	r0, r0, #15
 800bcf0:	fa00 f00b 	lsl.w	r0, r0, fp
 800bcf4:	4303      	orrs	r3, r0
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	f10b 0b04 	add.w	fp, fp, #4
 800bcfc:	9b03      	ldr	r3, [sp, #12]
 800bcfe:	e00d      	b.n	800bd1c <__gethex+0x27c>
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	9a06      	ldr	r2, [sp, #24]
 800bd04:	4413      	add	r3, r2
 800bd06:	42bb      	cmp	r3, r7
 800bd08:	d3e0      	bcc.n	800bccc <__gethex+0x22c>
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	9901      	ldr	r1, [sp, #4]
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	4652      	mov	r2, sl
 800bd12:	f001 fa81 	bl	800d218 <strncmp>
 800bd16:	9b07      	ldr	r3, [sp, #28]
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d1d7      	bne.n	800bccc <__gethex+0x22c>
 800bd1c:	461e      	mov	r6, r3
 800bd1e:	e78b      	b.n	800bc38 <__gethex+0x198>
 800bd20:	f04f 0a03 	mov.w	sl, #3
 800bd24:	e7b8      	b.n	800bc98 <__gethex+0x1f8>
 800bd26:	da0a      	bge.n	800bd3e <__gethex+0x29e>
 800bd28:	1a37      	subs	r7, r6, r0
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	ee18 0a10 	vmov	r0, s16
 800bd30:	463a      	mov	r2, r7
 800bd32:	f000 fc45 	bl	800c5c0 <__lshift>
 800bd36:	1bed      	subs	r5, r5, r7
 800bd38:	4604      	mov	r4, r0
 800bd3a:	f100 0914 	add.w	r9, r0, #20
 800bd3e:	f04f 0a00 	mov.w	sl, #0
 800bd42:	e7ae      	b.n	800bca2 <__gethex+0x202>
 800bd44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd48:	42a8      	cmp	r0, r5
 800bd4a:	dd72      	ble.n	800be32 <__gethex+0x392>
 800bd4c:	1b45      	subs	r5, r0, r5
 800bd4e:	42ae      	cmp	r6, r5
 800bd50:	dc36      	bgt.n	800bdc0 <__gethex+0x320>
 800bd52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d02a      	beq.n	800bdb0 <__gethex+0x310>
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d02c      	beq.n	800bdb8 <__gethex+0x318>
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d11c      	bne.n	800bd9c <__gethex+0x2fc>
 800bd62:	42ae      	cmp	r6, r5
 800bd64:	d11a      	bne.n	800bd9c <__gethex+0x2fc>
 800bd66:	2e01      	cmp	r6, #1
 800bd68:	d112      	bne.n	800bd90 <__gethex+0x2f0>
 800bd6a:	9a04      	ldr	r2, [sp, #16]
 800bd6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	2301      	movs	r3, #1
 800bd74:	6123      	str	r3, [r4, #16]
 800bd76:	f8c9 3000 	str.w	r3, [r9]
 800bd7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd7c:	2762      	movs	r7, #98	; 0x62
 800bd7e:	601c      	str	r4, [r3, #0]
 800bd80:	e723      	b.n	800bbca <__gethex+0x12a>
 800bd82:	bf00      	nop
 800bd84:	0800e060 	.word	0x0800e060
 800bd88:	0800dfe8 	.word	0x0800dfe8
 800bd8c:	0800dff9 	.word	0x0800dff9
 800bd90:	1e71      	subs	r1, r6, #1
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fe58 	bl	800ca48 <__any_on>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d1e6      	bne.n	800bd6a <__gethex+0x2ca>
 800bd9c:	ee18 0a10 	vmov	r0, s16
 800bda0:	4621      	mov	r1, r4
 800bda2:	f000 f9f1 	bl	800c188 <_Bfree>
 800bda6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bda8:	2300      	movs	r3, #0
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	2750      	movs	r7, #80	; 0x50
 800bdae:	e70c      	b.n	800bbca <__gethex+0x12a>
 800bdb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1f2      	bne.n	800bd9c <__gethex+0x2fc>
 800bdb6:	e7d8      	b.n	800bd6a <__gethex+0x2ca>
 800bdb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1d5      	bne.n	800bd6a <__gethex+0x2ca>
 800bdbe:	e7ed      	b.n	800bd9c <__gethex+0x2fc>
 800bdc0:	1e6f      	subs	r7, r5, #1
 800bdc2:	f1ba 0f00 	cmp.w	sl, #0
 800bdc6:	d131      	bne.n	800be2c <__gethex+0x38c>
 800bdc8:	b127      	cbz	r7, 800bdd4 <__gethex+0x334>
 800bdca:	4639      	mov	r1, r7
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f000 fe3b 	bl	800ca48 <__any_on>
 800bdd2:	4682      	mov	sl, r0
 800bdd4:	117b      	asrs	r3, r7, #5
 800bdd6:	2101      	movs	r1, #1
 800bdd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bddc:	f007 071f 	and.w	r7, r7, #31
 800bde0:	fa01 f707 	lsl.w	r7, r1, r7
 800bde4:	421f      	tst	r7, r3
 800bde6:	4629      	mov	r1, r5
 800bde8:	4620      	mov	r0, r4
 800bdea:	bf18      	it	ne
 800bdec:	f04a 0a02 	orrne.w	sl, sl, #2
 800bdf0:	1b76      	subs	r6, r6, r5
 800bdf2:	f7ff fded 	bl	800b9d0 <rshift>
 800bdf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bdfa:	2702      	movs	r7, #2
 800bdfc:	f1ba 0f00 	cmp.w	sl, #0
 800be00:	d048      	beq.n	800be94 <__gethex+0x3f4>
 800be02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be06:	2b02      	cmp	r3, #2
 800be08:	d015      	beq.n	800be36 <__gethex+0x396>
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d017      	beq.n	800be3e <__gethex+0x39e>
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d109      	bne.n	800be26 <__gethex+0x386>
 800be12:	f01a 0f02 	tst.w	sl, #2
 800be16:	d006      	beq.n	800be26 <__gethex+0x386>
 800be18:	f8d9 0000 	ldr.w	r0, [r9]
 800be1c:	ea4a 0a00 	orr.w	sl, sl, r0
 800be20:	f01a 0f01 	tst.w	sl, #1
 800be24:	d10e      	bne.n	800be44 <__gethex+0x3a4>
 800be26:	f047 0710 	orr.w	r7, r7, #16
 800be2a:	e033      	b.n	800be94 <__gethex+0x3f4>
 800be2c:	f04f 0a01 	mov.w	sl, #1
 800be30:	e7d0      	b.n	800bdd4 <__gethex+0x334>
 800be32:	2701      	movs	r7, #1
 800be34:	e7e2      	b.n	800bdfc <__gethex+0x35c>
 800be36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be38:	f1c3 0301 	rsb	r3, r3, #1
 800be3c:	9315      	str	r3, [sp, #84]	; 0x54
 800be3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be40:	2b00      	cmp	r3, #0
 800be42:	d0f0      	beq.n	800be26 <__gethex+0x386>
 800be44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be48:	f104 0314 	add.w	r3, r4, #20
 800be4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be54:	f04f 0c00 	mov.w	ip, #0
 800be58:	4618      	mov	r0, r3
 800be5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be62:	d01c      	beq.n	800be9e <__gethex+0x3fe>
 800be64:	3201      	adds	r2, #1
 800be66:	6002      	str	r2, [r0, #0]
 800be68:	2f02      	cmp	r7, #2
 800be6a:	f104 0314 	add.w	r3, r4, #20
 800be6e:	d13f      	bne.n	800bef0 <__gethex+0x450>
 800be70:	f8d8 2000 	ldr.w	r2, [r8]
 800be74:	3a01      	subs	r2, #1
 800be76:	42b2      	cmp	r2, r6
 800be78:	d10a      	bne.n	800be90 <__gethex+0x3f0>
 800be7a:	1171      	asrs	r1, r6, #5
 800be7c:	2201      	movs	r2, #1
 800be7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be82:	f006 061f 	and.w	r6, r6, #31
 800be86:	fa02 f606 	lsl.w	r6, r2, r6
 800be8a:	421e      	tst	r6, r3
 800be8c:	bf18      	it	ne
 800be8e:	4617      	movne	r7, r2
 800be90:	f047 0720 	orr.w	r7, r7, #32
 800be94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be96:	601c      	str	r4, [r3, #0]
 800be98:	9b04      	ldr	r3, [sp, #16]
 800be9a:	601d      	str	r5, [r3, #0]
 800be9c:	e695      	b.n	800bbca <__gethex+0x12a>
 800be9e:	4299      	cmp	r1, r3
 800bea0:	f843 cc04 	str.w	ip, [r3, #-4]
 800bea4:	d8d8      	bhi.n	800be58 <__gethex+0x3b8>
 800bea6:	68a3      	ldr	r3, [r4, #8]
 800bea8:	459b      	cmp	fp, r3
 800beaa:	db19      	blt.n	800bee0 <__gethex+0x440>
 800beac:	6861      	ldr	r1, [r4, #4]
 800beae:	ee18 0a10 	vmov	r0, s16
 800beb2:	3101      	adds	r1, #1
 800beb4:	f000 f928 	bl	800c108 <_Balloc>
 800beb8:	4681      	mov	r9, r0
 800beba:	b918      	cbnz	r0, 800bec4 <__gethex+0x424>
 800bebc:	4b1a      	ldr	r3, [pc, #104]	; (800bf28 <__gethex+0x488>)
 800bebe:	4602      	mov	r2, r0
 800bec0:	2184      	movs	r1, #132	; 0x84
 800bec2:	e6a8      	b.n	800bc16 <__gethex+0x176>
 800bec4:	6922      	ldr	r2, [r4, #16]
 800bec6:	3202      	adds	r2, #2
 800bec8:	f104 010c 	add.w	r1, r4, #12
 800becc:	0092      	lsls	r2, r2, #2
 800bece:	300c      	adds	r0, #12
 800bed0:	f000 f90c 	bl	800c0ec <memcpy>
 800bed4:	4621      	mov	r1, r4
 800bed6:	ee18 0a10 	vmov	r0, s16
 800beda:	f000 f955 	bl	800c188 <_Bfree>
 800bede:	464c      	mov	r4, r9
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bee8:	6122      	str	r2, [r4, #16]
 800beea:	2201      	movs	r2, #1
 800beec:	615a      	str	r2, [r3, #20]
 800beee:	e7bb      	b.n	800be68 <__gethex+0x3c8>
 800bef0:	6922      	ldr	r2, [r4, #16]
 800bef2:	455a      	cmp	r2, fp
 800bef4:	dd0b      	ble.n	800bf0e <__gethex+0x46e>
 800bef6:	2101      	movs	r1, #1
 800bef8:	4620      	mov	r0, r4
 800befa:	f7ff fd69 	bl	800b9d0 <rshift>
 800befe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf02:	3501      	adds	r5, #1
 800bf04:	42ab      	cmp	r3, r5
 800bf06:	f6ff aed0 	blt.w	800bcaa <__gethex+0x20a>
 800bf0a:	2701      	movs	r7, #1
 800bf0c:	e7c0      	b.n	800be90 <__gethex+0x3f0>
 800bf0e:	f016 061f 	ands.w	r6, r6, #31
 800bf12:	d0fa      	beq.n	800bf0a <__gethex+0x46a>
 800bf14:	4453      	add	r3, sl
 800bf16:	f1c6 0620 	rsb	r6, r6, #32
 800bf1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf1e:	f000 f9e5 	bl	800c2ec <__hi0bits>
 800bf22:	42b0      	cmp	r0, r6
 800bf24:	dbe7      	blt.n	800bef6 <__gethex+0x456>
 800bf26:	e7f0      	b.n	800bf0a <__gethex+0x46a>
 800bf28:	0800dfe8 	.word	0x0800dfe8

0800bf2c <L_shift>:
 800bf2c:	f1c2 0208 	rsb	r2, r2, #8
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	b570      	push	{r4, r5, r6, lr}
 800bf34:	f1c2 0620 	rsb	r6, r2, #32
 800bf38:	6843      	ldr	r3, [r0, #4]
 800bf3a:	6804      	ldr	r4, [r0, #0]
 800bf3c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf40:	432c      	orrs	r4, r5
 800bf42:	40d3      	lsrs	r3, r2
 800bf44:	6004      	str	r4, [r0, #0]
 800bf46:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf4a:	4288      	cmp	r0, r1
 800bf4c:	d3f4      	bcc.n	800bf38 <L_shift+0xc>
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}

0800bf50 <__match>:
 800bf50:	b530      	push	{r4, r5, lr}
 800bf52:	6803      	ldr	r3, [r0, #0]
 800bf54:	3301      	adds	r3, #1
 800bf56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf5a:	b914      	cbnz	r4, 800bf62 <__match+0x12>
 800bf5c:	6003      	str	r3, [r0, #0]
 800bf5e:	2001      	movs	r0, #1
 800bf60:	bd30      	pop	{r4, r5, pc}
 800bf62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf6a:	2d19      	cmp	r5, #25
 800bf6c:	bf98      	it	ls
 800bf6e:	3220      	addls	r2, #32
 800bf70:	42a2      	cmp	r2, r4
 800bf72:	d0f0      	beq.n	800bf56 <__match+0x6>
 800bf74:	2000      	movs	r0, #0
 800bf76:	e7f3      	b.n	800bf60 <__match+0x10>

0800bf78 <__hexnan>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	680b      	ldr	r3, [r1, #0]
 800bf7e:	115e      	asrs	r6, r3, #5
 800bf80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf84:	f013 031f 	ands.w	r3, r3, #31
 800bf88:	b087      	sub	sp, #28
 800bf8a:	bf18      	it	ne
 800bf8c:	3604      	addne	r6, #4
 800bf8e:	2500      	movs	r5, #0
 800bf90:	1f37      	subs	r7, r6, #4
 800bf92:	4690      	mov	r8, r2
 800bf94:	6802      	ldr	r2, [r0, #0]
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	4682      	mov	sl, r0
 800bf9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf9e:	46b9      	mov	r9, r7
 800bfa0:	463c      	mov	r4, r7
 800bfa2:	9502      	str	r5, [sp, #8]
 800bfa4:	46ab      	mov	fp, r5
 800bfa6:	7851      	ldrb	r1, [r2, #1]
 800bfa8:	1c53      	adds	r3, r2, #1
 800bfaa:	9303      	str	r3, [sp, #12]
 800bfac:	b341      	cbz	r1, 800c000 <__hexnan+0x88>
 800bfae:	4608      	mov	r0, r1
 800bfb0:	9205      	str	r2, [sp, #20]
 800bfb2:	9104      	str	r1, [sp, #16]
 800bfb4:	f7ff fd5e 	bl	800ba74 <__hexdig_fun>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d14f      	bne.n	800c05c <__hexnan+0xe4>
 800bfbc:	9904      	ldr	r1, [sp, #16]
 800bfbe:	9a05      	ldr	r2, [sp, #20]
 800bfc0:	2920      	cmp	r1, #32
 800bfc2:	d818      	bhi.n	800bff6 <__hexnan+0x7e>
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	459b      	cmp	fp, r3
 800bfc8:	dd13      	ble.n	800bff2 <__hexnan+0x7a>
 800bfca:	454c      	cmp	r4, r9
 800bfcc:	d206      	bcs.n	800bfdc <__hexnan+0x64>
 800bfce:	2d07      	cmp	r5, #7
 800bfd0:	dc04      	bgt.n	800bfdc <__hexnan+0x64>
 800bfd2:	462a      	mov	r2, r5
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7ff ffa8 	bl	800bf2c <L_shift>
 800bfdc:	4544      	cmp	r4, r8
 800bfde:	d950      	bls.n	800c082 <__hexnan+0x10a>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f1a4 0904 	sub.w	r9, r4, #4
 800bfe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfea:	f8cd b008 	str.w	fp, [sp, #8]
 800bfee:	464c      	mov	r4, r9
 800bff0:	461d      	mov	r5, r3
 800bff2:	9a03      	ldr	r2, [sp, #12]
 800bff4:	e7d7      	b.n	800bfa6 <__hexnan+0x2e>
 800bff6:	2929      	cmp	r1, #41	; 0x29
 800bff8:	d156      	bne.n	800c0a8 <__hexnan+0x130>
 800bffa:	3202      	adds	r2, #2
 800bffc:	f8ca 2000 	str.w	r2, [sl]
 800c000:	f1bb 0f00 	cmp.w	fp, #0
 800c004:	d050      	beq.n	800c0a8 <__hexnan+0x130>
 800c006:	454c      	cmp	r4, r9
 800c008:	d206      	bcs.n	800c018 <__hexnan+0xa0>
 800c00a:	2d07      	cmp	r5, #7
 800c00c:	dc04      	bgt.n	800c018 <__hexnan+0xa0>
 800c00e:	462a      	mov	r2, r5
 800c010:	4649      	mov	r1, r9
 800c012:	4620      	mov	r0, r4
 800c014:	f7ff ff8a 	bl	800bf2c <L_shift>
 800c018:	4544      	cmp	r4, r8
 800c01a:	d934      	bls.n	800c086 <__hexnan+0x10e>
 800c01c:	f1a8 0204 	sub.w	r2, r8, #4
 800c020:	4623      	mov	r3, r4
 800c022:	f853 1b04 	ldr.w	r1, [r3], #4
 800c026:	f842 1f04 	str.w	r1, [r2, #4]!
 800c02a:	429f      	cmp	r7, r3
 800c02c:	d2f9      	bcs.n	800c022 <__hexnan+0xaa>
 800c02e:	1b3b      	subs	r3, r7, r4
 800c030:	f023 0303 	bic.w	r3, r3, #3
 800c034:	3304      	adds	r3, #4
 800c036:	3401      	adds	r4, #1
 800c038:	3e03      	subs	r6, #3
 800c03a:	42b4      	cmp	r4, r6
 800c03c:	bf88      	it	hi
 800c03e:	2304      	movhi	r3, #4
 800c040:	4443      	add	r3, r8
 800c042:	2200      	movs	r2, #0
 800c044:	f843 2b04 	str.w	r2, [r3], #4
 800c048:	429f      	cmp	r7, r3
 800c04a:	d2fb      	bcs.n	800c044 <__hexnan+0xcc>
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	b91b      	cbnz	r3, 800c058 <__hexnan+0xe0>
 800c050:	4547      	cmp	r7, r8
 800c052:	d127      	bne.n	800c0a4 <__hexnan+0x12c>
 800c054:	2301      	movs	r3, #1
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	2005      	movs	r0, #5
 800c05a:	e026      	b.n	800c0aa <__hexnan+0x132>
 800c05c:	3501      	adds	r5, #1
 800c05e:	2d08      	cmp	r5, #8
 800c060:	f10b 0b01 	add.w	fp, fp, #1
 800c064:	dd06      	ble.n	800c074 <__hexnan+0xfc>
 800c066:	4544      	cmp	r4, r8
 800c068:	d9c3      	bls.n	800bff2 <__hexnan+0x7a>
 800c06a:	2300      	movs	r3, #0
 800c06c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c070:	2501      	movs	r5, #1
 800c072:	3c04      	subs	r4, #4
 800c074:	6822      	ldr	r2, [r4, #0]
 800c076:	f000 000f 	and.w	r0, r0, #15
 800c07a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c07e:	6022      	str	r2, [r4, #0]
 800c080:	e7b7      	b.n	800bff2 <__hexnan+0x7a>
 800c082:	2508      	movs	r5, #8
 800c084:	e7b5      	b.n	800bff2 <__hexnan+0x7a>
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d0df      	beq.n	800c04c <__hexnan+0xd4>
 800c08c:	f04f 32ff 	mov.w	r2, #4294967295
 800c090:	f1c3 0320 	rsb	r3, r3, #32
 800c094:	fa22 f303 	lsr.w	r3, r2, r3
 800c098:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c09c:	401a      	ands	r2, r3
 800c09e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c0a2:	e7d3      	b.n	800c04c <__hexnan+0xd4>
 800c0a4:	3f04      	subs	r7, #4
 800c0a6:	e7d1      	b.n	800c04c <__hexnan+0xd4>
 800c0a8:	2004      	movs	r0, #4
 800c0aa:	b007      	add	sp, #28
 800c0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0b0 <_localeconv_r>:
 800c0b0:	4800      	ldr	r0, [pc, #0]	; (800c0b4 <_localeconv_r+0x4>)
 800c0b2:	4770      	bx	lr
 800c0b4:	20000178 	.word	0x20000178

0800c0b8 <malloc>:
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <malloc+0xc>)
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	f000 bd67 	b.w	800cb90 <_malloc_r>
 800c0c2:	bf00      	nop
 800c0c4:	20000020 	.word	0x20000020

0800c0c8 <__ascii_mbtowc>:
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	b901      	cbnz	r1, 800c0ce <__ascii_mbtowc+0x6>
 800c0cc:	a901      	add	r1, sp, #4
 800c0ce:	b142      	cbz	r2, 800c0e2 <__ascii_mbtowc+0x1a>
 800c0d0:	b14b      	cbz	r3, 800c0e6 <__ascii_mbtowc+0x1e>
 800c0d2:	7813      	ldrb	r3, [r2, #0]
 800c0d4:	600b      	str	r3, [r1, #0]
 800c0d6:	7812      	ldrb	r2, [r2, #0]
 800c0d8:	1e10      	subs	r0, r2, #0
 800c0da:	bf18      	it	ne
 800c0dc:	2001      	movne	r0, #1
 800c0de:	b002      	add	sp, #8
 800c0e0:	4770      	bx	lr
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	e7fb      	b.n	800c0de <__ascii_mbtowc+0x16>
 800c0e6:	f06f 0001 	mvn.w	r0, #1
 800c0ea:	e7f8      	b.n	800c0de <__ascii_mbtowc+0x16>

0800c0ec <memcpy>:
 800c0ec:	440a      	add	r2, r1
 800c0ee:	4291      	cmp	r1, r2
 800c0f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0f4:	d100      	bne.n	800c0f8 <memcpy+0xc>
 800c0f6:	4770      	bx	lr
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c102:	4291      	cmp	r1, r2
 800c104:	d1f9      	bne.n	800c0fa <memcpy+0xe>
 800c106:	bd10      	pop	{r4, pc}

0800c108 <_Balloc>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c10c:	4604      	mov	r4, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	b976      	cbnz	r6, 800c130 <_Balloc+0x28>
 800c112:	2010      	movs	r0, #16
 800c114:	f7ff ffd0 	bl	800c0b8 <malloc>
 800c118:	4602      	mov	r2, r0
 800c11a:	6260      	str	r0, [r4, #36]	; 0x24
 800c11c:	b920      	cbnz	r0, 800c128 <_Balloc+0x20>
 800c11e:	4b18      	ldr	r3, [pc, #96]	; (800c180 <_Balloc+0x78>)
 800c120:	4818      	ldr	r0, [pc, #96]	; (800c184 <_Balloc+0x7c>)
 800c122:	2166      	movs	r1, #102	; 0x66
 800c124:	f7fe fdaa 	bl	800ac7c <__assert_func>
 800c128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c12c:	6006      	str	r6, [r0, #0]
 800c12e:	60c6      	str	r6, [r0, #12]
 800c130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c132:	68f3      	ldr	r3, [r6, #12]
 800c134:	b183      	cbz	r3, 800c158 <_Balloc+0x50>
 800c136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c13e:	b9b8      	cbnz	r0, 800c170 <_Balloc+0x68>
 800c140:	2101      	movs	r1, #1
 800c142:	fa01 f605 	lsl.w	r6, r1, r5
 800c146:	1d72      	adds	r2, r6, #5
 800c148:	0092      	lsls	r2, r2, #2
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 fc9d 	bl	800ca8a <_calloc_r>
 800c150:	b160      	cbz	r0, 800c16c <_Balloc+0x64>
 800c152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c156:	e00e      	b.n	800c176 <_Balloc+0x6e>
 800c158:	2221      	movs	r2, #33	; 0x21
 800c15a:	2104      	movs	r1, #4
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fc94 	bl	800ca8a <_calloc_r>
 800c162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c164:	60f0      	str	r0, [r6, #12]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e4      	bne.n	800c136 <_Balloc+0x2e>
 800c16c:	2000      	movs	r0, #0
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	6802      	ldr	r2, [r0, #0]
 800c172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c176:	2300      	movs	r3, #0
 800c178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c17c:	e7f7      	b.n	800c16e <_Balloc+0x66>
 800c17e:	bf00      	nop
 800c180:	0800ded0 	.word	0x0800ded0
 800c184:	0800e074 	.word	0x0800e074

0800c188 <_Bfree>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c18c:	4605      	mov	r5, r0
 800c18e:	460c      	mov	r4, r1
 800c190:	b976      	cbnz	r6, 800c1b0 <_Bfree+0x28>
 800c192:	2010      	movs	r0, #16
 800c194:	f7ff ff90 	bl	800c0b8 <malloc>
 800c198:	4602      	mov	r2, r0
 800c19a:	6268      	str	r0, [r5, #36]	; 0x24
 800c19c:	b920      	cbnz	r0, 800c1a8 <_Bfree+0x20>
 800c19e:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <_Bfree+0x3c>)
 800c1a0:	4809      	ldr	r0, [pc, #36]	; (800c1c8 <_Bfree+0x40>)
 800c1a2:	218a      	movs	r1, #138	; 0x8a
 800c1a4:	f7fe fd6a 	bl	800ac7c <__assert_func>
 800c1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1ac:	6006      	str	r6, [r0, #0]
 800c1ae:	60c6      	str	r6, [r0, #12]
 800c1b0:	b13c      	cbz	r4, 800c1c2 <_Bfree+0x3a>
 800c1b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1b4:	6862      	ldr	r2, [r4, #4]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1bc:	6021      	str	r1, [r4, #0]
 800c1be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}
 800c1c4:	0800ded0 	.word	0x0800ded0
 800c1c8:	0800e074 	.word	0x0800e074

0800c1cc <__multadd>:
 800c1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d0:	690d      	ldr	r5, [r1, #16]
 800c1d2:	4607      	mov	r7, r0
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	461e      	mov	r6, r3
 800c1d8:	f101 0c14 	add.w	ip, r1, #20
 800c1dc:	2000      	movs	r0, #0
 800c1de:	f8dc 3000 	ldr.w	r3, [ip]
 800c1e2:	b299      	uxth	r1, r3
 800c1e4:	fb02 6101 	mla	r1, r2, r1, r6
 800c1e8:	0c1e      	lsrs	r6, r3, #16
 800c1ea:	0c0b      	lsrs	r3, r1, #16
 800c1ec:	fb02 3306 	mla	r3, r2, r6, r3
 800c1f0:	b289      	uxth	r1, r1
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1f8:	4285      	cmp	r5, r0
 800c1fa:	f84c 1b04 	str.w	r1, [ip], #4
 800c1fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c202:	dcec      	bgt.n	800c1de <__multadd+0x12>
 800c204:	b30e      	cbz	r6, 800c24a <__multadd+0x7e>
 800c206:	68a3      	ldr	r3, [r4, #8]
 800c208:	42ab      	cmp	r3, r5
 800c20a:	dc19      	bgt.n	800c240 <__multadd+0x74>
 800c20c:	6861      	ldr	r1, [r4, #4]
 800c20e:	4638      	mov	r0, r7
 800c210:	3101      	adds	r1, #1
 800c212:	f7ff ff79 	bl	800c108 <_Balloc>
 800c216:	4680      	mov	r8, r0
 800c218:	b928      	cbnz	r0, 800c226 <__multadd+0x5a>
 800c21a:	4602      	mov	r2, r0
 800c21c:	4b0c      	ldr	r3, [pc, #48]	; (800c250 <__multadd+0x84>)
 800c21e:	480d      	ldr	r0, [pc, #52]	; (800c254 <__multadd+0x88>)
 800c220:	21b5      	movs	r1, #181	; 0xb5
 800c222:	f7fe fd2b 	bl	800ac7c <__assert_func>
 800c226:	6922      	ldr	r2, [r4, #16]
 800c228:	3202      	adds	r2, #2
 800c22a:	f104 010c 	add.w	r1, r4, #12
 800c22e:	0092      	lsls	r2, r2, #2
 800c230:	300c      	adds	r0, #12
 800c232:	f7ff ff5b 	bl	800c0ec <memcpy>
 800c236:	4621      	mov	r1, r4
 800c238:	4638      	mov	r0, r7
 800c23a:	f7ff ffa5 	bl	800c188 <_Bfree>
 800c23e:	4644      	mov	r4, r8
 800c240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c244:	3501      	adds	r5, #1
 800c246:	615e      	str	r6, [r3, #20]
 800c248:	6125      	str	r5, [r4, #16]
 800c24a:	4620      	mov	r0, r4
 800c24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c250:	0800dfe8 	.word	0x0800dfe8
 800c254:	0800e074 	.word	0x0800e074

0800c258 <__s2b>:
 800c258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	4615      	mov	r5, r2
 800c260:	461f      	mov	r7, r3
 800c262:	2209      	movs	r2, #9
 800c264:	3308      	adds	r3, #8
 800c266:	4606      	mov	r6, r0
 800c268:	fb93 f3f2 	sdiv	r3, r3, r2
 800c26c:	2100      	movs	r1, #0
 800c26e:	2201      	movs	r2, #1
 800c270:	429a      	cmp	r2, r3
 800c272:	db09      	blt.n	800c288 <__s2b+0x30>
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff ff47 	bl	800c108 <_Balloc>
 800c27a:	b940      	cbnz	r0, 800c28e <__s2b+0x36>
 800c27c:	4602      	mov	r2, r0
 800c27e:	4b19      	ldr	r3, [pc, #100]	; (800c2e4 <__s2b+0x8c>)
 800c280:	4819      	ldr	r0, [pc, #100]	; (800c2e8 <__s2b+0x90>)
 800c282:	21ce      	movs	r1, #206	; 0xce
 800c284:	f7fe fcfa 	bl	800ac7c <__assert_func>
 800c288:	0052      	lsls	r2, r2, #1
 800c28a:	3101      	adds	r1, #1
 800c28c:	e7f0      	b.n	800c270 <__s2b+0x18>
 800c28e:	9b08      	ldr	r3, [sp, #32]
 800c290:	6143      	str	r3, [r0, #20]
 800c292:	2d09      	cmp	r5, #9
 800c294:	f04f 0301 	mov.w	r3, #1
 800c298:	6103      	str	r3, [r0, #16]
 800c29a:	dd16      	ble.n	800c2ca <__s2b+0x72>
 800c29c:	f104 0909 	add.w	r9, r4, #9
 800c2a0:	46c8      	mov	r8, r9
 800c2a2:	442c      	add	r4, r5
 800c2a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2a8:	4601      	mov	r1, r0
 800c2aa:	3b30      	subs	r3, #48	; 0x30
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f7ff ff8c 	bl	800c1cc <__multadd>
 800c2b4:	45a0      	cmp	r8, r4
 800c2b6:	d1f5      	bne.n	800c2a4 <__s2b+0x4c>
 800c2b8:	f1a5 0408 	sub.w	r4, r5, #8
 800c2bc:	444c      	add	r4, r9
 800c2be:	1b2d      	subs	r5, r5, r4
 800c2c0:	1963      	adds	r3, r4, r5
 800c2c2:	42bb      	cmp	r3, r7
 800c2c4:	db04      	blt.n	800c2d0 <__s2b+0x78>
 800c2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ca:	340a      	adds	r4, #10
 800c2cc:	2509      	movs	r5, #9
 800c2ce:	e7f6      	b.n	800c2be <__s2b+0x66>
 800c2d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	3b30      	subs	r3, #48	; 0x30
 800c2d8:	220a      	movs	r2, #10
 800c2da:	4630      	mov	r0, r6
 800c2dc:	f7ff ff76 	bl	800c1cc <__multadd>
 800c2e0:	e7ee      	b.n	800c2c0 <__s2b+0x68>
 800c2e2:	bf00      	nop
 800c2e4:	0800dfe8 	.word	0x0800dfe8
 800c2e8:	0800e074 	.word	0x0800e074

0800c2ec <__hi0bits>:
 800c2ec:	0c03      	lsrs	r3, r0, #16
 800c2ee:	041b      	lsls	r3, r3, #16
 800c2f0:	b9d3      	cbnz	r3, 800c328 <__hi0bits+0x3c>
 800c2f2:	0400      	lsls	r0, r0, #16
 800c2f4:	2310      	movs	r3, #16
 800c2f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c2fa:	bf04      	itt	eq
 800c2fc:	0200      	lsleq	r0, r0, #8
 800c2fe:	3308      	addeq	r3, #8
 800c300:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c304:	bf04      	itt	eq
 800c306:	0100      	lsleq	r0, r0, #4
 800c308:	3304      	addeq	r3, #4
 800c30a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c30e:	bf04      	itt	eq
 800c310:	0080      	lsleq	r0, r0, #2
 800c312:	3302      	addeq	r3, #2
 800c314:	2800      	cmp	r0, #0
 800c316:	db05      	blt.n	800c324 <__hi0bits+0x38>
 800c318:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c31c:	f103 0301 	add.w	r3, r3, #1
 800c320:	bf08      	it	eq
 800c322:	2320      	moveq	r3, #32
 800c324:	4618      	mov	r0, r3
 800c326:	4770      	bx	lr
 800c328:	2300      	movs	r3, #0
 800c32a:	e7e4      	b.n	800c2f6 <__hi0bits+0xa>

0800c32c <__lo0bits>:
 800c32c:	6803      	ldr	r3, [r0, #0]
 800c32e:	f013 0207 	ands.w	r2, r3, #7
 800c332:	4601      	mov	r1, r0
 800c334:	d00b      	beq.n	800c34e <__lo0bits+0x22>
 800c336:	07da      	lsls	r2, r3, #31
 800c338:	d423      	bmi.n	800c382 <__lo0bits+0x56>
 800c33a:	0798      	lsls	r0, r3, #30
 800c33c:	bf49      	itett	mi
 800c33e:	085b      	lsrmi	r3, r3, #1
 800c340:	089b      	lsrpl	r3, r3, #2
 800c342:	2001      	movmi	r0, #1
 800c344:	600b      	strmi	r3, [r1, #0]
 800c346:	bf5c      	itt	pl
 800c348:	600b      	strpl	r3, [r1, #0]
 800c34a:	2002      	movpl	r0, #2
 800c34c:	4770      	bx	lr
 800c34e:	b298      	uxth	r0, r3
 800c350:	b9a8      	cbnz	r0, 800c37e <__lo0bits+0x52>
 800c352:	0c1b      	lsrs	r3, r3, #16
 800c354:	2010      	movs	r0, #16
 800c356:	b2da      	uxtb	r2, r3
 800c358:	b90a      	cbnz	r2, 800c35e <__lo0bits+0x32>
 800c35a:	3008      	adds	r0, #8
 800c35c:	0a1b      	lsrs	r3, r3, #8
 800c35e:	071a      	lsls	r2, r3, #28
 800c360:	bf04      	itt	eq
 800c362:	091b      	lsreq	r3, r3, #4
 800c364:	3004      	addeq	r0, #4
 800c366:	079a      	lsls	r2, r3, #30
 800c368:	bf04      	itt	eq
 800c36a:	089b      	lsreq	r3, r3, #2
 800c36c:	3002      	addeq	r0, #2
 800c36e:	07da      	lsls	r2, r3, #31
 800c370:	d403      	bmi.n	800c37a <__lo0bits+0x4e>
 800c372:	085b      	lsrs	r3, r3, #1
 800c374:	f100 0001 	add.w	r0, r0, #1
 800c378:	d005      	beq.n	800c386 <__lo0bits+0x5a>
 800c37a:	600b      	str	r3, [r1, #0]
 800c37c:	4770      	bx	lr
 800c37e:	4610      	mov	r0, r2
 800c380:	e7e9      	b.n	800c356 <__lo0bits+0x2a>
 800c382:	2000      	movs	r0, #0
 800c384:	4770      	bx	lr
 800c386:	2020      	movs	r0, #32
 800c388:	4770      	bx	lr
	...

0800c38c <__i2b>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	460c      	mov	r4, r1
 800c390:	2101      	movs	r1, #1
 800c392:	f7ff feb9 	bl	800c108 <_Balloc>
 800c396:	4602      	mov	r2, r0
 800c398:	b928      	cbnz	r0, 800c3a6 <__i2b+0x1a>
 800c39a:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <__i2b+0x24>)
 800c39c:	4805      	ldr	r0, [pc, #20]	; (800c3b4 <__i2b+0x28>)
 800c39e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c3a2:	f7fe fc6b 	bl	800ac7c <__assert_func>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	6144      	str	r4, [r0, #20]
 800c3aa:	6103      	str	r3, [r0, #16]
 800c3ac:	bd10      	pop	{r4, pc}
 800c3ae:	bf00      	nop
 800c3b0:	0800dfe8 	.word	0x0800dfe8
 800c3b4:	0800e074 	.word	0x0800e074

0800c3b8 <__multiply>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	4691      	mov	r9, r2
 800c3be:	690a      	ldr	r2, [r1, #16]
 800c3c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	bfb8      	it	lt
 800c3c8:	460b      	movlt	r3, r1
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	bfbc      	itt	lt
 800c3ce:	464c      	movlt	r4, r9
 800c3d0:	4699      	movlt	r9, r3
 800c3d2:	6927      	ldr	r7, [r4, #16]
 800c3d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3d8:	68a3      	ldr	r3, [r4, #8]
 800c3da:	6861      	ldr	r1, [r4, #4]
 800c3dc:	eb07 060a 	add.w	r6, r7, sl
 800c3e0:	42b3      	cmp	r3, r6
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	bfb8      	it	lt
 800c3e6:	3101      	addlt	r1, #1
 800c3e8:	f7ff fe8e 	bl	800c108 <_Balloc>
 800c3ec:	b930      	cbnz	r0, 800c3fc <__multiply+0x44>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	4b44      	ldr	r3, [pc, #272]	; (800c504 <__multiply+0x14c>)
 800c3f2:	4845      	ldr	r0, [pc, #276]	; (800c508 <__multiply+0x150>)
 800c3f4:	f240 115d 	movw	r1, #349	; 0x15d
 800c3f8:	f7fe fc40 	bl	800ac7c <__assert_func>
 800c3fc:	f100 0514 	add.w	r5, r0, #20
 800c400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c404:	462b      	mov	r3, r5
 800c406:	2200      	movs	r2, #0
 800c408:	4543      	cmp	r3, r8
 800c40a:	d321      	bcc.n	800c450 <__multiply+0x98>
 800c40c:	f104 0314 	add.w	r3, r4, #20
 800c410:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c414:	f109 0314 	add.w	r3, r9, #20
 800c418:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c41c:	9202      	str	r2, [sp, #8]
 800c41e:	1b3a      	subs	r2, r7, r4
 800c420:	3a15      	subs	r2, #21
 800c422:	f022 0203 	bic.w	r2, r2, #3
 800c426:	3204      	adds	r2, #4
 800c428:	f104 0115 	add.w	r1, r4, #21
 800c42c:	428f      	cmp	r7, r1
 800c42e:	bf38      	it	cc
 800c430:	2204      	movcc	r2, #4
 800c432:	9201      	str	r2, [sp, #4]
 800c434:	9a02      	ldr	r2, [sp, #8]
 800c436:	9303      	str	r3, [sp, #12]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d80c      	bhi.n	800c456 <__multiply+0x9e>
 800c43c:	2e00      	cmp	r6, #0
 800c43e:	dd03      	ble.n	800c448 <__multiply+0x90>
 800c440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c444:	2b00      	cmp	r3, #0
 800c446:	d05a      	beq.n	800c4fe <__multiply+0x146>
 800c448:	6106      	str	r6, [r0, #16]
 800c44a:	b005      	add	sp, #20
 800c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c450:	f843 2b04 	str.w	r2, [r3], #4
 800c454:	e7d8      	b.n	800c408 <__multiply+0x50>
 800c456:	f8b3 a000 	ldrh.w	sl, [r3]
 800c45a:	f1ba 0f00 	cmp.w	sl, #0
 800c45e:	d024      	beq.n	800c4aa <__multiply+0xf2>
 800c460:	f104 0e14 	add.w	lr, r4, #20
 800c464:	46a9      	mov	r9, r5
 800c466:	f04f 0c00 	mov.w	ip, #0
 800c46a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c46e:	f8d9 1000 	ldr.w	r1, [r9]
 800c472:	fa1f fb82 	uxth.w	fp, r2
 800c476:	b289      	uxth	r1, r1
 800c478:	fb0a 110b 	mla	r1, sl, fp, r1
 800c47c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c480:	f8d9 2000 	ldr.w	r2, [r9]
 800c484:	4461      	add	r1, ip
 800c486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c48a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c48e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c492:	b289      	uxth	r1, r1
 800c494:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c498:	4577      	cmp	r7, lr
 800c49a:	f849 1b04 	str.w	r1, [r9], #4
 800c49e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4a2:	d8e2      	bhi.n	800c46a <__multiply+0xb2>
 800c4a4:	9a01      	ldr	r2, [sp, #4]
 800c4a6:	f845 c002 	str.w	ip, [r5, r2]
 800c4aa:	9a03      	ldr	r2, [sp, #12]
 800c4ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	f1b9 0f00 	cmp.w	r9, #0
 800c4b6:	d020      	beq.n	800c4fa <__multiply+0x142>
 800c4b8:	6829      	ldr	r1, [r5, #0]
 800c4ba:	f104 0c14 	add.w	ip, r4, #20
 800c4be:	46ae      	mov	lr, r5
 800c4c0:	f04f 0a00 	mov.w	sl, #0
 800c4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800c4c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4cc:	fb09 220b 	mla	r2, r9, fp, r2
 800c4d0:	4492      	add	sl, r2
 800c4d2:	b289      	uxth	r1, r1
 800c4d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c4d8:	f84e 1b04 	str.w	r1, [lr], #4
 800c4dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4e0:	f8be 1000 	ldrh.w	r1, [lr]
 800c4e4:	0c12      	lsrs	r2, r2, #16
 800c4e6:	fb09 1102 	mla	r1, r9, r2, r1
 800c4ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c4ee:	4567      	cmp	r7, ip
 800c4f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4f4:	d8e6      	bhi.n	800c4c4 <__multiply+0x10c>
 800c4f6:	9a01      	ldr	r2, [sp, #4]
 800c4f8:	50a9      	str	r1, [r5, r2]
 800c4fa:	3504      	adds	r5, #4
 800c4fc:	e79a      	b.n	800c434 <__multiply+0x7c>
 800c4fe:	3e01      	subs	r6, #1
 800c500:	e79c      	b.n	800c43c <__multiply+0x84>
 800c502:	bf00      	nop
 800c504:	0800dfe8 	.word	0x0800dfe8
 800c508:	0800e074 	.word	0x0800e074

0800c50c <__pow5mult>:
 800c50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c510:	4615      	mov	r5, r2
 800c512:	f012 0203 	ands.w	r2, r2, #3
 800c516:	4606      	mov	r6, r0
 800c518:	460f      	mov	r7, r1
 800c51a:	d007      	beq.n	800c52c <__pow5mult+0x20>
 800c51c:	4c25      	ldr	r4, [pc, #148]	; (800c5b4 <__pow5mult+0xa8>)
 800c51e:	3a01      	subs	r2, #1
 800c520:	2300      	movs	r3, #0
 800c522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c526:	f7ff fe51 	bl	800c1cc <__multadd>
 800c52a:	4607      	mov	r7, r0
 800c52c:	10ad      	asrs	r5, r5, #2
 800c52e:	d03d      	beq.n	800c5ac <__pow5mult+0xa0>
 800c530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c532:	b97c      	cbnz	r4, 800c554 <__pow5mult+0x48>
 800c534:	2010      	movs	r0, #16
 800c536:	f7ff fdbf 	bl	800c0b8 <malloc>
 800c53a:	4602      	mov	r2, r0
 800c53c:	6270      	str	r0, [r6, #36]	; 0x24
 800c53e:	b928      	cbnz	r0, 800c54c <__pow5mult+0x40>
 800c540:	4b1d      	ldr	r3, [pc, #116]	; (800c5b8 <__pow5mult+0xac>)
 800c542:	481e      	ldr	r0, [pc, #120]	; (800c5bc <__pow5mult+0xb0>)
 800c544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c548:	f7fe fb98 	bl	800ac7c <__assert_func>
 800c54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c550:	6004      	str	r4, [r0, #0]
 800c552:	60c4      	str	r4, [r0, #12]
 800c554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c55c:	b94c      	cbnz	r4, 800c572 <__pow5mult+0x66>
 800c55e:	f240 2171 	movw	r1, #625	; 0x271
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ff12 	bl	800c38c <__i2b>
 800c568:	2300      	movs	r3, #0
 800c56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c56e:	4604      	mov	r4, r0
 800c570:	6003      	str	r3, [r0, #0]
 800c572:	f04f 0900 	mov.w	r9, #0
 800c576:	07eb      	lsls	r3, r5, #31
 800c578:	d50a      	bpl.n	800c590 <__pow5mult+0x84>
 800c57a:	4639      	mov	r1, r7
 800c57c:	4622      	mov	r2, r4
 800c57e:	4630      	mov	r0, r6
 800c580:	f7ff ff1a 	bl	800c3b8 <__multiply>
 800c584:	4639      	mov	r1, r7
 800c586:	4680      	mov	r8, r0
 800c588:	4630      	mov	r0, r6
 800c58a:	f7ff fdfd 	bl	800c188 <_Bfree>
 800c58e:	4647      	mov	r7, r8
 800c590:	106d      	asrs	r5, r5, #1
 800c592:	d00b      	beq.n	800c5ac <__pow5mult+0xa0>
 800c594:	6820      	ldr	r0, [r4, #0]
 800c596:	b938      	cbnz	r0, 800c5a8 <__pow5mult+0x9c>
 800c598:	4622      	mov	r2, r4
 800c59a:	4621      	mov	r1, r4
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7ff ff0b 	bl	800c3b8 <__multiply>
 800c5a2:	6020      	str	r0, [r4, #0]
 800c5a4:	f8c0 9000 	str.w	r9, [r0]
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	e7e4      	b.n	800c576 <__pow5mult+0x6a>
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b2:	bf00      	nop
 800c5b4:	0800e1c0 	.word	0x0800e1c0
 800c5b8:	0800ded0 	.word	0x0800ded0
 800c5bc:	0800e074 	.word	0x0800e074

0800c5c0 <__lshift>:
 800c5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	6849      	ldr	r1, [r1, #4]
 800c5c8:	6923      	ldr	r3, [r4, #16]
 800c5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	4607      	mov	r7, r0
 800c5d2:	4691      	mov	r9, r2
 800c5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5d8:	f108 0601 	add.w	r6, r8, #1
 800c5dc:	42b3      	cmp	r3, r6
 800c5de:	db0b      	blt.n	800c5f8 <__lshift+0x38>
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff fd91 	bl	800c108 <_Balloc>
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	b948      	cbnz	r0, 800c5fe <__lshift+0x3e>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	4b2a      	ldr	r3, [pc, #168]	; (800c698 <__lshift+0xd8>)
 800c5ee:	482b      	ldr	r0, [pc, #172]	; (800c69c <__lshift+0xdc>)
 800c5f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c5f4:	f7fe fb42 	bl	800ac7c <__assert_func>
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	e7ee      	b.n	800c5dc <__lshift+0x1c>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f100 0114 	add.w	r1, r0, #20
 800c604:	f100 0210 	add.w	r2, r0, #16
 800c608:	4618      	mov	r0, r3
 800c60a:	4553      	cmp	r3, sl
 800c60c:	db37      	blt.n	800c67e <__lshift+0xbe>
 800c60e:	6920      	ldr	r0, [r4, #16]
 800c610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c614:	f104 0314 	add.w	r3, r4, #20
 800c618:	f019 091f 	ands.w	r9, r9, #31
 800c61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c624:	d02f      	beq.n	800c686 <__lshift+0xc6>
 800c626:	f1c9 0e20 	rsb	lr, r9, #32
 800c62a:	468a      	mov	sl, r1
 800c62c:	f04f 0c00 	mov.w	ip, #0
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	fa02 f209 	lsl.w	r2, r2, r9
 800c636:	ea42 020c 	orr.w	r2, r2, ip
 800c63a:	f84a 2b04 	str.w	r2, [sl], #4
 800c63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c642:	4298      	cmp	r0, r3
 800c644:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c648:	d8f2      	bhi.n	800c630 <__lshift+0x70>
 800c64a:	1b03      	subs	r3, r0, r4
 800c64c:	3b15      	subs	r3, #21
 800c64e:	f023 0303 	bic.w	r3, r3, #3
 800c652:	3304      	adds	r3, #4
 800c654:	f104 0215 	add.w	r2, r4, #21
 800c658:	4290      	cmp	r0, r2
 800c65a:	bf38      	it	cc
 800c65c:	2304      	movcc	r3, #4
 800c65e:	f841 c003 	str.w	ip, [r1, r3]
 800c662:	f1bc 0f00 	cmp.w	ip, #0
 800c666:	d001      	beq.n	800c66c <__lshift+0xac>
 800c668:	f108 0602 	add.w	r6, r8, #2
 800c66c:	3e01      	subs	r6, #1
 800c66e:	4638      	mov	r0, r7
 800c670:	612e      	str	r6, [r5, #16]
 800c672:	4621      	mov	r1, r4
 800c674:	f7ff fd88 	bl	800c188 <_Bfree>
 800c678:	4628      	mov	r0, r5
 800c67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c682:	3301      	adds	r3, #1
 800c684:	e7c1      	b.n	800c60a <__lshift+0x4a>
 800c686:	3904      	subs	r1, #4
 800c688:	f853 2b04 	ldr.w	r2, [r3], #4
 800c68c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c690:	4298      	cmp	r0, r3
 800c692:	d8f9      	bhi.n	800c688 <__lshift+0xc8>
 800c694:	e7ea      	b.n	800c66c <__lshift+0xac>
 800c696:	bf00      	nop
 800c698:	0800dfe8 	.word	0x0800dfe8
 800c69c:	0800e074 	.word	0x0800e074

0800c6a0 <__mcmp>:
 800c6a0:	b530      	push	{r4, r5, lr}
 800c6a2:	6902      	ldr	r2, [r0, #16]
 800c6a4:	690c      	ldr	r4, [r1, #16]
 800c6a6:	1b12      	subs	r2, r2, r4
 800c6a8:	d10e      	bne.n	800c6c8 <__mcmp+0x28>
 800c6aa:	f100 0314 	add.w	r3, r0, #20
 800c6ae:	3114      	adds	r1, #20
 800c6b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6c0:	42a5      	cmp	r5, r4
 800c6c2:	d003      	beq.n	800c6cc <__mcmp+0x2c>
 800c6c4:	d305      	bcc.n	800c6d2 <__mcmp+0x32>
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	bd30      	pop	{r4, r5, pc}
 800c6cc:	4283      	cmp	r3, r0
 800c6ce:	d3f3      	bcc.n	800c6b8 <__mcmp+0x18>
 800c6d0:	e7fa      	b.n	800c6c8 <__mcmp+0x28>
 800c6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d6:	e7f7      	b.n	800c6c8 <__mcmp+0x28>

0800c6d8 <__mdiff>:
 800c6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	460c      	mov	r4, r1
 800c6de:	4606      	mov	r6, r0
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	4690      	mov	r8, r2
 800c6e6:	f7ff ffdb 	bl	800c6a0 <__mcmp>
 800c6ea:	1e05      	subs	r5, r0, #0
 800c6ec:	d110      	bne.n	800c710 <__mdiff+0x38>
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f7ff fd09 	bl	800c108 <_Balloc>
 800c6f6:	b930      	cbnz	r0, 800c706 <__mdiff+0x2e>
 800c6f8:	4b3a      	ldr	r3, [pc, #232]	; (800c7e4 <__mdiff+0x10c>)
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	f240 2132 	movw	r1, #562	; 0x232
 800c700:	4839      	ldr	r0, [pc, #228]	; (800c7e8 <__mdiff+0x110>)
 800c702:	f7fe fabb 	bl	800ac7c <__assert_func>
 800c706:	2301      	movs	r3, #1
 800c708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c70c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c710:	bfa4      	itt	ge
 800c712:	4643      	movge	r3, r8
 800c714:	46a0      	movge	r8, r4
 800c716:	4630      	mov	r0, r6
 800c718:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c71c:	bfa6      	itte	ge
 800c71e:	461c      	movge	r4, r3
 800c720:	2500      	movge	r5, #0
 800c722:	2501      	movlt	r5, #1
 800c724:	f7ff fcf0 	bl	800c108 <_Balloc>
 800c728:	b920      	cbnz	r0, 800c734 <__mdiff+0x5c>
 800c72a:	4b2e      	ldr	r3, [pc, #184]	; (800c7e4 <__mdiff+0x10c>)
 800c72c:	4602      	mov	r2, r0
 800c72e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c732:	e7e5      	b.n	800c700 <__mdiff+0x28>
 800c734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c738:	6926      	ldr	r6, [r4, #16]
 800c73a:	60c5      	str	r5, [r0, #12]
 800c73c:	f104 0914 	add.w	r9, r4, #20
 800c740:	f108 0514 	add.w	r5, r8, #20
 800c744:	f100 0e14 	add.w	lr, r0, #20
 800c748:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c74c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c750:	f108 0210 	add.w	r2, r8, #16
 800c754:	46f2      	mov	sl, lr
 800c756:	2100      	movs	r1, #0
 800c758:	f859 3b04 	ldr.w	r3, [r9], #4
 800c75c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c760:	fa1f f883 	uxth.w	r8, r3
 800c764:	fa11 f18b 	uxtah	r1, r1, fp
 800c768:	0c1b      	lsrs	r3, r3, #16
 800c76a:	eba1 0808 	sub.w	r8, r1, r8
 800c76e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c772:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c776:	fa1f f888 	uxth.w	r8, r8
 800c77a:	1419      	asrs	r1, r3, #16
 800c77c:	454e      	cmp	r6, r9
 800c77e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c782:	f84a 3b04 	str.w	r3, [sl], #4
 800c786:	d8e7      	bhi.n	800c758 <__mdiff+0x80>
 800c788:	1b33      	subs	r3, r6, r4
 800c78a:	3b15      	subs	r3, #21
 800c78c:	f023 0303 	bic.w	r3, r3, #3
 800c790:	3304      	adds	r3, #4
 800c792:	3415      	adds	r4, #21
 800c794:	42a6      	cmp	r6, r4
 800c796:	bf38      	it	cc
 800c798:	2304      	movcc	r3, #4
 800c79a:	441d      	add	r5, r3
 800c79c:	4473      	add	r3, lr
 800c79e:	469e      	mov	lr, r3
 800c7a0:	462e      	mov	r6, r5
 800c7a2:	4566      	cmp	r6, ip
 800c7a4:	d30e      	bcc.n	800c7c4 <__mdiff+0xec>
 800c7a6:	f10c 0203 	add.w	r2, ip, #3
 800c7aa:	1b52      	subs	r2, r2, r5
 800c7ac:	f022 0203 	bic.w	r2, r2, #3
 800c7b0:	3d03      	subs	r5, #3
 800c7b2:	45ac      	cmp	ip, r5
 800c7b4:	bf38      	it	cc
 800c7b6:	2200      	movcc	r2, #0
 800c7b8:	441a      	add	r2, r3
 800c7ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c7be:	b17b      	cbz	r3, 800c7e0 <__mdiff+0x108>
 800c7c0:	6107      	str	r7, [r0, #16]
 800c7c2:	e7a3      	b.n	800c70c <__mdiff+0x34>
 800c7c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7c8:	fa11 f288 	uxtah	r2, r1, r8
 800c7cc:	1414      	asrs	r4, r2, #16
 800c7ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7d2:	b292      	uxth	r2, r2
 800c7d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7d8:	f84e 2b04 	str.w	r2, [lr], #4
 800c7dc:	1421      	asrs	r1, r4, #16
 800c7de:	e7e0      	b.n	800c7a2 <__mdiff+0xca>
 800c7e0:	3f01      	subs	r7, #1
 800c7e2:	e7ea      	b.n	800c7ba <__mdiff+0xe2>
 800c7e4:	0800dfe8 	.word	0x0800dfe8
 800c7e8:	0800e074 	.word	0x0800e074

0800c7ec <__ulp>:
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	ed8d 0b00 	vstr	d0, [sp]
 800c7f2:	9b01      	ldr	r3, [sp, #4]
 800c7f4:	4912      	ldr	r1, [pc, #72]	; (800c840 <__ulp+0x54>)
 800c7f6:	4019      	ands	r1, r3
 800c7f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	dd05      	ble.n	800c80c <__ulp+0x20>
 800c800:	2200      	movs	r2, #0
 800c802:	460b      	mov	r3, r1
 800c804:	ec43 2b10 	vmov	d0, r2, r3
 800c808:	b002      	add	sp, #8
 800c80a:	4770      	bx	lr
 800c80c:	4249      	negs	r1, r1
 800c80e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c812:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	da04      	bge.n	800c82a <__ulp+0x3e>
 800c820:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c824:	fa41 f300 	asr.w	r3, r1, r0
 800c828:	e7ec      	b.n	800c804 <__ulp+0x18>
 800c82a:	f1a0 0114 	sub.w	r1, r0, #20
 800c82e:	291e      	cmp	r1, #30
 800c830:	bfda      	itte	le
 800c832:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c836:	fa20 f101 	lsrle.w	r1, r0, r1
 800c83a:	2101      	movgt	r1, #1
 800c83c:	460a      	mov	r2, r1
 800c83e:	e7e1      	b.n	800c804 <__ulp+0x18>
 800c840:	7ff00000 	.word	0x7ff00000

0800c844 <__b2d>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	6905      	ldr	r5, [r0, #16]
 800c848:	f100 0714 	add.w	r7, r0, #20
 800c84c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c850:	1f2e      	subs	r6, r5, #4
 800c852:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c856:	4620      	mov	r0, r4
 800c858:	f7ff fd48 	bl	800c2ec <__hi0bits>
 800c85c:	f1c0 0320 	rsb	r3, r0, #32
 800c860:	280a      	cmp	r0, #10
 800c862:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c8e0 <__b2d+0x9c>
 800c866:	600b      	str	r3, [r1, #0]
 800c868:	dc14      	bgt.n	800c894 <__b2d+0x50>
 800c86a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c86e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c872:	42b7      	cmp	r7, r6
 800c874:	ea41 030c 	orr.w	r3, r1, ip
 800c878:	bf34      	ite	cc
 800c87a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c87e:	2100      	movcs	r1, #0
 800c880:	3015      	adds	r0, #21
 800c882:	fa04 f000 	lsl.w	r0, r4, r0
 800c886:	fa21 f10e 	lsr.w	r1, r1, lr
 800c88a:	ea40 0201 	orr.w	r2, r0, r1
 800c88e:	ec43 2b10 	vmov	d0, r2, r3
 800c892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c894:	42b7      	cmp	r7, r6
 800c896:	bf3a      	itte	cc
 800c898:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c89c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c8a0:	2100      	movcs	r1, #0
 800c8a2:	380b      	subs	r0, #11
 800c8a4:	d017      	beq.n	800c8d6 <__b2d+0x92>
 800c8a6:	f1c0 0c20 	rsb	ip, r0, #32
 800c8aa:	fa04 f500 	lsl.w	r5, r4, r0
 800c8ae:	42be      	cmp	r6, r7
 800c8b0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c8b4:	ea45 0504 	orr.w	r5, r5, r4
 800c8b8:	bf8c      	ite	hi
 800c8ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c8be:	2400      	movls	r4, #0
 800c8c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c8c4:	fa01 f000 	lsl.w	r0, r1, r0
 800c8c8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c8cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c8d0:	ea40 0204 	orr.w	r2, r0, r4
 800c8d4:	e7db      	b.n	800c88e <__b2d+0x4a>
 800c8d6:	ea44 030c 	orr.w	r3, r4, ip
 800c8da:	460a      	mov	r2, r1
 800c8dc:	e7d7      	b.n	800c88e <__b2d+0x4a>
 800c8de:	bf00      	nop
 800c8e0:	3ff00000 	.word	0x3ff00000

0800c8e4 <__d2b>:
 800c8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8e8:	4689      	mov	r9, r1
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	ec57 6b10 	vmov	r6, r7, d0
 800c8f0:	4690      	mov	r8, r2
 800c8f2:	f7ff fc09 	bl	800c108 <_Balloc>
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	b930      	cbnz	r0, 800c908 <__d2b+0x24>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	4b25      	ldr	r3, [pc, #148]	; (800c994 <__d2b+0xb0>)
 800c8fe:	4826      	ldr	r0, [pc, #152]	; (800c998 <__d2b+0xb4>)
 800c900:	f240 310a 	movw	r1, #778	; 0x30a
 800c904:	f7fe f9ba 	bl	800ac7c <__assert_func>
 800c908:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c90c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c910:	bb35      	cbnz	r5, 800c960 <__d2b+0x7c>
 800c912:	2e00      	cmp	r6, #0
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	d028      	beq.n	800c96a <__d2b+0x86>
 800c918:	4668      	mov	r0, sp
 800c91a:	9600      	str	r6, [sp, #0]
 800c91c:	f7ff fd06 	bl	800c32c <__lo0bits>
 800c920:	9900      	ldr	r1, [sp, #0]
 800c922:	b300      	cbz	r0, 800c966 <__d2b+0x82>
 800c924:	9a01      	ldr	r2, [sp, #4]
 800c926:	f1c0 0320 	rsb	r3, r0, #32
 800c92a:	fa02 f303 	lsl.w	r3, r2, r3
 800c92e:	430b      	orrs	r3, r1
 800c930:	40c2      	lsrs	r2, r0
 800c932:	6163      	str	r3, [r4, #20]
 800c934:	9201      	str	r2, [sp, #4]
 800c936:	9b01      	ldr	r3, [sp, #4]
 800c938:	61a3      	str	r3, [r4, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	bf14      	ite	ne
 800c93e:	2202      	movne	r2, #2
 800c940:	2201      	moveq	r2, #1
 800c942:	6122      	str	r2, [r4, #16]
 800c944:	b1d5      	cbz	r5, 800c97c <__d2b+0x98>
 800c946:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c94a:	4405      	add	r5, r0
 800c94c:	f8c9 5000 	str.w	r5, [r9]
 800c950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c954:	f8c8 0000 	str.w	r0, [r8]
 800c958:	4620      	mov	r0, r4
 800c95a:	b003      	add	sp, #12
 800c95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c964:	e7d5      	b.n	800c912 <__d2b+0x2e>
 800c966:	6161      	str	r1, [r4, #20]
 800c968:	e7e5      	b.n	800c936 <__d2b+0x52>
 800c96a:	a801      	add	r0, sp, #4
 800c96c:	f7ff fcde 	bl	800c32c <__lo0bits>
 800c970:	9b01      	ldr	r3, [sp, #4]
 800c972:	6163      	str	r3, [r4, #20]
 800c974:	2201      	movs	r2, #1
 800c976:	6122      	str	r2, [r4, #16]
 800c978:	3020      	adds	r0, #32
 800c97a:	e7e3      	b.n	800c944 <__d2b+0x60>
 800c97c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c984:	f8c9 0000 	str.w	r0, [r9]
 800c988:	6918      	ldr	r0, [r3, #16]
 800c98a:	f7ff fcaf 	bl	800c2ec <__hi0bits>
 800c98e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c992:	e7df      	b.n	800c954 <__d2b+0x70>
 800c994:	0800dfe8 	.word	0x0800dfe8
 800c998:	0800e074 	.word	0x0800e074

0800c99c <__ratio>:
 800c99c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a0:	4688      	mov	r8, r1
 800c9a2:	4669      	mov	r1, sp
 800c9a4:	4681      	mov	r9, r0
 800c9a6:	f7ff ff4d 	bl	800c844 <__b2d>
 800c9aa:	a901      	add	r1, sp, #4
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	ec55 4b10 	vmov	r4, r5, d0
 800c9b2:	f7ff ff47 	bl	800c844 <__b2d>
 800c9b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9ba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9be:	eba3 0c02 	sub.w	ip, r3, r2
 800c9c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9c6:	1a9b      	subs	r3, r3, r2
 800c9c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c9cc:	ec51 0b10 	vmov	r0, r1, d0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	bfd6      	itet	le
 800c9d4:	460a      	movle	r2, r1
 800c9d6:	462a      	movgt	r2, r5
 800c9d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9dc:	468b      	mov	fp, r1
 800c9de:	462f      	mov	r7, r5
 800c9e0:	bfd4      	ite	le
 800c9e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c9e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	ee10 2a10 	vmov	r2, s0
 800c9f0:	465b      	mov	r3, fp
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	f7f3 ff2a 	bl	800084c <__aeabi_ddiv>
 800c9f8:	ec41 0b10 	vmov	d0, r0, r1
 800c9fc:	b003      	add	sp, #12
 800c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca02 <__copybits>:
 800ca02:	3901      	subs	r1, #1
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	1149      	asrs	r1, r1, #5
 800ca08:	6914      	ldr	r4, [r2, #16]
 800ca0a:	3101      	adds	r1, #1
 800ca0c:	f102 0314 	add.w	r3, r2, #20
 800ca10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca18:	1f05      	subs	r5, r0, #4
 800ca1a:	42a3      	cmp	r3, r4
 800ca1c:	d30c      	bcc.n	800ca38 <__copybits+0x36>
 800ca1e:	1aa3      	subs	r3, r4, r2
 800ca20:	3b11      	subs	r3, #17
 800ca22:	f023 0303 	bic.w	r3, r3, #3
 800ca26:	3211      	adds	r2, #17
 800ca28:	42a2      	cmp	r2, r4
 800ca2a:	bf88      	it	hi
 800ca2c:	2300      	movhi	r3, #0
 800ca2e:	4418      	add	r0, r3
 800ca30:	2300      	movs	r3, #0
 800ca32:	4288      	cmp	r0, r1
 800ca34:	d305      	bcc.n	800ca42 <__copybits+0x40>
 800ca36:	bd70      	pop	{r4, r5, r6, pc}
 800ca38:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca3c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca40:	e7eb      	b.n	800ca1a <__copybits+0x18>
 800ca42:	f840 3b04 	str.w	r3, [r0], #4
 800ca46:	e7f4      	b.n	800ca32 <__copybits+0x30>

0800ca48 <__any_on>:
 800ca48:	f100 0214 	add.w	r2, r0, #20
 800ca4c:	6900      	ldr	r0, [r0, #16]
 800ca4e:	114b      	asrs	r3, r1, #5
 800ca50:	4298      	cmp	r0, r3
 800ca52:	b510      	push	{r4, lr}
 800ca54:	db11      	blt.n	800ca7a <__any_on+0x32>
 800ca56:	dd0a      	ble.n	800ca6e <__any_on+0x26>
 800ca58:	f011 011f 	ands.w	r1, r1, #31
 800ca5c:	d007      	beq.n	800ca6e <__any_on+0x26>
 800ca5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca62:	fa24 f001 	lsr.w	r0, r4, r1
 800ca66:	fa00 f101 	lsl.w	r1, r0, r1
 800ca6a:	428c      	cmp	r4, r1
 800ca6c:	d10b      	bne.n	800ca86 <__any_on+0x3e>
 800ca6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d803      	bhi.n	800ca7e <__any_on+0x36>
 800ca76:	2000      	movs	r0, #0
 800ca78:	bd10      	pop	{r4, pc}
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	e7f7      	b.n	800ca6e <__any_on+0x26>
 800ca7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca82:	2900      	cmp	r1, #0
 800ca84:	d0f5      	beq.n	800ca72 <__any_on+0x2a>
 800ca86:	2001      	movs	r0, #1
 800ca88:	e7f6      	b.n	800ca78 <__any_on+0x30>

0800ca8a <_calloc_r>:
 800ca8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca8c:	fba1 2402 	umull	r2, r4, r1, r2
 800ca90:	b94c      	cbnz	r4, 800caa6 <_calloc_r+0x1c>
 800ca92:	4611      	mov	r1, r2
 800ca94:	9201      	str	r2, [sp, #4]
 800ca96:	f000 f87b 	bl	800cb90 <_malloc_r>
 800ca9a:	9a01      	ldr	r2, [sp, #4]
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	b930      	cbnz	r0, 800caae <_calloc_r+0x24>
 800caa0:	4628      	mov	r0, r5
 800caa2:	b003      	add	sp, #12
 800caa4:	bd30      	pop	{r4, r5, pc}
 800caa6:	220c      	movs	r2, #12
 800caa8:	6002      	str	r2, [r0, #0]
 800caaa:	2500      	movs	r5, #0
 800caac:	e7f8      	b.n	800caa0 <_calloc_r+0x16>
 800caae:	4621      	mov	r1, r4
 800cab0:	f7fc fdc8 	bl	8009644 <memset>
 800cab4:	e7f4      	b.n	800caa0 <_calloc_r+0x16>
	...

0800cab8 <_free_r>:
 800cab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caba:	2900      	cmp	r1, #0
 800cabc:	d044      	beq.n	800cb48 <_free_r+0x90>
 800cabe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cac2:	9001      	str	r0, [sp, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f1a1 0404 	sub.w	r4, r1, #4
 800caca:	bfb8      	it	lt
 800cacc:	18e4      	addlt	r4, r4, r3
 800cace:	f000 fec7 	bl	800d860 <__malloc_lock>
 800cad2:	4a1e      	ldr	r2, [pc, #120]	; (800cb4c <_free_r+0x94>)
 800cad4:	9801      	ldr	r0, [sp, #4]
 800cad6:	6813      	ldr	r3, [r2, #0]
 800cad8:	b933      	cbnz	r3, 800cae8 <_free_r+0x30>
 800cada:	6063      	str	r3, [r4, #4]
 800cadc:	6014      	str	r4, [r2, #0]
 800cade:	b003      	add	sp, #12
 800cae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cae4:	f000 bec2 	b.w	800d86c <__malloc_unlock>
 800cae8:	42a3      	cmp	r3, r4
 800caea:	d908      	bls.n	800cafe <_free_r+0x46>
 800caec:	6825      	ldr	r5, [r4, #0]
 800caee:	1961      	adds	r1, r4, r5
 800caf0:	428b      	cmp	r3, r1
 800caf2:	bf01      	itttt	eq
 800caf4:	6819      	ldreq	r1, [r3, #0]
 800caf6:	685b      	ldreq	r3, [r3, #4]
 800caf8:	1949      	addeq	r1, r1, r5
 800cafa:	6021      	streq	r1, [r4, #0]
 800cafc:	e7ed      	b.n	800cada <_free_r+0x22>
 800cafe:	461a      	mov	r2, r3
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	b10b      	cbz	r3, 800cb08 <_free_r+0x50>
 800cb04:	42a3      	cmp	r3, r4
 800cb06:	d9fa      	bls.n	800cafe <_free_r+0x46>
 800cb08:	6811      	ldr	r1, [r2, #0]
 800cb0a:	1855      	adds	r5, r2, r1
 800cb0c:	42a5      	cmp	r5, r4
 800cb0e:	d10b      	bne.n	800cb28 <_free_r+0x70>
 800cb10:	6824      	ldr	r4, [r4, #0]
 800cb12:	4421      	add	r1, r4
 800cb14:	1854      	adds	r4, r2, r1
 800cb16:	42a3      	cmp	r3, r4
 800cb18:	6011      	str	r1, [r2, #0]
 800cb1a:	d1e0      	bne.n	800cade <_free_r+0x26>
 800cb1c:	681c      	ldr	r4, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	6053      	str	r3, [r2, #4]
 800cb22:	4421      	add	r1, r4
 800cb24:	6011      	str	r1, [r2, #0]
 800cb26:	e7da      	b.n	800cade <_free_r+0x26>
 800cb28:	d902      	bls.n	800cb30 <_free_r+0x78>
 800cb2a:	230c      	movs	r3, #12
 800cb2c:	6003      	str	r3, [r0, #0]
 800cb2e:	e7d6      	b.n	800cade <_free_r+0x26>
 800cb30:	6825      	ldr	r5, [r4, #0]
 800cb32:	1961      	adds	r1, r4, r5
 800cb34:	428b      	cmp	r3, r1
 800cb36:	bf04      	itt	eq
 800cb38:	6819      	ldreq	r1, [r3, #0]
 800cb3a:	685b      	ldreq	r3, [r3, #4]
 800cb3c:	6063      	str	r3, [r4, #4]
 800cb3e:	bf04      	itt	eq
 800cb40:	1949      	addeq	r1, r1, r5
 800cb42:	6021      	streq	r1, [r4, #0]
 800cb44:	6054      	str	r4, [r2, #4]
 800cb46:	e7ca      	b.n	800cade <_free_r+0x26>
 800cb48:	b003      	add	sp, #12
 800cb4a:	bd30      	pop	{r4, r5, pc}
 800cb4c:	20000578 	.word	0x20000578

0800cb50 <sbrk_aligned>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	4e0e      	ldr	r6, [pc, #56]	; (800cb8c <sbrk_aligned+0x3c>)
 800cb54:	460c      	mov	r4, r1
 800cb56:	6831      	ldr	r1, [r6, #0]
 800cb58:	4605      	mov	r5, r0
 800cb5a:	b911      	cbnz	r1, 800cb62 <sbrk_aligned+0x12>
 800cb5c:	f000 fb4c 	bl	800d1f8 <_sbrk_r>
 800cb60:	6030      	str	r0, [r6, #0]
 800cb62:	4621      	mov	r1, r4
 800cb64:	4628      	mov	r0, r5
 800cb66:	f000 fb47 	bl	800d1f8 <_sbrk_r>
 800cb6a:	1c43      	adds	r3, r0, #1
 800cb6c:	d00a      	beq.n	800cb84 <sbrk_aligned+0x34>
 800cb6e:	1cc4      	adds	r4, r0, #3
 800cb70:	f024 0403 	bic.w	r4, r4, #3
 800cb74:	42a0      	cmp	r0, r4
 800cb76:	d007      	beq.n	800cb88 <sbrk_aligned+0x38>
 800cb78:	1a21      	subs	r1, r4, r0
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 fb3c 	bl	800d1f8 <_sbrk_r>
 800cb80:	3001      	adds	r0, #1
 800cb82:	d101      	bne.n	800cb88 <sbrk_aligned+0x38>
 800cb84:	f04f 34ff 	mov.w	r4, #4294967295
 800cb88:	4620      	mov	r0, r4
 800cb8a:	bd70      	pop	{r4, r5, r6, pc}
 800cb8c:	2000057c 	.word	0x2000057c

0800cb90 <_malloc_r>:
 800cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb94:	1ccd      	adds	r5, r1, #3
 800cb96:	f025 0503 	bic.w	r5, r5, #3
 800cb9a:	3508      	adds	r5, #8
 800cb9c:	2d0c      	cmp	r5, #12
 800cb9e:	bf38      	it	cc
 800cba0:	250c      	movcc	r5, #12
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	4607      	mov	r7, r0
 800cba6:	db01      	blt.n	800cbac <_malloc_r+0x1c>
 800cba8:	42a9      	cmp	r1, r5
 800cbaa:	d905      	bls.n	800cbb8 <_malloc_r+0x28>
 800cbac:	230c      	movs	r3, #12
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	2600      	movs	r6, #0
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb8:	4e2e      	ldr	r6, [pc, #184]	; (800cc74 <_malloc_r+0xe4>)
 800cbba:	f000 fe51 	bl	800d860 <__malloc_lock>
 800cbbe:	6833      	ldr	r3, [r6, #0]
 800cbc0:	461c      	mov	r4, r3
 800cbc2:	bb34      	cbnz	r4, 800cc12 <_malloc_r+0x82>
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f7ff ffc2 	bl	800cb50 <sbrk_aligned>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	4604      	mov	r4, r0
 800cbd0:	d14d      	bne.n	800cc6e <_malloc_r+0xde>
 800cbd2:	6834      	ldr	r4, [r6, #0]
 800cbd4:	4626      	mov	r6, r4
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d140      	bne.n	800cc5c <_malloc_r+0xcc>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4638      	mov	r0, r7
 800cbe0:	eb04 0803 	add.w	r8, r4, r3
 800cbe4:	f000 fb08 	bl	800d1f8 <_sbrk_r>
 800cbe8:	4580      	cmp	r8, r0
 800cbea:	d13a      	bne.n	800cc62 <_malloc_r+0xd2>
 800cbec:	6821      	ldr	r1, [r4, #0]
 800cbee:	3503      	adds	r5, #3
 800cbf0:	1a6d      	subs	r5, r5, r1
 800cbf2:	f025 0503 	bic.w	r5, r5, #3
 800cbf6:	3508      	adds	r5, #8
 800cbf8:	2d0c      	cmp	r5, #12
 800cbfa:	bf38      	it	cc
 800cbfc:	250c      	movcc	r5, #12
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4638      	mov	r0, r7
 800cc02:	f7ff ffa5 	bl	800cb50 <sbrk_aligned>
 800cc06:	3001      	adds	r0, #1
 800cc08:	d02b      	beq.n	800cc62 <_malloc_r+0xd2>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	442b      	add	r3, r5
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	e00e      	b.n	800cc30 <_malloc_r+0xa0>
 800cc12:	6822      	ldr	r2, [r4, #0]
 800cc14:	1b52      	subs	r2, r2, r5
 800cc16:	d41e      	bmi.n	800cc56 <_malloc_r+0xc6>
 800cc18:	2a0b      	cmp	r2, #11
 800cc1a:	d916      	bls.n	800cc4a <_malloc_r+0xba>
 800cc1c:	1961      	adds	r1, r4, r5
 800cc1e:	42a3      	cmp	r3, r4
 800cc20:	6025      	str	r5, [r4, #0]
 800cc22:	bf18      	it	ne
 800cc24:	6059      	strne	r1, [r3, #4]
 800cc26:	6863      	ldr	r3, [r4, #4]
 800cc28:	bf08      	it	eq
 800cc2a:	6031      	streq	r1, [r6, #0]
 800cc2c:	5162      	str	r2, [r4, r5]
 800cc2e:	604b      	str	r3, [r1, #4]
 800cc30:	4638      	mov	r0, r7
 800cc32:	f104 060b 	add.w	r6, r4, #11
 800cc36:	f000 fe19 	bl	800d86c <__malloc_unlock>
 800cc3a:	f026 0607 	bic.w	r6, r6, #7
 800cc3e:	1d23      	adds	r3, r4, #4
 800cc40:	1af2      	subs	r2, r6, r3
 800cc42:	d0b6      	beq.n	800cbb2 <_malloc_r+0x22>
 800cc44:	1b9b      	subs	r3, r3, r6
 800cc46:	50a3      	str	r3, [r4, r2]
 800cc48:	e7b3      	b.n	800cbb2 <_malloc_r+0x22>
 800cc4a:	6862      	ldr	r2, [r4, #4]
 800cc4c:	42a3      	cmp	r3, r4
 800cc4e:	bf0c      	ite	eq
 800cc50:	6032      	streq	r2, [r6, #0]
 800cc52:	605a      	strne	r2, [r3, #4]
 800cc54:	e7ec      	b.n	800cc30 <_malloc_r+0xa0>
 800cc56:	4623      	mov	r3, r4
 800cc58:	6864      	ldr	r4, [r4, #4]
 800cc5a:	e7b2      	b.n	800cbc2 <_malloc_r+0x32>
 800cc5c:	4634      	mov	r4, r6
 800cc5e:	6876      	ldr	r6, [r6, #4]
 800cc60:	e7b9      	b.n	800cbd6 <_malloc_r+0x46>
 800cc62:	230c      	movs	r3, #12
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	4638      	mov	r0, r7
 800cc68:	f000 fe00 	bl	800d86c <__malloc_unlock>
 800cc6c:	e7a1      	b.n	800cbb2 <_malloc_r+0x22>
 800cc6e:	6025      	str	r5, [r4, #0]
 800cc70:	e7de      	b.n	800cc30 <_malloc_r+0xa0>
 800cc72:	bf00      	nop
 800cc74:	20000578 	.word	0x20000578

0800cc78 <__ssputs_r>:
 800cc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc7c:	688e      	ldr	r6, [r1, #8]
 800cc7e:	429e      	cmp	r6, r3
 800cc80:	4682      	mov	sl, r0
 800cc82:	460c      	mov	r4, r1
 800cc84:	4690      	mov	r8, r2
 800cc86:	461f      	mov	r7, r3
 800cc88:	d838      	bhi.n	800ccfc <__ssputs_r+0x84>
 800cc8a:	898a      	ldrh	r2, [r1, #12]
 800cc8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc90:	d032      	beq.n	800ccf8 <__ssputs_r+0x80>
 800cc92:	6825      	ldr	r5, [r4, #0]
 800cc94:	6909      	ldr	r1, [r1, #16]
 800cc96:	eba5 0901 	sub.w	r9, r5, r1
 800cc9a:	6965      	ldr	r5, [r4, #20]
 800cc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cca4:	3301      	adds	r3, #1
 800cca6:	444b      	add	r3, r9
 800cca8:	106d      	asrs	r5, r5, #1
 800ccaa:	429d      	cmp	r5, r3
 800ccac:	bf38      	it	cc
 800ccae:	461d      	movcc	r5, r3
 800ccb0:	0553      	lsls	r3, r2, #21
 800ccb2:	d531      	bpl.n	800cd18 <__ssputs_r+0xa0>
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f7ff ff6b 	bl	800cb90 <_malloc_r>
 800ccba:	4606      	mov	r6, r0
 800ccbc:	b950      	cbnz	r0, 800ccd4 <__ssputs_r+0x5c>
 800ccbe:	230c      	movs	r3, #12
 800ccc0:	f8ca 3000 	str.w	r3, [sl]
 800ccc4:	89a3      	ldrh	r3, [r4, #12]
 800ccc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccca:	81a3      	strh	r3, [r4, #12]
 800cccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd4:	6921      	ldr	r1, [r4, #16]
 800ccd6:	464a      	mov	r2, r9
 800ccd8:	f7ff fa08 	bl	800c0ec <memcpy>
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce6:	81a3      	strh	r3, [r4, #12]
 800cce8:	6126      	str	r6, [r4, #16]
 800ccea:	6165      	str	r5, [r4, #20]
 800ccec:	444e      	add	r6, r9
 800ccee:	eba5 0509 	sub.w	r5, r5, r9
 800ccf2:	6026      	str	r6, [r4, #0]
 800ccf4:	60a5      	str	r5, [r4, #8]
 800ccf6:	463e      	mov	r6, r7
 800ccf8:	42be      	cmp	r6, r7
 800ccfa:	d900      	bls.n	800ccfe <__ssputs_r+0x86>
 800ccfc:	463e      	mov	r6, r7
 800ccfe:	6820      	ldr	r0, [r4, #0]
 800cd00:	4632      	mov	r2, r6
 800cd02:	4641      	mov	r1, r8
 800cd04:	f000 fd92 	bl	800d82c <memmove>
 800cd08:	68a3      	ldr	r3, [r4, #8]
 800cd0a:	1b9b      	subs	r3, r3, r6
 800cd0c:	60a3      	str	r3, [r4, #8]
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	4433      	add	r3, r6
 800cd12:	6023      	str	r3, [r4, #0]
 800cd14:	2000      	movs	r0, #0
 800cd16:	e7db      	b.n	800ccd0 <__ssputs_r+0x58>
 800cd18:	462a      	mov	r2, r5
 800cd1a:	f000 fdad 	bl	800d878 <_realloc_r>
 800cd1e:	4606      	mov	r6, r0
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d1e1      	bne.n	800cce8 <__ssputs_r+0x70>
 800cd24:	6921      	ldr	r1, [r4, #16]
 800cd26:	4650      	mov	r0, sl
 800cd28:	f7ff fec6 	bl	800cab8 <_free_r>
 800cd2c:	e7c7      	b.n	800ccbe <__ssputs_r+0x46>
	...

0800cd30 <_svfiprintf_r>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	4698      	mov	r8, r3
 800cd36:	898b      	ldrh	r3, [r1, #12]
 800cd38:	061b      	lsls	r3, r3, #24
 800cd3a:	b09d      	sub	sp, #116	; 0x74
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	460d      	mov	r5, r1
 800cd40:	4614      	mov	r4, r2
 800cd42:	d50e      	bpl.n	800cd62 <_svfiprintf_r+0x32>
 800cd44:	690b      	ldr	r3, [r1, #16]
 800cd46:	b963      	cbnz	r3, 800cd62 <_svfiprintf_r+0x32>
 800cd48:	2140      	movs	r1, #64	; 0x40
 800cd4a:	f7ff ff21 	bl	800cb90 <_malloc_r>
 800cd4e:	6028      	str	r0, [r5, #0]
 800cd50:	6128      	str	r0, [r5, #16]
 800cd52:	b920      	cbnz	r0, 800cd5e <_svfiprintf_r+0x2e>
 800cd54:	230c      	movs	r3, #12
 800cd56:	603b      	str	r3, [r7, #0]
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	e0d1      	b.n	800cf02 <_svfiprintf_r+0x1d2>
 800cd5e:	2340      	movs	r3, #64	; 0x40
 800cd60:	616b      	str	r3, [r5, #20]
 800cd62:	2300      	movs	r3, #0
 800cd64:	9309      	str	r3, [sp, #36]	; 0x24
 800cd66:	2320      	movs	r3, #32
 800cd68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd70:	2330      	movs	r3, #48	; 0x30
 800cd72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf1c <_svfiprintf_r+0x1ec>
 800cd76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd7a:	f04f 0901 	mov.w	r9, #1
 800cd7e:	4623      	mov	r3, r4
 800cd80:	469a      	mov	sl, r3
 800cd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd86:	b10a      	cbz	r2, 800cd8c <_svfiprintf_r+0x5c>
 800cd88:	2a25      	cmp	r2, #37	; 0x25
 800cd8a:	d1f9      	bne.n	800cd80 <_svfiprintf_r+0x50>
 800cd8c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd90:	d00b      	beq.n	800cdaa <_svfiprintf_r+0x7a>
 800cd92:	465b      	mov	r3, fp
 800cd94:	4622      	mov	r2, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7ff ff6d 	bl	800cc78 <__ssputs_r>
 800cd9e:	3001      	adds	r0, #1
 800cda0:	f000 80aa 	beq.w	800cef8 <_svfiprintf_r+0x1c8>
 800cda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda6:	445a      	add	r2, fp
 800cda8:	9209      	str	r2, [sp, #36]	; 0x24
 800cdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 80a2 	beq.w	800cef8 <_svfiprintf_r+0x1c8>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdbe:	f10a 0a01 	add.w	sl, sl, #1
 800cdc2:	9304      	str	r3, [sp, #16]
 800cdc4:	9307      	str	r3, [sp, #28]
 800cdc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdca:	931a      	str	r3, [sp, #104]	; 0x68
 800cdcc:	4654      	mov	r4, sl
 800cdce:	2205      	movs	r2, #5
 800cdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd4:	4851      	ldr	r0, [pc, #324]	; (800cf1c <_svfiprintf_r+0x1ec>)
 800cdd6:	f7f3 fa03 	bl	80001e0 <memchr>
 800cdda:	9a04      	ldr	r2, [sp, #16]
 800cddc:	b9d8      	cbnz	r0, 800ce16 <_svfiprintf_r+0xe6>
 800cdde:	06d0      	lsls	r0, r2, #27
 800cde0:	bf44      	itt	mi
 800cde2:	2320      	movmi	r3, #32
 800cde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cde8:	0711      	lsls	r1, r2, #28
 800cdea:	bf44      	itt	mi
 800cdec:	232b      	movmi	r3, #43	; 0x2b
 800cdee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdf2:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf6:	2b2a      	cmp	r3, #42	; 0x2a
 800cdf8:	d015      	beq.n	800ce26 <_svfiprintf_r+0xf6>
 800cdfa:	9a07      	ldr	r2, [sp, #28]
 800cdfc:	4654      	mov	r4, sl
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f04f 0c0a 	mov.w	ip, #10
 800ce04:	4621      	mov	r1, r4
 800ce06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce0a:	3b30      	subs	r3, #48	; 0x30
 800ce0c:	2b09      	cmp	r3, #9
 800ce0e:	d94e      	bls.n	800ceae <_svfiprintf_r+0x17e>
 800ce10:	b1b0      	cbz	r0, 800ce40 <_svfiprintf_r+0x110>
 800ce12:	9207      	str	r2, [sp, #28]
 800ce14:	e014      	b.n	800ce40 <_svfiprintf_r+0x110>
 800ce16:	eba0 0308 	sub.w	r3, r0, r8
 800ce1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	9304      	str	r3, [sp, #16]
 800ce22:	46a2      	mov	sl, r4
 800ce24:	e7d2      	b.n	800cdcc <_svfiprintf_r+0x9c>
 800ce26:	9b03      	ldr	r3, [sp, #12]
 800ce28:	1d19      	adds	r1, r3, #4
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	9103      	str	r1, [sp, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	bfbb      	ittet	lt
 800ce32:	425b      	neglt	r3, r3
 800ce34:	f042 0202 	orrlt.w	r2, r2, #2
 800ce38:	9307      	strge	r3, [sp, #28]
 800ce3a:	9307      	strlt	r3, [sp, #28]
 800ce3c:	bfb8      	it	lt
 800ce3e:	9204      	strlt	r2, [sp, #16]
 800ce40:	7823      	ldrb	r3, [r4, #0]
 800ce42:	2b2e      	cmp	r3, #46	; 0x2e
 800ce44:	d10c      	bne.n	800ce60 <_svfiprintf_r+0x130>
 800ce46:	7863      	ldrb	r3, [r4, #1]
 800ce48:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4a:	d135      	bne.n	800ceb8 <_svfiprintf_r+0x188>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	1d1a      	adds	r2, r3, #4
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	9203      	str	r2, [sp, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	bfb8      	it	lt
 800ce58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce5c:	3402      	adds	r4, #2
 800ce5e:	9305      	str	r3, [sp, #20]
 800ce60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf2c <_svfiprintf_r+0x1fc>
 800ce64:	7821      	ldrb	r1, [r4, #0]
 800ce66:	2203      	movs	r2, #3
 800ce68:	4650      	mov	r0, sl
 800ce6a:	f7f3 f9b9 	bl	80001e0 <memchr>
 800ce6e:	b140      	cbz	r0, 800ce82 <_svfiprintf_r+0x152>
 800ce70:	2340      	movs	r3, #64	; 0x40
 800ce72:	eba0 000a 	sub.w	r0, r0, sl
 800ce76:	fa03 f000 	lsl.w	r0, r3, r0
 800ce7a:	9b04      	ldr	r3, [sp, #16]
 800ce7c:	4303      	orrs	r3, r0
 800ce7e:	3401      	adds	r4, #1
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce86:	4826      	ldr	r0, [pc, #152]	; (800cf20 <_svfiprintf_r+0x1f0>)
 800ce88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce8c:	2206      	movs	r2, #6
 800ce8e:	f7f3 f9a7 	bl	80001e0 <memchr>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d038      	beq.n	800cf08 <_svfiprintf_r+0x1d8>
 800ce96:	4b23      	ldr	r3, [pc, #140]	; (800cf24 <_svfiprintf_r+0x1f4>)
 800ce98:	bb1b      	cbnz	r3, 800cee2 <_svfiprintf_r+0x1b2>
 800ce9a:	9b03      	ldr	r3, [sp, #12]
 800ce9c:	3307      	adds	r3, #7
 800ce9e:	f023 0307 	bic.w	r3, r3, #7
 800cea2:	3308      	adds	r3, #8
 800cea4:	9303      	str	r3, [sp, #12]
 800cea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea8:	4433      	add	r3, r6
 800ceaa:	9309      	str	r3, [sp, #36]	; 0x24
 800ceac:	e767      	b.n	800cd7e <_svfiprintf_r+0x4e>
 800ceae:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	e7a5      	b.n	800ce04 <_svfiprintf_r+0xd4>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	3401      	adds	r4, #1
 800cebc:	9305      	str	r3, [sp, #20]
 800cebe:	4619      	mov	r1, r3
 800cec0:	f04f 0c0a 	mov.w	ip, #10
 800cec4:	4620      	mov	r0, r4
 800cec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceca:	3a30      	subs	r2, #48	; 0x30
 800cecc:	2a09      	cmp	r2, #9
 800cece:	d903      	bls.n	800ced8 <_svfiprintf_r+0x1a8>
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d0c5      	beq.n	800ce60 <_svfiprintf_r+0x130>
 800ced4:	9105      	str	r1, [sp, #20]
 800ced6:	e7c3      	b.n	800ce60 <_svfiprintf_r+0x130>
 800ced8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cedc:	4604      	mov	r4, r0
 800cede:	2301      	movs	r3, #1
 800cee0:	e7f0      	b.n	800cec4 <_svfiprintf_r+0x194>
 800cee2:	ab03      	add	r3, sp, #12
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	462a      	mov	r2, r5
 800cee8:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <_svfiprintf_r+0x1f8>)
 800ceea:	a904      	add	r1, sp, #16
 800ceec:	4638      	mov	r0, r7
 800ceee:	f7fc fc51 	bl	8009794 <_printf_float>
 800cef2:	1c42      	adds	r2, r0, #1
 800cef4:	4606      	mov	r6, r0
 800cef6:	d1d6      	bne.n	800cea6 <_svfiprintf_r+0x176>
 800cef8:	89ab      	ldrh	r3, [r5, #12]
 800cefa:	065b      	lsls	r3, r3, #25
 800cefc:	f53f af2c 	bmi.w	800cd58 <_svfiprintf_r+0x28>
 800cf00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf02:	b01d      	add	sp, #116	; 0x74
 800cf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf08:	ab03      	add	r3, sp, #12
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	462a      	mov	r2, r5
 800cf0e:	4b06      	ldr	r3, [pc, #24]	; (800cf28 <_svfiprintf_r+0x1f8>)
 800cf10:	a904      	add	r1, sp, #16
 800cf12:	4638      	mov	r0, r7
 800cf14:	f7fc fee2 	bl	8009cdc <_printf_i>
 800cf18:	e7eb      	b.n	800cef2 <_svfiprintf_r+0x1c2>
 800cf1a:	bf00      	nop
 800cf1c:	0800e1cc 	.word	0x0800e1cc
 800cf20:	0800e1d6 	.word	0x0800e1d6
 800cf24:	08009795 	.word	0x08009795
 800cf28:	0800cc79 	.word	0x0800cc79
 800cf2c:	0800e1d2 	.word	0x0800e1d2

0800cf30 <__sfputc_r>:
 800cf30:	6893      	ldr	r3, [r2, #8]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	b410      	push	{r4}
 800cf38:	6093      	str	r3, [r2, #8]
 800cf3a:	da08      	bge.n	800cf4e <__sfputc_r+0x1e>
 800cf3c:	6994      	ldr	r4, [r2, #24]
 800cf3e:	42a3      	cmp	r3, r4
 800cf40:	db01      	blt.n	800cf46 <__sfputc_r+0x16>
 800cf42:	290a      	cmp	r1, #10
 800cf44:	d103      	bne.n	800cf4e <__sfputc_r+0x1e>
 800cf46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf4a:	f000 b979 	b.w	800d240 <__swbuf_r>
 800cf4e:	6813      	ldr	r3, [r2, #0]
 800cf50:	1c58      	adds	r0, r3, #1
 800cf52:	6010      	str	r0, [r2, #0]
 800cf54:	7019      	strb	r1, [r3, #0]
 800cf56:	4608      	mov	r0, r1
 800cf58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <__sfputs_r>:
 800cf5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf60:	4606      	mov	r6, r0
 800cf62:	460f      	mov	r7, r1
 800cf64:	4614      	mov	r4, r2
 800cf66:	18d5      	adds	r5, r2, r3
 800cf68:	42ac      	cmp	r4, r5
 800cf6a:	d101      	bne.n	800cf70 <__sfputs_r+0x12>
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	e007      	b.n	800cf80 <__sfputs_r+0x22>
 800cf70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf74:	463a      	mov	r2, r7
 800cf76:	4630      	mov	r0, r6
 800cf78:	f7ff ffda 	bl	800cf30 <__sfputc_r>
 800cf7c:	1c43      	adds	r3, r0, #1
 800cf7e:	d1f3      	bne.n	800cf68 <__sfputs_r+0xa>
 800cf80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf84 <_vfiprintf_r>:
 800cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	460d      	mov	r5, r1
 800cf8a:	b09d      	sub	sp, #116	; 0x74
 800cf8c:	4614      	mov	r4, r2
 800cf8e:	4698      	mov	r8, r3
 800cf90:	4606      	mov	r6, r0
 800cf92:	b118      	cbz	r0, 800cf9c <_vfiprintf_r+0x18>
 800cf94:	6983      	ldr	r3, [r0, #24]
 800cf96:	b90b      	cbnz	r3, 800cf9c <_vfiprintf_r+0x18>
 800cf98:	f000 fb42 	bl	800d620 <__sinit>
 800cf9c:	4b89      	ldr	r3, [pc, #548]	; (800d1c4 <_vfiprintf_r+0x240>)
 800cf9e:	429d      	cmp	r5, r3
 800cfa0:	d11b      	bne.n	800cfda <_vfiprintf_r+0x56>
 800cfa2:	6875      	ldr	r5, [r6, #4]
 800cfa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfa6:	07d9      	lsls	r1, r3, #31
 800cfa8:	d405      	bmi.n	800cfb6 <_vfiprintf_r+0x32>
 800cfaa:	89ab      	ldrh	r3, [r5, #12]
 800cfac:	059a      	lsls	r2, r3, #22
 800cfae:	d402      	bmi.n	800cfb6 <_vfiprintf_r+0x32>
 800cfb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfb2:	f000 fbd3 	bl	800d75c <__retarget_lock_acquire_recursive>
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	071b      	lsls	r3, r3, #28
 800cfba:	d501      	bpl.n	800cfc0 <_vfiprintf_r+0x3c>
 800cfbc:	692b      	ldr	r3, [r5, #16]
 800cfbe:	b9eb      	cbnz	r3, 800cffc <_vfiprintf_r+0x78>
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f000 f99c 	bl	800d300 <__swsetup_r>
 800cfc8:	b1c0      	cbz	r0, 800cffc <_vfiprintf_r+0x78>
 800cfca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfcc:	07dc      	lsls	r4, r3, #31
 800cfce:	d50e      	bpl.n	800cfee <_vfiprintf_r+0x6a>
 800cfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd4:	b01d      	add	sp, #116	; 0x74
 800cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfda:	4b7b      	ldr	r3, [pc, #492]	; (800d1c8 <_vfiprintf_r+0x244>)
 800cfdc:	429d      	cmp	r5, r3
 800cfde:	d101      	bne.n	800cfe4 <_vfiprintf_r+0x60>
 800cfe0:	68b5      	ldr	r5, [r6, #8]
 800cfe2:	e7df      	b.n	800cfa4 <_vfiprintf_r+0x20>
 800cfe4:	4b79      	ldr	r3, [pc, #484]	; (800d1cc <_vfiprintf_r+0x248>)
 800cfe6:	429d      	cmp	r5, r3
 800cfe8:	bf08      	it	eq
 800cfea:	68f5      	ldreq	r5, [r6, #12]
 800cfec:	e7da      	b.n	800cfa4 <_vfiprintf_r+0x20>
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	0598      	lsls	r0, r3, #22
 800cff2:	d4ed      	bmi.n	800cfd0 <_vfiprintf_r+0x4c>
 800cff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff6:	f000 fbb2 	bl	800d75e <__retarget_lock_release_recursive>
 800cffa:	e7e9      	b.n	800cfd0 <_vfiprintf_r+0x4c>
 800cffc:	2300      	movs	r3, #0
 800cffe:	9309      	str	r3, [sp, #36]	; 0x24
 800d000:	2320      	movs	r3, #32
 800d002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d006:	f8cd 800c 	str.w	r8, [sp, #12]
 800d00a:	2330      	movs	r3, #48	; 0x30
 800d00c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d1d0 <_vfiprintf_r+0x24c>
 800d010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d014:	f04f 0901 	mov.w	r9, #1
 800d018:	4623      	mov	r3, r4
 800d01a:	469a      	mov	sl, r3
 800d01c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d020:	b10a      	cbz	r2, 800d026 <_vfiprintf_r+0xa2>
 800d022:	2a25      	cmp	r2, #37	; 0x25
 800d024:	d1f9      	bne.n	800d01a <_vfiprintf_r+0x96>
 800d026:	ebba 0b04 	subs.w	fp, sl, r4
 800d02a:	d00b      	beq.n	800d044 <_vfiprintf_r+0xc0>
 800d02c:	465b      	mov	r3, fp
 800d02e:	4622      	mov	r2, r4
 800d030:	4629      	mov	r1, r5
 800d032:	4630      	mov	r0, r6
 800d034:	f7ff ff93 	bl	800cf5e <__sfputs_r>
 800d038:	3001      	adds	r0, #1
 800d03a:	f000 80aa 	beq.w	800d192 <_vfiprintf_r+0x20e>
 800d03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d040:	445a      	add	r2, fp
 800d042:	9209      	str	r2, [sp, #36]	; 0x24
 800d044:	f89a 3000 	ldrb.w	r3, [sl]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 80a2 	beq.w	800d192 <_vfiprintf_r+0x20e>
 800d04e:	2300      	movs	r3, #0
 800d050:	f04f 32ff 	mov.w	r2, #4294967295
 800d054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d058:	f10a 0a01 	add.w	sl, sl, #1
 800d05c:	9304      	str	r3, [sp, #16]
 800d05e:	9307      	str	r3, [sp, #28]
 800d060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d064:	931a      	str	r3, [sp, #104]	; 0x68
 800d066:	4654      	mov	r4, sl
 800d068:	2205      	movs	r2, #5
 800d06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d06e:	4858      	ldr	r0, [pc, #352]	; (800d1d0 <_vfiprintf_r+0x24c>)
 800d070:	f7f3 f8b6 	bl	80001e0 <memchr>
 800d074:	9a04      	ldr	r2, [sp, #16]
 800d076:	b9d8      	cbnz	r0, 800d0b0 <_vfiprintf_r+0x12c>
 800d078:	06d1      	lsls	r1, r2, #27
 800d07a:	bf44      	itt	mi
 800d07c:	2320      	movmi	r3, #32
 800d07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d082:	0713      	lsls	r3, r2, #28
 800d084:	bf44      	itt	mi
 800d086:	232b      	movmi	r3, #43	; 0x2b
 800d088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d08c:	f89a 3000 	ldrb.w	r3, [sl]
 800d090:	2b2a      	cmp	r3, #42	; 0x2a
 800d092:	d015      	beq.n	800d0c0 <_vfiprintf_r+0x13c>
 800d094:	9a07      	ldr	r2, [sp, #28]
 800d096:	4654      	mov	r4, sl
 800d098:	2000      	movs	r0, #0
 800d09a:	f04f 0c0a 	mov.w	ip, #10
 800d09e:	4621      	mov	r1, r4
 800d0a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0a4:	3b30      	subs	r3, #48	; 0x30
 800d0a6:	2b09      	cmp	r3, #9
 800d0a8:	d94e      	bls.n	800d148 <_vfiprintf_r+0x1c4>
 800d0aa:	b1b0      	cbz	r0, 800d0da <_vfiprintf_r+0x156>
 800d0ac:	9207      	str	r2, [sp, #28]
 800d0ae:	e014      	b.n	800d0da <_vfiprintf_r+0x156>
 800d0b0:	eba0 0308 	sub.w	r3, r0, r8
 800d0b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	9304      	str	r3, [sp, #16]
 800d0bc:	46a2      	mov	sl, r4
 800d0be:	e7d2      	b.n	800d066 <_vfiprintf_r+0xe2>
 800d0c0:	9b03      	ldr	r3, [sp, #12]
 800d0c2:	1d19      	adds	r1, r3, #4
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	9103      	str	r1, [sp, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	bfbb      	ittet	lt
 800d0cc:	425b      	neglt	r3, r3
 800d0ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d0d2:	9307      	strge	r3, [sp, #28]
 800d0d4:	9307      	strlt	r3, [sp, #28]
 800d0d6:	bfb8      	it	lt
 800d0d8:	9204      	strlt	r2, [sp, #16]
 800d0da:	7823      	ldrb	r3, [r4, #0]
 800d0dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0de:	d10c      	bne.n	800d0fa <_vfiprintf_r+0x176>
 800d0e0:	7863      	ldrb	r3, [r4, #1]
 800d0e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d0e4:	d135      	bne.n	800d152 <_vfiprintf_r+0x1ce>
 800d0e6:	9b03      	ldr	r3, [sp, #12]
 800d0e8:	1d1a      	adds	r2, r3, #4
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	9203      	str	r2, [sp, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	bfb8      	it	lt
 800d0f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0f6:	3402      	adds	r4, #2
 800d0f8:	9305      	str	r3, [sp, #20]
 800d0fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d1e0 <_vfiprintf_r+0x25c>
 800d0fe:	7821      	ldrb	r1, [r4, #0]
 800d100:	2203      	movs	r2, #3
 800d102:	4650      	mov	r0, sl
 800d104:	f7f3 f86c 	bl	80001e0 <memchr>
 800d108:	b140      	cbz	r0, 800d11c <_vfiprintf_r+0x198>
 800d10a:	2340      	movs	r3, #64	; 0x40
 800d10c:	eba0 000a 	sub.w	r0, r0, sl
 800d110:	fa03 f000 	lsl.w	r0, r3, r0
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	4303      	orrs	r3, r0
 800d118:	3401      	adds	r4, #1
 800d11a:	9304      	str	r3, [sp, #16]
 800d11c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d120:	482c      	ldr	r0, [pc, #176]	; (800d1d4 <_vfiprintf_r+0x250>)
 800d122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d126:	2206      	movs	r2, #6
 800d128:	f7f3 f85a 	bl	80001e0 <memchr>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d03f      	beq.n	800d1b0 <_vfiprintf_r+0x22c>
 800d130:	4b29      	ldr	r3, [pc, #164]	; (800d1d8 <_vfiprintf_r+0x254>)
 800d132:	bb1b      	cbnz	r3, 800d17c <_vfiprintf_r+0x1f8>
 800d134:	9b03      	ldr	r3, [sp, #12]
 800d136:	3307      	adds	r3, #7
 800d138:	f023 0307 	bic.w	r3, r3, #7
 800d13c:	3308      	adds	r3, #8
 800d13e:	9303      	str	r3, [sp, #12]
 800d140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d142:	443b      	add	r3, r7
 800d144:	9309      	str	r3, [sp, #36]	; 0x24
 800d146:	e767      	b.n	800d018 <_vfiprintf_r+0x94>
 800d148:	fb0c 3202 	mla	r2, ip, r2, r3
 800d14c:	460c      	mov	r4, r1
 800d14e:	2001      	movs	r0, #1
 800d150:	e7a5      	b.n	800d09e <_vfiprintf_r+0x11a>
 800d152:	2300      	movs	r3, #0
 800d154:	3401      	adds	r4, #1
 800d156:	9305      	str	r3, [sp, #20]
 800d158:	4619      	mov	r1, r3
 800d15a:	f04f 0c0a 	mov.w	ip, #10
 800d15e:	4620      	mov	r0, r4
 800d160:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d164:	3a30      	subs	r2, #48	; 0x30
 800d166:	2a09      	cmp	r2, #9
 800d168:	d903      	bls.n	800d172 <_vfiprintf_r+0x1ee>
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0c5      	beq.n	800d0fa <_vfiprintf_r+0x176>
 800d16e:	9105      	str	r1, [sp, #20]
 800d170:	e7c3      	b.n	800d0fa <_vfiprintf_r+0x176>
 800d172:	fb0c 2101 	mla	r1, ip, r1, r2
 800d176:	4604      	mov	r4, r0
 800d178:	2301      	movs	r3, #1
 800d17a:	e7f0      	b.n	800d15e <_vfiprintf_r+0x1da>
 800d17c:	ab03      	add	r3, sp, #12
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	462a      	mov	r2, r5
 800d182:	4b16      	ldr	r3, [pc, #88]	; (800d1dc <_vfiprintf_r+0x258>)
 800d184:	a904      	add	r1, sp, #16
 800d186:	4630      	mov	r0, r6
 800d188:	f7fc fb04 	bl	8009794 <_printf_float>
 800d18c:	4607      	mov	r7, r0
 800d18e:	1c78      	adds	r0, r7, #1
 800d190:	d1d6      	bne.n	800d140 <_vfiprintf_r+0x1bc>
 800d192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d194:	07d9      	lsls	r1, r3, #31
 800d196:	d405      	bmi.n	800d1a4 <_vfiprintf_r+0x220>
 800d198:	89ab      	ldrh	r3, [r5, #12]
 800d19a:	059a      	lsls	r2, r3, #22
 800d19c:	d402      	bmi.n	800d1a4 <_vfiprintf_r+0x220>
 800d19e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1a0:	f000 fadd 	bl	800d75e <__retarget_lock_release_recursive>
 800d1a4:	89ab      	ldrh	r3, [r5, #12]
 800d1a6:	065b      	lsls	r3, r3, #25
 800d1a8:	f53f af12 	bmi.w	800cfd0 <_vfiprintf_r+0x4c>
 800d1ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1ae:	e711      	b.n	800cfd4 <_vfiprintf_r+0x50>
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <_vfiprintf_r+0x258>)
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f7fc fd8e 	bl	8009cdc <_printf_i>
 800d1c0:	e7e4      	b.n	800d18c <_vfiprintf_r+0x208>
 800d1c2:	bf00      	nop
 800d1c4:	0800e300 	.word	0x0800e300
 800d1c8:	0800e320 	.word	0x0800e320
 800d1cc:	0800e2e0 	.word	0x0800e2e0
 800d1d0:	0800e1cc 	.word	0x0800e1cc
 800d1d4:	0800e1d6 	.word	0x0800e1d6
 800d1d8:	08009795 	.word	0x08009795
 800d1dc:	0800cf5f 	.word	0x0800cf5f
 800d1e0:	0800e1d2 	.word	0x0800e1d2
 800d1e4:	00000000 	.word	0x00000000

0800d1e8 <nan>:
 800d1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d1f0 <nan+0x8>
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	00000000 	.word	0x00000000
 800d1f4:	7ff80000 	.word	0x7ff80000

0800d1f8 <_sbrk_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d06      	ldr	r5, [pc, #24]	; (800d214 <_sbrk_r+0x1c>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	f7f8 fec2 	bl	8005f8c <_sbrk>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_sbrk_r+0x1a>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_sbrk_r+0x1a>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	20000584 	.word	0x20000584

0800d218 <strncmp>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	b17a      	cbz	r2, 800d23c <strncmp+0x24>
 800d21c:	4603      	mov	r3, r0
 800d21e:	3901      	subs	r1, #1
 800d220:	1884      	adds	r4, r0, r2
 800d222:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d226:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d22a:	4290      	cmp	r0, r2
 800d22c:	d101      	bne.n	800d232 <strncmp+0x1a>
 800d22e:	42a3      	cmp	r3, r4
 800d230:	d101      	bne.n	800d236 <strncmp+0x1e>
 800d232:	1a80      	subs	r0, r0, r2
 800d234:	bd10      	pop	{r4, pc}
 800d236:	2800      	cmp	r0, #0
 800d238:	d1f3      	bne.n	800d222 <strncmp+0xa>
 800d23a:	e7fa      	b.n	800d232 <strncmp+0x1a>
 800d23c:	4610      	mov	r0, r2
 800d23e:	e7f9      	b.n	800d234 <strncmp+0x1c>

0800d240 <__swbuf_r>:
 800d240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d242:	460e      	mov	r6, r1
 800d244:	4614      	mov	r4, r2
 800d246:	4605      	mov	r5, r0
 800d248:	b118      	cbz	r0, 800d252 <__swbuf_r+0x12>
 800d24a:	6983      	ldr	r3, [r0, #24]
 800d24c:	b90b      	cbnz	r3, 800d252 <__swbuf_r+0x12>
 800d24e:	f000 f9e7 	bl	800d620 <__sinit>
 800d252:	4b21      	ldr	r3, [pc, #132]	; (800d2d8 <__swbuf_r+0x98>)
 800d254:	429c      	cmp	r4, r3
 800d256:	d12b      	bne.n	800d2b0 <__swbuf_r+0x70>
 800d258:	686c      	ldr	r4, [r5, #4]
 800d25a:	69a3      	ldr	r3, [r4, #24]
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	89a3      	ldrh	r3, [r4, #12]
 800d260:	071a      	lsls	r2, r3, #28
 800d262:	d52f      	bpl.n	800d2c4 <__swbuf_r+0x84>
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	b36b      	cbz	r3, 800d2c4 <__swbuf_r+0x84>
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	6820      	ldr	r0, [r4, #0]
 800d26c:	1ac0      	subs	r0, r0, r3
 800d26e:	6963      	ldr	r3, [r4, #20]
 800d270:	b2f6      	uxtb	r6, r6
 800d272:	4283      	cmp	r3, r0
 800d274:	4637      	mov	r7, r6
 800d276:	dc04      	bgt.n	800d282 <__swbuf_r+0x42>
 800d278:	4621      	mov	r1, r4
 800d27a:	4628      	mov	r0, r5
 800d27c:	f000 f93c 	bl	800d4f8 <_fflush_r>
 800d280:	bb30      	cbnz	r0, 800d2d0 <__swbuf_r+0x90>
 800d282:	68a3      	ldr	r3, [r4, #8]
 800d284:	3b01      	subs	r3, #1
 800d286:	60a3      	str	r3, [r4, #8]
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	6022      	str	r2, [r4, #0]
 800d28e:	701e      	strb	r6, [r3, #0]
 800d290:	6963      	ldr	r3, [r4, #20]
 800d292:	3001      	adds	r0, #1
 800d294:	4283      	cmp	r3, r0
 800d296:	d004      	beq.n	800d2a2 <__swbuf_r+0x62>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	07db      	lsls	r3, r3, #31
 800d29c:	d506      	bpl.n	800d2ac <__swbuf_r+0x6c>
 800d29e:	2e0a      	cmp	r6, #10
 800d2a0:	d104      	bne.n	800d2ac <__swbuf_r+0x6c>
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f000 f927 	bl	800d4f8 <_fflush_r>
 800d2aa:	b988      	cbnz	r0, 800d2d0 <__swbuf_r+0x90>
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <__swbuf_r+0x9c>)
 800d2b2:	429c      	cmp	r4, r3
 800d2b4:	d101      	bne.n	800d2ba <__swbuf_r+0x7a>
 800d2b6:	68ac      	ldr	r4, [r5, #8]
 800d2b8:	e7cf      	b.n	800d25a <__swbuf_r+0x1a>
 800d2ba:	4b09      	ldr	r3, [pc, #36]	; (800d2e0 <__swbuf_r+0xa0>)
 800d2bc:	429c      	cmp	r4, r3
 800d2be:	bf08      	it	eq
 800d2c0:	68ec      	ldreq	r4, [r5, #12]
 800d2c2:	e7ca      	b.n	800d25a <__swbuf_r+0x1a>
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f000 f81a 	bl	800d300 <__swsetup_r>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d0cb      	beq.n	800d268 <__swbuf_r+0x28>
 800d2d0:	f04f 37ff 	mov.w	r7, #4294967295
 800d2d4:	e7ea      	b.n	800d2ac <__swbuf_r+0x6c>
 800d2d6:	bf00      	nop
 800d2d8:	0800e300 	.word	0x0800e300
 800d2dc:	0800e320 	.word	0x0800e320
 800d2e0:	0800e2e0 	.word	0x0800e2e0

0800d2e4 <__ascii_wctomb>:
 800d2e4:	b149      	cbz	r1, 800d2fa <__ascii_wctomb+0x16>
 800d2e6:	2aff      	cmp	r2, #255	; 0xff
 800d2e8:	bf85      	ittet	hi
 800d2ea:	238a      	movhi	r3, #138	; 0x8a
 800d2ec:	6003      	strhi	r3, [r0, #0]
 800d2ee:	700a      	strbls	r2, [r1, #0]
 800d2f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2f4:	bf98      	it	ls
 800d2f6:	2001      	movls	r0, #1
 800d2f8:	4770      	bx	lr
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	4770      	bx	lr
	...

0800d300 <__swsetup_r>:
 800d300:	4b32      	ldr	r3, [pc, #200]	; (800d3cc <__swsetup_r+0xcc>)
 800d302:	b570      	push	{r4, r5, r6, lr}
 800d304:	681d      	ldr	r5, [r3, #0]
 800d306:	4606      	mov	r6, r0
 800d308:	460c      	mov	r4, r1
 800d30a:	b125      	cbz	r5, 800d316 <__swsetup_r+0x16>
 800d30c:	69ab      	ldr	r3, [r5, #24]
 800d30e:	b913      	cbnz	r3, 800d316 <__swsetup_r+0x16>
 800d310:	4628      	mov	r0, r5
 800d312:	f000 f985 	bl	800d620 <__sinit>
 800d316:	4b2e      	ldr	r3, [pc, #184]	; (800d3d0 <__swsetup_r+0xd0>)
 800d318:	429c      	cmp	r4, r3
 800d31a:	d10f      	bne.n	800d33c <__swsetup_r+0x3c>
 800d31c:	686c      	ldr	r4, [r5, #4]
 800d31e:	89a3      	ldrh	r3, [r4, #12]
 800d320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d324:	0719      	lsls	r1, r3, #28
 800d326:	d42c      	bmi.n	800d382 <__swsetup_r+0x82>
 800d328:	06dd      	lsls	r5, r3, #27
 800d32a:	d411      	bmi.n	800d350 <__swsetup_r+0x50>
 800d32c:	2309      	movs	r3, #9
 800d32e:	6033      	str	r3, [r6, #0]
 800d330:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d334:	81a3      	strh	r3, [r4, #12]
 800d336:	f04f 30ff 	mov.w	r0, #4294967295
 800d33a:	e03e      	b.n	800d3ba <__swsetup_r+0xba>
 800d33c:	4b25      	ldr	r3, [pc, #148]	; (800d3d4 <__swsetup_r+0xd4>)
 800d33e:	429c      	cmp	r4, r3
 800d340:	d101      	bne.n	800d346 <__swsetup_r+0x46>
 800d342:	68ac      	ldr	r4, [r5, #8]
 800d344:	e7eb      	b.n	800d31e <__swsetup_r+0x1e>
 800d346:	4b24      	ldr	r3, [pc, #144]	; (800d3d8 <__swsetup_r+0xd8>)
 800d348:	429c      	cmp	r4, r3
 800d34a:	bf08      	it	eq
 800d34c:	68ec      	ldreq	r4, [r5, #12]
 800d34e:	e7e6      	b.n	800d31e <__swsetup_r+0x1e>
 800d350:	0758      	lsls	r0, r3, #29
 800d352:	d512      	bpl.n	800d37a <__swsetup_r+0x7a>
 800d354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d356:	b141      	cbz	r1, 800d36a <__swsetup_r+0x6a>
 800d358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d35c:	4299      	cmp	r1, r3
 800d35e:	d002      	beq.n	800d366 <__swsetup_r+0x66>
 800d360:	4630      	mov	r0, r6
 800d362:	f7ff fba9 	bl	800cab8 <_free_r>
 800d366:	2300      	movs	r3, #0
 800d368:	6363      	str	r3, [r4, #52]	; 0x34
 800d36a:	89a3      	ldrh	r3, [r4, #12]
 800d36c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d370:	81a3      	strh	r3, [r4, #12]
 800d372:	2300      	movs	r3, #0
 800d374:	6063      	str	r3, [r4, #4]
 800d376:	6923      	ldr	r3, [r4, #16]
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	89a3      	ldrh	r3, [r4, #12]
 800d37c:	f043 0308 	orr.w	r3, r3, #8
 800d380:	81a3      	strh	r3, [r4, #12]
 800d382:	6923      	ldr	r3, [r4, #16]
 800d384:	b94b      	cbnz	r3, 800d39a <__swsetup_r+0x9a>
 800d386:	89a3      	ldrh	r3, [r4, #12]
 800d388:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d390:	d003      	beq.n	800d39a <__swsetup_r+0x9a>
 800d392:	4621      	mov	r1, r4
 800d394:	4630      	mov	r0, r6
 800d396:	f000 fa09 	bl	800d7ac <__smakebuf_r>
 800d39a:	89a0      	ldrh	r0, [r4, #12]
 800d39c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3a0:	f010 0301 	ands.w	r3, r0, #1
 800d3a4:	d00a      	beq.n	800d3bc <__swsetup_r+0xbc>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60a3      	str	r3, [r4, #8]
 800d3aa:	6963      	ldr	r3, [r4, #20]
 800d3ac:	425b      	negs	r3, r3
 800d3ae:	61a3      	str	r3, [r4, #24]
 800d3b0:	6923      	ldr	r3, [r4, #16]
 800d3b2:	b943      	cbnz	r3, 800d3c6 <__swsetup_r+0xc6>
 800d3b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3b8:	d1ba      	bne.n	800d330 <__swsetup_r+0x30>
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}
 800d3bc:	0781      	lsls	r1, r0, #30
 800d3be:	bf58      	it	pl
 800d3c0:	6963      	ldrpl	r3, [r4, #20]
 800d3c2:	60a3      	str	r3, [r4, #8]
 800d3c4:	e7f4      	b.n	800d3b0 <__swsetup_r+0xb0>
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	e7f7      	b.n	800d3ba <__swsetup_r+0xba>
 800d3ca:	bf00      	nop
 800d3cc:	20000020 	.word	0x20000020
 800d3d0:	0800e300 	.word	0x0800e300
 800d3d4:	0800e320 	.word	0x0800e320
 800d3d8:	0800e2e0 	.word	0x0800e2e0

0800d3dc <abort>:
 800d3dc:	b508      	push	{r3, lr}
 800d3de:	2006      	movs	r0, #6
 800d3e0:	f000 faa2 	bl	800d928 <raise>
 800d3e4:	2001      	movs	r0, #1
 800d3e6:	f7f8 fd59 	bl	8005e9c <_exit>
	...

0800d3ec <__sflush_r>:
 800d3ec:	898a      	ldrh	r2, [r1, #12]
 800d3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	0710      	lsls	r0, r2, #28
 800d3f6:	460c      	mov	r4, r1
 800d3f8:	d458      	bmi.n	800d4ac <__sflush_r+0xc0>
 800d3fa:	684b      	ldr	r3, [r1, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dc05      	bgt.n	800d40c <__sflush_r+0x20>
 800d400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d402:	2b00      	cmp	r3, #0
 800d404:	dc02      	bgt.n	800d40c <__sflush_r+0x20>
 800d406:	2000      	movs	r0, #0
 800d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d40c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d40e:	2e00      	cmp	r6, #0
 800d410:	d0f9      	beq.n	800d406 <__sflush_r+0x1a>
 800d412:	2300      	movs	r3, #0
 800d414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d418:	682f      	ldr	r7, [r5, #0]
 800d41a:	602b      	str	r3, [r5, #0]
 800d41c:	d032      	beq.n	800d484 <__sflush_r+0x98>
 800d41e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	075a      	lsls	r2, r3, #29
 800d424:	d505      	bpl.n	800d432 <__sflush_r+0x46>
 800d426:	6863      	ldr	r3, [r4, #4]
 800d428:	1ac0      	subs	r0, r0, r3
 800d42a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d42c:	b10b      	cbz	r3, 800d432 <__sflush_r+0x46>
 800d42e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d430:	1ac0      	subs	r0, r0, r3
 800d432:	2300      	movs	r3, #0
 800d434:	4602      	mov	r2, r0
 800d436:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d438:	6a21      	ldr	r1, [r4, #32]
 800d43a:	4628      	mov	r0, r5
 800d43c:	47b0      	blx	r6
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	d106      	bne.n	800d452 <__sflush_r+0x66>
 800d444:	6829      	ldr	r1, [r5, #0]
 800d446:	291d      	cmp	r1, #29
 800d448:	d82c      	bhi.n	800d4a4 <__sflush_r+0xb8>
 800d44a:	4a2a      	ldr	r2, [pc, #168]	; (800d4f4 <__sflush_r+0x108>)
 800d44c:	40ca      	lsrs	r2, r1
 800d44e:	07d6      	lsls	r6, r2, #31
 800d450:	d528      	bpl.n	800d4a4 <__sflush_r+0xb8>
 800d452:	2200      	movs	r2, #0
 800d454:	6062      	str	r2, [r4, #4]
 800d456:	04d9      	lsls	r1, r3, #19
 800d458:	6922      	ldr	r2, [r4, #16]
 800d45a:	6022      	str	r2, [r4, #0]
 800d45c:	d504      	bpl.n	800d468 <__sflush_r+0x7c>
 800d45e:	1c42      	adds	r2, r0, #1
 800d460:	d101      	bne.n	800d466 <__sflush_r+0x7a>
 800d462:	682b      	ldr	r3, [r5, #0]
 800d464:	b903      	cbnz	r3, 800d468 <__sflush_r+0x7c>
 800d466:	6560      	str	r0, [r4, #84]	; 0x54
 800d468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d46a:	602f      	str	r7, [r5, #0]
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d0ca      	beq.n	800d406 <__sflush_r+0x1a>
 800d470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d474:	4299      	cmp	r1, r3
 800d476:	d002      	beq.n	800d47e <__sflush_r+0x92>
 800d478:	4628      	mov	r0, r5
 800d47a:	f7ff fb1d 	bl	800cab8 <_free_r>
 800d47e:	2000      	movs	r0, #0
 800d480:	6360      	str	r0, [r4, #52]	; 0x34
 800d482:	e7c1      	b.n	800d408 <__sflush_r+0x1c>
 800d484:	6a21      	ldr	r1, [r4, #32]
 800d486:	2301      	movs	r3, #1
 800d488:	4628      	mov	r0, r5
 800d48a:	47b0      	blx	r6
 800d48c:	1c41      	adds	r1, r0, #1
 800d48e:	d1c7      	bne.n	800d420 <__sflush_r+0x34>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d0c4      	beq.n	800d420 <__sflush_r+0x34>
 800d496:	2b1d      	cmp	r3, #29
 800d498:	d001      	beq.n	800d49e <__sflush_r+0xb2>
 800d49a:	2b16      	cmp	r3, #22
 800d49c:	d101      	bne.n	800d4a2 <__sflush_r+0xb6>
 800d49e:	602f      	str	r7, [r5, #0]
 800d4a0:	e7b1      	b.n	800d406 <__sflush_r+0x1a>
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a8:	81a3      	strh	r3, [r4, #12]
 800d4aa:	e7ad      	b.n	800d408 <__sflush_r+0x1c>
 800d4ac:	690f      	ldr	r7, [r1, #16]
 800d4ae:	2f00      	cmp	r7, #0
 800d4b0:	d0a9      	beq.n	800d406 <__sflush_r+0x1a>
 800d4b2:	0793      	lsls	r3, r2, #30
 800d4b4:	680e      	ldr	r6, [r1, #0]
 800d4b6:	bf08      	it	eq
 800d4b8:	694b      	ldreq	r3, [r1, #20]
 800d4ba:	600f      	str	r7, [r1, #0]
 800d4bc:	bf18      	it	ne
 800d4be:	2300      	movne	r3, #0
 800d4c0:	eba6 0807 	sub.w	r8, r6, r7
 800d4c4:	608b      	str	r3, [r1, #8]
 800d4c6:	f1b8 0f00 	cmp.w	r8, #0
 800d4ca:	dd9c      	ble.n	800d406 <__sflush_r+0x1a>
 800d4cc:	6a21      	ldr	r1, [r4, #32]
 800d4ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4d0:	4643      	mov	r3, r8
 800d4d2:	463a      	mov	r2, r7
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	47b0      	blx	r6
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	dc06      	bgt.n	800d4ea <__sflush_r+0xfe>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e8:	e78e      	b.n	800d408 <__sflush_r+0x1c>
 800d4ea:	4407      	add	r7, r0
 800d4ec:	eba8 0800 	sub.w	r8, r8, r0
 800d4f0:	e7e9      	b.n	800d4c6 <__sflush_r+0xda>
 800d4f2:	bf00      	nop
 800d4f4:	20400001 	.word	0x20400001

0800d4f8 <_fflush_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	690b      	ldr	r3, [r1, #16]
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	460c      	mov	r4, r1
 800d500:	b913      	cbnz	r3, 800d508 <_fflush_r+0x10>
 800d502:	2500      	movs	r5, #0
 800d504:	4628      	mov	r0, r5
 800d506:	bd38      	pop	{r3, r4, r5, pc}
 800d508:	b118      	cbz	r0, 800d512 <_fflush_r+0x1a>
 800d50a:	6983      	ldr	r3, [r0, #24]
 800d50c:	b90b      	cbnz	r3, 800d512 <_fflush_r+0x1a>
 800d50e:	f000 f887 	bl	800d620 <__sinit>
 800d512:	4b14      	ldr	r3, [pc, #80]	; (800d564 <_fflush_r+0x6c>)
 800d514:	429c      	cmp	r4, r3
 800d516:	d11b      	bne.n	800d550 <_fflush_r+0x58>
 800d518:	686c      	ldr	r4, [r5, #4]
 800d51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d0ef      	beq.n	800d502 <_fflush_r+0xa>
 800d522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d524:	07d0      	lsls	r0, r2, #31
 800d526:	d404      	bmi.n	800d532 <_fflush_r+0x3a>
 800d528:	0599      	lsls	r1, r3, #22
 800d52a:	d402      	bmi.n	800d532 <_fflush_r+0x3a>
 800d52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d52e:	f000 f915 	bl	800d75c <__retarget_lock_acquire_recursive>
 800d532:	4628      	mov	r0, r5
 800d534:	4621      	mov	r1, r4
 800d536:	f7ff ff59 	bl	800d3ec <__sflush_r>
 800d53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d53c:	07da      	lsls	r2, r3, #31
 800d53e:	4605      	mov	r5, r0
 800d540:	d4e0      	bmi.n	800d504 <_fflush_r+0xc>
 800d542:	89a3      	ldrh	r3, [r4, #12]
 800d544:	059b      	lsls	r3, r3, #22
 800d546:	d4dd      	bmi.n	800d504 <_fflush_r+0xc>
 800d548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d54a:	f000 f908 	bl	800d75e <__retarget_lock_release_recursive>
 800d54e:	e7d9      	b.n	800d504 <_fflush_r+0xc>
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <_fflush_r+0x70>)
 800d552:	429c      	cmp	r4, r3
 800d554:	d101      	bne.n	800d55a <_fflush_r+0x62>
 800d556:	68ac      	ldr	r4, [r5, #8]
 800d558:	e7df      	b.n	800d51a <_fflush_r+0x22>
 800d55a:	4b04      	ldr	r3, [pc, #16]	; (800d56c <_fflush_r+0x74>)
 800d55c:	429c      	cmp	r4, r3
 800d55e:	bf08      	it	eq
 800d560:	68ec      	ldreq	r4, [r5, #12]
 800d562:	e7da      	b.n	800d51a <_fflush_r+0x22>
 800d564:	0800e300 	.word	0x0800e300
 800d568:	0800e320 	.word	0x0800e320
 800d56c:	0800e2e0 	.word	0x0800e2e0

0800d570 <std>:
 800d570:	2300      	movs	r3, #0
 800d572:	b510      	push	{r4, lr}
 800d574:	4604      	mov	r4, r0
 800d576:	e9c0 3300 	strd	r3, r3, [r0]
 800d57a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d57e:	6083      	str	r3, [r0, #8]
 800d580:	8181      	strh	r1, [r0, #12]
 800d582:	6643      	str	r3, [r0, #100]	; 0x64
 800d584:	81c2      	strh	r2, [r0, #14]
 800d586:	6183      	str	r3, [r0, #24]
 800d588:	4619      	mov	r1, r3
 800d58a:	2208      	movs	r2, #8
 800d58c:	305c      	adds	r0, #92	; 0x5c
 800d58e:	f7fc f859 	bl	8009644 <memset>
 800d592:	4b05      	ldr	r3, [pc, #20]	; (800d5a8 <std+0x38>)
 800d594:	6263      	str	r3, [r4, #36]	; 0x24
 800d596:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <std+0x3c>)
 800d598:	62a3      	str	r3, [r4, #40]	; 0x28
 800d59a:	4b05      	ldr	r3, [pc, #20]	; (800d5b0 <std+0x40>)
 800d59c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d59e:	4b05      	ldr	r3, [pc, #20]	; (800d5b4 <std+0x44>)
 800d5a0:	6224      	str	r4, [r4, #32]
 800d5a2:	6323      	str	r3, [r4, #48]	; 0x30
 800d5a4:	bd10      	pop	{r4, pc}
 800d5a6:	bf00      	nop
 800d5a8:	0800d961 	.word	0x0800d961
 800d5ac:	0800d983 	.word	0x0800d983
 800d5b0:	0800d9bb 	.word	0x0800d9bb
 800d5b4:	0800d9df 	.word	0x0800d9df

0800d5b8 <_cleanup_r>:
 800d5b8:	4901      	ldr	r1, [pc, #4]	; (800d5c0 <_cleanup_r+0x8>)
 800d5ba:	f000 b8af 	b.w	800d71c <_fwalk_reent>
 800d5be:	bf00      	nop
 800d5c0:	0800d4f9 	.word	0x0800d4f9

0800d5c4 <__sfmoreglue>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	2268      	movs	r2, #104	; 0x68
 800d5c8:	1e4d      	subs	r5, r1, #1
 800d5ca:	4355      	muls	r5, r2
 800d5cc:	460e      	mov	r6, r1
 800d5ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d5d2:	f7ff fadd 	bl	800cb90 <_malloc_r>
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	b140      	cbz	r0, 800d5ec <__sfmoreglue+0x28>
 800d5da:	2100      	movs	r1, #0
 800d5dc:	e9c0 1600 	strd	r1, r6, [r0]
 800d5e0:	300c      	adds	r0, #12
 800d5e2:	60a0      	str	r0, [r4, #8]
 800d5e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5e8:	f7fc f82c 	bl	8009644 <memset>
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}

0800d5f0 <__sfp_lock_acquire>:
 800d5f0:	4801      	ldr	r0, [pc, #4]	; (800d5f8 <__sfp_lock_acquire+0x8>)
 800d5f2:	f000 b8b3 	b.w	800d75c <__retarget_lock_acquire_recursive>
 800d5f6:	bf00      	nop
 800d5f8:	20000581 	.word	0x20000581

0800d5fc <__sfp_lock_release>:
 800d5fc:	4801      	ldr	r0, [pc, #4]	; (800d604 <__sfp_lock_release+0x8>)
 800d5fe:	f000 b8ae 	b.w	800d75e <__retarget_lock_release_recursive>
 800d602:	bf00      	nop
 800d604:	20000581 	.word	0x20000581

0800d608 <__sinit_lock_acquire>:
 800d608:	4801      	ldr	r0, [pc, #4]	; (800d610 <__sinit_lock_acquire+0x8>)
 800d60a:	f000 b8a7 	b.w	800d75c <__retarget_lock_acquire_recursive>
 800d60e:	bf00      	nop
 800d610:	20000582 	.word	0x20000582

0800d614 <__sinit_lock_release>:
 800d614:	4801      	ldr	r0, [pc, #4]	; (800d61c <__sinit_lock_release+0x8>)
 800d616:	f000 b8a2 	b.w	800d75e <__retarget_lock_release_recursive>
 800d61a:	bf00      	nop
 800d61c:	20000582 	.word	0x20000582

0800d620 <__sinit>:
 800d620:	b510      	push	{r4, lr}
 800d622:	4604      	mov	r4, r0
 800d624:	f7ff fff0 	bl	800d608 <__sinit_lock_acquire>
 800d628:	69a3      	ldr	r3, [r4, #24]
 800d62a:	b11b      	cbz	r3, 800d634 <__sinit+0x14>
 800d62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d630:	f7ff bff0 	b.w	800d614 <__sinit_lock_release>
 800d634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d638:	6523      	str	r3, [r4, #80]	; 0x50
 800d63a:	4b13      	ldr	r3, [pc, #76]	; (800d688 <__sinit+0x68>)
 800d63c:	4a13      	ldr	r2, [pc, #76]	; (800d68c <__sinit+0x6c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	62a2      	str	r2, [r4, #40]	; 0x28
 800d642:	42a3      	cmp	r3, r4
 800d644:	bf04      	itt	eq
 800d646:	2301      	moveq	r3, #1
 800d648:	61a3      	streq	r3, [r4, #24]
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 f820 	bl	800d690 <__sfp>
 800d650:	6060      	str	r0, [r4, #4]
 800d652:	4620      	mov	r0, r4
 800d654:	f000 f81c 	bl	800d690 <__sfp>
 800d658:	60a0      	str	r0, [r4, #8]
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 f818 	bl	800d690 <__sfp>
 800d660:	2200      	movs	r2, #0
 800d662:	60e0      	str	r0, [r4, #12]
 800d664:	2104      	movs	r1, #4
 800d666:	6860      	ldr	r0, [r4, #4]
 800d668:	f7ff ff82 	bl	800d570 <std>
 800d66c:	68a0      	ldr	r0, [r4, #8]
 800d66e:	2201      	movs	r2, #1
 800d670:	2109      	movs	r1, #9
 800d672:	f7ff ff7d 	bl	800d570 <std>
 800d676:	68e0      	ldr	r0, [r4, #12]
 800d678:	2202      	movs	r2, #2
 800d67a:	2112      	movs	r1, #18
 800d67c:	f7ff ff78 	bl	800d570 <std>
 800d680:	2301      	movs	r3, #1
 800d682:	61a3      	str	r3, [r4, #24]
 800d684:	e7d2      	b.n	800d62c <__sinit+0xc>
 800d686:	bf00      	nop
 800d688:	0800de44 	.word	0x0800de44
 800d68c:	0800d5b9 	.word	0x0800d5b9

0800d690 <__sfp>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	4607      	mov	r7, r0
 800d694:	f7ff ffac 	bl	800d5f0 <__sfp_lock_acquire>
 800d698:	4b1e      	ldr	r3, [pc, #120]	; (800d714 <__sfp+0x84>)
 800d69a:	681e      	ldr	r6, [r3, #0]
 800d69c:	69b3      	ldr	r3, [r6, #24]
 800d69e:	b913      	cbnz	r3, 800d6a6 <__sfp+0x16>
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7ff ffbd 	bl	800d620 <__sinit>
 800d6a6:	3648      	adds	r6, #72	; 0x48
 800d6a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	d503      	bpl.n	800d6b8 <__sfp+0x28>
 800d6b0:	6833      	ldr	r3, [r6, #0]
 800d6b2:	b30b      	cbz	r3, 800d6f8 <__sfp+0x68>
 800d6b4:	6836      	ldr	r6, [r6, #0]
 800d6b6:	e7f7      	b.n	800d6a8 <__sfp+0x18>
 800d6b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d6bc:	b9d5      	cbnz	r5, 800d6f4 <__sfp+0x64>
 800d6be:	4b16      	ldr	r3, [pc, #88]	; (800d718 <__sfp+0x88>)
 800d6c0:	60e3      	str	r3, [r4, #12]
 800d6c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6c6:	6665      	str	r5, [r4, #100]	; 0x64
 800d6c8:	f000 f847 	bl	800d75a <__retarget_lock_init_recursive>
 800d6cc:	f7ff ff96 	bl	800d5fc <__sfp_lock_release>
 800d6d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6d8:	6025      	str	r5, [r4, #0]
 800d6da:	61a5      	str	r5, [r4, #24]
 800d6dc:	2208      	movs	r2, #8
 800d6de:	4629      	mov	r1, r5
 800d6e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6e4:	f7fb ffae 	bl	8009644 <memset>
 800d6e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f4:	3468      	adds	r4, #104	; 0x68
 800d6f6:	e7d9      	b.n	800d6ac <__sfp+0x1c>
 800d6f8:	2104      	movs	r1, #4
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	f7ff ff62 	bl	800d5c4 <__sfmoreglue>
 800d700:	4604      	mov	r4, r0
 800d702:	6030      	str	r0, [r6, #0]
 800d704:	2800      	cmp	r0, #0
 800d706:	d1d5      	bne.n	800d6b4 <__sfp+0x24>
 800d708:	f7ff ff78 	bl	800d5fc <__sfp_lock_release>
 800d70c:	230c      	movs	r3, #12
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	e7ee      	b.n	800d6f0 <__sfp+0x60>
 800d712:	bf00      	nop
 800d714:	0800de44 	.word	0x0800de44
 800d718:	ffff0001 	.word	0xffff0001

0800d71c <_fwalk_reent>:
 800d71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d720:	4606      	mov	r6, r0
 800d722:	4688      	mov	r8, r1
 800d724:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d728:	2700      	movs	r7, #0
 800d72a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d72e:	f1b9 0901 	subs.w	r9, r9, #1
 800d732:	d505      	bpl.n	800d740 <_fwalk_reent+0x24>
 800d734:	6824      	ldr	r4, [r4, #0]
 800d736:	2c00      	cmp	r4, #0
 800d738:	d1f7      	bne.n	800d72a <_fwalk_reent+0xe>
 800d73a:	4638      	mov	r0, r7
 800d73c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d740:	89ab      	ldrh	r3, [r5, #12]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d907      	bls.n	800d756 <_fwalk_reent+0x3a>
 800d746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d74a:	3301      	adds	r3, #1
 800d74c:	d003      	beq.n	800d756 <_fwalk_reent+0x3a>
 800d74e:	4629      	mov	r1, r5
 800d750:	4630      	mov	r0, r6
 800d752:	47c0      	blx	r8
 800d754:	4307      	orrs	r7, r0
 800d756:	3568      	adds	r5, #104	; 0x68
 800d758:	e7e9      	b.n	800d72e <_fwalk_reent+0x12>

0800d75a <__retarget_lock_init_recursive>:
 800d75a:	4770      	bx	lr

0800d75c <__retarget_lock_acquire_recursive>:
 800d75c:	4770      	bx	lr

0800d75e <__retarget_lock_release_recursive>:
 800d75e:	4770      	bx	lr

0800d760 <__swhatbuf_r>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	460e      	mov	r6, r1
 800d764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d768:	2900      	cmp	r1, #0
 800d76a:	b096      	sub	sp, #88	; 0x58
 800d76c:	4614      	mov	r4, r2
 800d76e:	461d      	mov	r5, r3
 800d770:	da08      	bge.n	800d784 <__swhatbuf_r+0x24>
 800d772:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d776:	2200      	movs	r2, #0
 800d778:	602a      	str	r2, [r5, #0]
 800d77a:	061a      	lsls	r2, r3, #24
 800d77c:	d410      	bmi.n	800d7a0 <__swhatbuf_r+0x40>
 800d77e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d782:	e00e      	b.n	800d7a2 <__swhatbuf_r+0x42>
 800d784:	466a      	mov	r2, sp
 800d786:	f000 f951 	bl	800da2c <_fstat_r>
 800d78a:	2800      	cmp	r0, #0
 800d78c:	dbf1      	blt.n	800d772 <__swhatbuf_r+0x12>
 800d78e:	9a01      	ldr	r2, [sp, #4]
 800d790:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d794:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d798:	425a      	negs	r2, r3
 800d79a:	415a      	adcs	r2, r3
 800d79c:	602a      	str	r2, [r5, #0]
 800d79e:	e7ee      	b.n	800d77e <__swhatbuf_r+0x1e>
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	b016      	add	sp, #88	; 0x58
 800d7a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d7ac <__smakebuf_r>:
 800d7ac:	898b      	ldrh	r3, [r1, #12]
 800d7ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d7b0:	079d      	lsls	r5, r3, #30
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	d507      	bpl.n	800d7c8 <__smakebuf_r+0x1c>
 800d7b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	6163      	str	r3, [r4, #20]
 800d7c4:	b002      	add	sp, #8
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
 800d7c8:	ab01      	add	r3, sp, #4
 800d7ca:	466a      	mov	r2, sp
 800d7cc:	f7ff ffc8 	bl	800d760 <__swhatbuf_r>
 800d7d0:	9900      	ldr	r1, [sp, #0]
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	f7ff f9db 	bl	800cb90 <_malloc_r>
 800d7da:	b948      	cbnz	r0, 800d7f0 <__smakebuf_r+0x44>
 800d7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7e0:	059a      	lsls	r2, r3, #22
 800d7e2:	d4ef      	bmi.n	800d7c4 <__smakebuf_r+0x18>
 800d7e4:	f023 0303 	bic.w	r3, r3, #3
 800d7e8:	f043 0302 	orr.w	r3, r3, #2
 800d7ec:	81a3      	strh	r3, [r4, #12]
 800d7ee:	e7e3      	b.n	800d7b8 <__smakebuf_r+0xc>
 800d7f0:	4b0d      	ldr	r3, [pc, #52]	; (800d828 <__smakebuf_r+0x7c>)
 800d7f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	6020      	str	r0, [r4, #0]
 800d7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7fc:	81a3      	strh	r3, [r4, #12]
 800d7fe:	9b00      	ldr	r3, [sp, #0]
 800d800:	6163      	str	r3, [r4, #20]
 800d802:	9b01      	ldr	r3, [sp, #4]
 800d804:	6120      	str	r0, [r4, #16]
 800d806:	b15b      	cbz	r3, 800d820 <__smakebuf_r+0x74>
 800d808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d80c:	4630      	mov	r0, r6
 800d80e:	f000 f91f 	bl	800da50 <_isatty_r>
 800d812:	b128      	cbz	r0, 800d820 <__smakebuf_r+0x74>
 800d814:	89a3      	ldrh	r3, [r4, #12]
 800d816:	f023 0303 	bic.w	r3, r3, #3
 800d81a:	f043 0301 	orr.w	r3, r3, #1
 800d81e:	81a3      	strh	r3, [r4, #12]
 800d820:	89a0      	ldrh	r0, [r4, #12]
 800d822:	4305      	orrs	r5, r0
 800d824:	81a5      	strh	r5, [r4, #12]
 800d826:	e7cd      	b.n	800d7c4 <__smakebuf_r+0x18>
 800d828:	0800d5b9 	.word	0x0800d5b9

0800d82c <memmove>:
 800d82c:	4288      	cmp	r0, r1
 800d82e:	b510      	push	{r4, lr}
 800d830:	eb01 0402 	add.w	r4, r1, r2
 800d834:	d902      	bls.n	800d83c <memmove+0x10>
 800d836:	4284      	cmp	r4, r0
 800d838:	4623      	mov	r3, r4
 800d83a:	d807      	bhi.n	800d84c <memmove+0x20>
 800d83c:	1e43      	subs	r3, r0, #1
 800d83e:	42a1      	cmp	r1, r4
 800d840:	d008      	beq.n	800d854 <memmove+0x28>
 800d842:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d84a:	e7f8      	b.n	800d83e <memmove+0x12>
 800d84c:	4402      	add	r2, r0
 800d84e:	4601      	mov	r1, r0
 800d850:	428a      	cmp	r2, r1
 800d852:	d100      	bne.n	800d856 <memmove+0x2a>
 800d854:	bd10      	pop	{r4, pc}
 800d856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d85a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d85e:	e7f7      	b.n	800d850 <memmove+0x24>

0800d860 <__malloc_lock>:
 800d860:	4801      	ldr	r0, [pc, #4]	; (800d868 <__malloc_lock+0x8>)
 800d862:	f7ff bf7b 	b.w	800d75c <__retarget_lock_acquire_recursive>
 800d866:	bf00      	nop
 800d868:	20000580 	.word	0x20000580

0800d86c <__malloc_unlock>:
 800d86c:	4801      	ldr	r0, [pc, #4]	; (800d874 <__malloc_unlock+0x8>)
 800d86e:	f7ff bf76 	b.w	800d75e <__retarget_lock_release_recursive>
 800d872:	bf00      	nop
 800d874:	20000580 	.word	0x20000580

0800d878 <_realloc_r>:
 800d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87c:	4680      	mov	r8, r0
 800d87e:	4614      	mov	r4, r2
 800d880:	460e      	mov	r6, r1
 800d882:	b921      	cbnz	r1, 800d88e <_realloc_r+0x16>
 800d884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d888:	4611      	mov	r1, r2
 800d88a:	f7ff b981 	b.w	800cb90 <_malloc_r>
 800d88e:	b92a      	cbnz	r2, 800d89c <_realloc_r+0x24>
 800d890:	f7ff f912 	bl	800cab8 <_free_r>
 800d894:	4625      	mov	r5, r4
 800d896:	4628      	mov	r0, r5
 800d898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89c:	f000 f8fa 	bl	800da94 <_malloc_usable_size_r>
 800d8a0:	4284      	cmp	r4, r0
 800d8a2:	4607      	mov	r7, r0
 800d8a4:	d802      	bhi.n	800d8ac <_realloc_r+0x34>
 800d8a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d8aa:	d812      	bhi.n	800d8d2 <_realloc_r+0x5a>
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	4640      	mov	r0, r8
 800d8b0:	f7ff f96e 	bl	800cb90 <_malloc_r>
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d0ed      	beq.n	800d896 <_realloc_r+0x1e>
 800d8ba:	42bc      	cmp	r4, r7
 800d8bc:	4622      	mov	r2, r4
 800d8be:	4631      	mov	r1, r6
 800d8c0:	bf28      	it	cs
 800d8c2:	463a      	movcs	r2, r7
 800d8c4:	f7fe fc12 	bl	800c0ec <memcpy>
 800d8c8:	4631      	mov	r1, r6
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	f7ff f8f4 	bl	800cab8 <_free_r>
 800d8d0:	e7e1      	b.n	800d896 <_realloc_r+0x1e>
 800d8d2:	4635      	mov	r5, r6
 800d8d4:	e7df      	b.n	800d896 <_realloc_r+0x1e>

0800d8d6 <_raise_r>:
 800d8d6:	291f      	cmp	r1, #31
 800d8d8:	b538      	push	{r3, r4, r5, lr}
 800d8da:	4604      	mov	r4, r0
 800d8dc:	460d      	mov	r5, r1
 800d8de:	d904      	bls.n	800d8ea <_raise_r+0x14>
 800d8e0:	2316      	movs	r3, #22
 800d8e2:	6003      	str	r3, [r0, #0]
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d8ec:	b112      	cbz	r2, 800d8f4 <_raise_r+0x1e>
 800d8ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8f2:	b94b      	cbnz	r3, 800d908 <_raise_r+0x32>
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f000 f831 	bl	800d95c <_getpid_r>
 800d8fa:	462a      	mov	r2, r5
 800d8fc:	4601      	mov	r1, r0
 800d8fe:	4620      	mov	r0, r4
 800d900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d904:	f000 b818 	b.w	800d938 <_kill_r>
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d00a      	beq.n	800d922 <_raise_r+0x4c>
 800d90c:	1c59      	adds	r1, r3, #1
 800d90e:	d103      	bne.n	800d918 <_raise_r+0x42>
 800d910:	2316      	movs	r3, #22
 800d912:	6003      	str	r3, [r0, #0]
 800d914:	2001      	movs	r0, #1
 800d916:	e7e7      	b.n	800d8e8 <_raise_r+0x12>
 800d918:	2400      	movs	r4, #0
 800d91a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d91e:	4628      	mov	r0, r5
 800d920:	4798      	blx	r3
 800d922:	2000      	movs	r0, #0
 800d924:	e7e0      	b.n	800d8e8 <_raise_r+0x12>
	...

0800d928 <raise>:
 800d928:	4b02      	ldr	r3, [pc, #8]	; (800d934 <raise+0xc>)
 800d92a:	4601      	mov	r1, r0
 800d92c:	6818      	ldr	r0, [r3, #0]
 800d92e:	f7ff bfd2 	b.w	800d8d6 <_raise_r>
 800d932:	bf00      	nop
 800d934:	20000020 	.word	0x20000020

0800d938 <_kill_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4d07      	ldr	r5, [pc, #28]	; (800d958 <_kill_r+0x20>)
 800d93c:	2300      	movs	r3, #0
 800d93e:	4604      	mov	r4, r0
 800d940:	4608      	mov	r0, r1
 800d942:	4611      	mov	r1, r2
 800d944:	602b      	str	r3, [r5, #0]
 800d946:	f7f8 fa99 	bl	8005e7c <_kill>
 800d94a:	1c43      	adds	r3, r0, #1
 800d94c:	d102      	bne.n	800d954 <_kill_r+0x1c>
 800d94e:	682b      	ldr	r3, [r5, #0]
 800d950:	b103      	cbz	r3, 800d954 <_kill_r+0x1c>
 800d952:	6023      	str	r3, [r4, #0]
 800d954:	bd38      	pop	{r3, r4, r5, pc}
 800d956:	bf00      	nop
 800d958:	20000584 	.word	0x20000584

0800d95c <_getpid_r>:
 800d95c:	f7f8 ba86 	b.w	8005e6c <_getpid>

0800d960 <__sread>:
 800d960:	b510      	push	{r4, lr}
 800d962:	460c      	mov	r4, r1
 800d964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d968:	f000 f89c 	bl	800daa4 <_read_r>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	bfab      	itete	ge
 800d970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d972:	89a3      	ldrhlt	r3, [r4, #12]
 800d974:	181b      	addge	r3, r3, r0
 800d976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d97a:	bfac      	ite	ge
 800d97c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d97e:	81a3      	strhlt	r3, [r4, #12]
 800d980:	bd10      	pop	{r4, pc}

0800d982 <__swrite>:
 800d982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d986:	461f      	mov	r7, r3
 800d988:	898b      	ldrh	r3, [r1, #12]
 800d98a:	05db      	lsls	r3, r3, #23
 800d98c:	4605      	mov	r5, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	4616      	mov	r6, r2
 800d992:	d505      	bpl.n	800d9a0 <__swrite+0x1e>
 800d994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d998:	2302      	movs	r3, #2
 800d99a:	2200      	movs	r2, #0
 800d99c:	f000 f868 	bl	800da70 <_lseek_r>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9aa:	81a3      	strh	r3, [r4, #12]
 800d9ac:	4632      	mov	r2, r6
 800d9ae:	463b      	mov	r3, r7
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b6:	f000 b817 	b.w	800d9e8 <_write_r>

0800d9ba <__sseek>:
 800d9ba:	b510      	push	{r4, lr}
 800d9bc:	460c      	mov	r4, r1
 800d9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c2:	f000 f855 	bl	800da70 <_lseek_r>
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	bf15      	itete	ne
 800d9cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9d6:	81a3      	strheq	r3, [r4, #12]
 800d9d8:	bf18      	it	ne
 800d9da:	81a3      	strhne	r3, [r4, #12]
 800d9dc:	bd10      	pop	{r4, pc}

0800d9de <__sclose>:
 800d9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e2:	f000 b813 	b.w	800da0c <_close_r>
	...

0800d9e8 <_write_r>:
 800d9e8:	b538      	push	{r3, r4, r5, lr}
 800d9ea:	4d07      	ldr	r5, [pc, #28]	; (800da08 <_write_r+0x20>)
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	4608      	mov	r0, r1
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	602a      	str	r2, [r5, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	f7f8 fa77 	bl	8005eea <_write>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d102      	bne.n	800da06 <_write_r+0x1e>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	b103      	cbz	r3, 800da06 <_write_r+0x1e>
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	20000584 	.word	0x20000584

0800da0c <_close_r>:
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	4d06      	ldr	r5, [pc, #24]	; (800da28 <_close_r+0x1c>)
 800da10:	2300      	movs	r3, #0
 800da12:	4604      	mov	r4, r0
 800da14:	4608      	mov	r0, r1
 800da16:	602b      	str	r3, [r5, #0]
 800da18:	f7f8 fa83 	bl	8005f22 <_close>
 800da1c:	1c43      	adds	r3, r0, #1
 800da1e:	d102      	bne.n	800da26 <_close_r+0x1a>
 800da20:	682b      	ldr	r3, [r5, #0]
 800da22:	b103      	cbz	r3, 800da26 <_close_r+0x1a>
 800da24:	6023      	str	r3, [r4, #0]
 800da26:	bd38      	pop	{r3, r4, r5, pc}
 800da28:	20000584 	.word	0x20000584

0800da2c <_fstat_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d07      	ldr	r5, [pc, #28]	; (800da4c <_fstat_r+0x20>)
 800da30:	2300      	movs	r3, #0
 800da32:	4604      	mov	r4, r0
 800da34:	4608      	mov	r0, r1
 800da36:	4611      	mov	r1, r2
 800da38:	602b      	str	r3, [r5, #0]
 800da3a:	f7f8 fa7e 	bl	8005f3a <_fstat>
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	d102      	bne.n	800da48 <_fstat_r+0x1c>
 800da42:	682b      	ldr	r3, [r5, #0]
 800da44:	b103      	cbz	r3, 800da48 <_fstat_r+0x1c>
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	bd38      	pop	{r3, r4, r5, pc}
 800da4a:	bf00      	nop
 800da4c:	20000584 	.word	0x20000584

0800da50 <_isatty_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4d06      	ldr	r5, [pc, #24]	; (800da6c <_isatty_r+0x1c>)
 800da54:	2300      	movs	r3, #0
 800da56:	4604      	mov	r4, r0
 800da58:	4608      	mov	r0, r1
 800da5a:	602b      	str	r3, [r5, #0]
 800da5c:	f7f8 fa7d 	bl	8005f5a <_isatty>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_isatty_r+0x1a>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_isatty_r+0x1a>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	20000584 	.word	0x20000584

0800da70 <_lseek_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4d07      	ldr	r5, [pc, #28]	; (800da90 <_lseek_r+0x20>)
 800da74:	4604      	mov	r4, r0
 800da76:	4608      	mov	r0, r1
 800da78:	4611      	mov	r1, r2
 800da7a:	2200      	movs	r2, #0
 800da7c:	602a      	str	r2, [r5, #0]
 800da7e:	461a      	mov	r2, r3
 800da80:	f7f8 fa76 	bl	8005f70 <_lseek>
 800da84:	1c43      	adds	r3, r0, #1
 800da86:	d102      	bne.n	800da8e <_lseek_r+0x1e>
 800da88:	682b      	ldr	r3, [r5, #0]
 800da8a:	b103      	cbz	r3, 800da8e <_lseek_r+0x1e>
 800da8c:	6023      	str	r3, [r4, #0]
 800da8e:	bd38      	pop	{r3, r4, r5, pc}
 800da90:	20000584 	.word	0x20000584

0800da94 <_malloc_usable_size_r>:
 800da94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da98:	1f18      	subs	r0, r3, #4
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	bfbc      	itt	lt
 800da9e:	580b      	ldrlt	r3, [r1, r0]
 800daa0:	18c0      	addlt	r0, r0, r3
 800daa2:	4770      	bx	lr

0800daa4 <_read_r>:
 800daa4:	b538      	push	{r3, r4, r5, lr}
 800daa6:	4d07      	ldr	r5, [pc, #28]	; (800dac4 <_read_r+0x20>)
 800daa8:	4604      	mov	r4, r0
 800daaa:	4608      	mov	r0, r1
 800daac:	4611      	mov	r1, r2
 800daae:	2200      	movs	r2, #0
 800dab0:	602a      	str	r2, [r5, #0]
 800dab2:	461a      	mov	r2, r3
 800dab4:	f7f8 f9fc 	bl	8005eb0 <_read>
 800dab8:	1c43      	adds	r3, r0, #1
 800daba:	d102      	bne.n	800dac2 <_read_r+0x1e>
 800dabc:	682b      	ldr	r3, [r5, #0]
 800dabe:	b103      	cbz	r3, 800dac2 <_read_r+0x1e>
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	bd38      	pop	{r3, r4, r5, pc}
 800dac4:	20000584 	.word	0x20000584

0800dac8 <sqrt>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	ed2d 8b02 	vpush	{d8}
 800dace:	ec55 4b10 	vmov	r4, r5, d0
 800dad2:	f000 f825 	bl	800db20 <__ieee754_sqrt>
 800dad6:	4622      	mov	r2, r4
 800dad8:	462b      	mov	r3, r5
 800dada:	4620      	mov	r0, r4
 800dadc:	4629      	mov	r1, r5
 800dade:	eeb0 8a40 	vmov.f32	s16, s0
 800dae2:	eef0 8a60 	vmov.f32	s17, s1
 800dae6:	f7f3 f821 	bl	8000b2c <__aeabi_dcmpun>
 800daea:	b990      	cbnz	r0, 800db12 <sqrt+0x4a>
 800daec:	2200      	movs	r2, #0
 800daee:	2300      	movs	r3, #0
 800daf0:	4620      	mov	r0, r4
 800daf2:	4629      	mov	r1, r5
 800daf4:	f7f2 fff2 	bl	8000adc <__aeabi_dcmplt>
 800daf8:	b158      	cbz	r0, 800db12 <sqrt+0x4a>
 800dafa:	f7fb fd79 	bl	80095f0 <__errno>
 800dafe:	2321      	movs	r3, #33	; 0x21
 800db00:	6003      	str	r3, [r0, #0]
 800db02:	2200      	movs	r2, #0
 800db04:	2300      	movs	r3, #0
 800db06:	4610      	mov	r0, r2
 800db08:	4619      	mov	r1, r3
 800db0a:	f7f2 fe9f 	bl	800084c <__aeabi_ddiv>
 800db0e:	ec41 0b18 	vmov	d8, r0, r1
 800db12:	eeb0 0a48 	vmov.f32	s0, s16
 800db16:	eef0 0a68 	vmov.f32	s1, s17
 800db1a:	ecbd 8b02 	vpop	{d8}
 800db1e:	bd38      	pop	{r3, r4, r5, pc}

0800db20 <__ieee754_sqrt>:
 800db20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db24:	ec55 4b10 	vmov	r4, r5, d0
 800db28:	4e55      	ldr	r6, [pc, #340]	; (800dc80 <__ieee754_sqrt+0x160>)
 800db2a:	43ae      	bics	r6, r5
 800db2c:	ee10 0a10 	vmov	r0, s0
 800db30:	ee10 3a10 	vmov	r3, s0
 800db34:	462a      	mov	r2, r5
 800db36:	4629      	mov	r1, r5
 800db38:	d110      	bne.n	800db5c <__ieee754_sqrt+0x3c>
 800db3a:	ee10 2a10 	vmov	r2, s0
 800db3e:	462b      	mov	r3, r5
 800db40:	f7f2 fd5a 	bl	80005f8 <__aeabi_dmul>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4620      	mov	r0, r4
 800db4a:	4629      	mov	r1, r5
 800db4c:	f7f2 fb9e 	bl	800028c <__adddf3>
 800db50:	4604      	mov	r4, r0
 800db52:	460d      	mov	r5, r1
 800db54:	ec45 4b10 	vmov	d0, r4, r5
 800db58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db5c:	2d00      	cmp	r5, #0
 800db5e:	dc10      	bgt.n	800db82 <__ieee754_sqrt+0x62>
 800db60:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db64:	4330      	orrs	r0, r6
 800db66:	d0f5      	beq.n	800db54 <__ieee754_sqrt+0x34>
 800db68:	b15d      	cbz	r5, 800db82 <__ieee754_sqrt+0x62>
 800db6a:	ee10 2a10 	vmov	r2, s0
 800db6e:	462b      	mov	r3, r5
 800db70:	ee10 0a10 	vmov	r0, s0
 800db74:	f7f2 fb88 	bl	8000288 <__aeabi_dsub>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	f7f2 fe66 	bl	800084c <__aeabi_ddiv>
 800db80:	e7e6      	b.n	800db50 <__ieee754_sqrt+0x30>
 800db82:	1512      	asrs	r2, r2, #20
 800db84:	d074      	beq.n	800dc70 <__ieee754_sqrt+0x150>
 800db86:	07d4      	lsls	r4, r2, #31
 800db88:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800db8c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800db90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800db94:	bf5e      	ittt	pl
 800db96:	0fda      	lsrpl	r2, r3, #31
 800db98:	005b      	lslpl	r3, r3, #1
 800db9a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800db9e:	2400      	movs	r4, #0
 800dba0:	0fda      	lsrs	r2, r3, #31
 800dba2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dba6:	107f      	asrs	r7, r7, #1
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	2516      	movs	r5, #22
 800dbac:	4620      	mov	r0, r4
 800dbae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dbb2:	1886      	adds	r6, r0, r2
 800dbb4:	428e      	cmp	r6, r1
 800dbb6:	bfde      	ittt	le
 800dbb8:	1b89      	suble	r1, r1, r6
 800dbba:	18b0      	addle	r0, r6, r2
 800dbbc:	18a4      	addle	r4, r4, r2
 800dbbe:	0049      	lsls	r1, r1, #1
 800dbc0:	3d01      	subs	r5, #1
 800dbc2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800dbc6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dbca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dbce:	d1f0      	bne.n	800dbb2 <__ieee754_sqrt+0x92>
 800dbd0:	462a      	mov	r2, r5
 800dbd2:	f04f 0e20 	mov.w	lr, #32
 800dbd6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dbda:	4281      	cmp	r1, r0
 800dbdc:	eb06 0c05 	add.w	ip, r6, r5
 800dbe0:	dc02      	bgt.n	800dbe8 <__ieee754_sqrt+0xc8>
 800dbe2:	d113      	bne.n	800dc0c <__ieee754_sqrt+0xec>
 800dbe4:	459c      	cmp	ip, r3
 800dbe6:	d811      	bhi.n	800dc0c <__ieee754_sqrt+0xec>
 800dbe8:	f1bc 0f00 	cmp.w	ip, #0
 800dbec:	eb0c 0506 	add.w	r5, ip, r6
 800dbf0:	da43      	bge.n	800dc7a <__ieee754_sqrt+0x15a>
 800dbf2:	2d00      	cmp	r5, #0
 800dbf4:	db41      	blt.n	800dc7a <__ieee754_sqrt+0x15a>
 800dbf6:	f100 0801 	add.w	r8, r0, #1
 800dbfa:	1a09      	subs	r1, r1, r0
 800dbfc:	459c      	cmp	ip, r3
 800dbfe:	bf88      	it	hi
 800dc00:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800dc04:	eba3 030c 	sub.w	r3, r3, ip
 800dc08:	4432      	add	r2, r6
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800dc10:	f1be 0e01 	subs.w	lr, lr, #1
 800dc14:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800dc18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc1c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dc20:	d1db      	bne.n	800dbda <__ieee754_sqrt+0xba>
 800dc22:	430b      	orrs	r3, r1
 800dc24:	d006      	beq.n	800dc34 <__ieee754_sqrt+0x114>
 800dc26:	1c50      	adds	r0, r2, #1
 800dc28:	bf13      	iteet	ne
 800dc2a:	3201      	addne	r2, #1
 800dc2c:	3401      	addeq	r4, #1
 800dc2e:	4672      	moveq	r2, lr
 800dc30:	f022 0201 	bicne.w	r2, r2, #1
 800dc34:	1063      	asrs	r3, r4, #1
 800dc36:	0852      	lsrs	r2, r2, #1
 800dc38:	07e1      	lsls	r1, r4, #31
 800dc3a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dc3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dc42:	bf48      	it	mi
 800dc44:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dc48:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dc4c:	4614      	mov	r4, r2
 800dc4e:	e781      	b.n	800db54 <__ieee754_sqrt+0x34>
 800dc50:	0ad9      	lsrs	r1, r3, #11
 800dc52:	3815      	subs	r0, #21
 800dc54:	055b      	lsls	r3, r3, #21
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d0fa      	beq.n	800dc50 <__ieee754_sqrt+0x130>
 800dc5a:	02cd      	lsls	r5, r1, #11
 800dc5c:	d50a      	bpl.n	800dc74 <__ieee754_sqrt+0x154>
 800dc5e:	f1c2 0420 	rsb	r4, r2, #32
 800dc62:	fa23 f404 	lsr.w	r4, r3, r4
 800dc66:	1e55      	subs	r5, r2, #1
 800dc68:	4093      	lsls	r3, r2
 800dc6a:	4321      	orrs	r1, r4
 800dc6c:	1b42      	subs	r2, r0, r5
 800dc6e:	e78a      	b.n	800db86 <__ieee754_sqrt+0x66>
 800dc70:	4610      	mov	r0, r2
 800dc72:	e7f0      	b.n	800dc56 <__ieee754_sqrt+0x136>
 800dc74:	0049      	lsls	r1, r1, #1
 800dc76:	3201      	adds	r2, #1
 800dc78:	e7ef      	b.n	800dc5a <__ieee754_sqrt+0x13a>
 800dc7a:	4680      	mov	r8, r0
 800dc7c:	e7bd      	b.n	800dbfa <__ieee754_sqrt+0xda>
 800dc7e:	bf00      	nop
 800dc80:	7ff00000 	.word	0x7ff00000

0800dc84 <_init>:
 800dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc86:	bf00      	nop
 800dc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc8a:	bc08      	pop	{r3}
 800dc8c:	469e      	mov	lr, r3
 800dc8e:	4770      	bx	lr

0800dc90 <_fini>:
 800dc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc92:	bf00      	nop
 800dc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc96:	bc08      	pop	{r3}
 800dc98:	469e      	mov	lr, r3
 800dc9a:	4770      	bx	lr
